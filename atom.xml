<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Adam Codes</title>
  <link href="http://adamcod.es/"/>
  <link type="application/atom+xml" rel="self" href="http://adamcod.es/atom.xml"/>
  <updated>2013-11-22T16:38:30+00:00</updated>
  <id>http://adamcod.es/</id>
  <author>
    <name>Adam Brett</name>
    <email>adam@adambrett.co.uk</email>
  </author>

  
  <entry>
    <id>http://adamcod.es/2013/11/22/tell-dont-ask</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/11/22/tell-dont-ask.html"/>
    <title>Tell, Don't Ask</title>
    <published>2013-11-22T00:00:00+00:00</published>
    <updated>2013-11-22T00:00:00+00:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;Violation of the Tell, Don’t Ask principle is one of the most common mistakes I see in legacy code-bases, and one of the most common mistakes I see in new code that I review.  Left unchecked it can lead to serious problems down the line.&lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleForm&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;select name=&amp;quot;%s&amp;quot;&amp;gt;%s&amp;lt;/select&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OPTION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;option value=&amp;quot;%s&amp;quot;&amp;gt;%s&amp;lt;/option&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ExampleMapper&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...snip...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getExampleSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;someSelect&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$someForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExampleForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$someForm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExampleSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On the face of it, this code is actually pretty good.  It’s some sort of form class, and the &lt;code&gt;getExampleSelect&lt;/code&gt; method is building up an HTML select element.  The mapper was injected, meaning the code is pretty easy to test, as we can replace the mapper with a mock object.&lt;/p&gt;

&lt;p&gt;There is a problem, however, and the problem is a fundamental one.  Left unchecked, this problem can grow and fester with your software.  Over time it can cause your development pace to slow to the point adding even trivial new features or changes to existing code can take weeks or months, slowing development velocity to a crawl, or stalling it altogether.&lt;/p&gt;

&lt;p&gt;The problem with the above code, which may not be obvious at first, is the &lt;code&gt;getExampleSelect&lt;/code&gt; method &lt;em&gt;asking&lt;/em&gt; the mapper for a list to iterate over. By injecting the mapper and then &lt;em&gt;asking&lt;/em&gt; it for the list we are tying the implementation of that form not only to the mapper, but also the implementation of the mapper.&lt;/p&gt;

&lt;p&gt;This means that in 6 months, 12 months, or even (as in the case at my current employment) 8 years later, you want to create an instance of &lt;code&gt;ExampleForm&lt;/code&gt; that specifies the list options manually, rather than relying on the mapper, you have very few options to re-use this form class.  You can either sub-class it, or you can hack &lt;code&gt;$mapper-&amp;gt;fetchList()&lt;/code&gt; to return different things, adding in some sort of flag depending on the situation.&lt;/p&gt;

&lt;p&gt;Over time this can grow and lead to a mess of sub-classes and hacky code with cryptic flags that anyone who has maintained a large enough legacy application has seen hundreds of times before.&lt;/p&gt;

&lt;p&gt;Taking a step back and looking at this code objectively, does your form really need to know about the mapper?  Does it really care &lt;em&gt;where&lt;/em&gt; that list comes from, or does it just care about the list itself?  Really all it needs is the list, so how about if we re-wrote it, something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleForm&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;select name=&amp;quot;%s&amp;quot;&amp;gt;%s&amp;lt;/select&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OPTION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;option value=&amp;quot;%s&amp;quot;&amp;gt;%s&amp;lt;/option&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exampleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ExampleList&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exampleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exampleList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exampleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...snip...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getExampleSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exampleList&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;someSelect&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$someForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExampleForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$someForm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExampleSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The change here is a very subtle, but very fundamental one.  As our form object doesn’t ever need to know where its list is coming from, just that it receives it, our form has suddenly become a whole lot more flexible.&lt;/p&gt;

&lt;p&gt;By telling the form upfront that we want it to use &lt;em&gt;this&lt;/em&gt; list, the implementation doesn’t ever need to change, as the form doesn’t care &lt;em&gt;where&lt;/em&gt; that list comes from, as long as it is always there.&lt;/p&gt;

&lt;h2 id=&quot;feature-envy&quot;&gt;Feature Envy&lt;/h2&gt;

&lt;p&gt;Feature Envy&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is when one class uses a lot of the methods of another class, or a class performs actions on and changes the internal state of another object.  Tell, Don’t Ask can be used to avoid this type of code-smell.  Here is another example that illustrates this type of problem:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IssueTracker&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;closeBug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;closed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example is a less obvious Tell, Don’t Ask type code-smell, but because we’re asking the object about its state and then altering it based on the result, it does qualify.  Inside the object itself this wouldn’t be a problem, but outside of the object it’s indicative of Feature Envy.&lt;/p&gt;

&lt;p&gt;An object should always be responsible for altering its own state, so the above should be rewritten as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IssueTracker&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;closeBug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$bug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bug&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;closed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This changes our &lt;code&gt;IssueTracker&lt;/code&gt; so that is tells the bug to close, rather than asking the bug for its state and altering it based on the result.&lt;/p&gt;

&lt;p&gt;This also encapsulates the domain logic for the &lt;code&gt;Bug&lt;/code&gt; entity (i.e. that it cannot be closed unless it is fixed) inside the &lt;code&gt;Bug&lt;/code&gt; object.  This means that whenever a &lt;code&gt;Bug&lt;/code&gt; object is created it can never enter an invalid state, because the public interface won’t allow it, the decision is always made by the &lt;code&gt;Bug&lt;/code&gt; itself, and never the object that’s calling it.&lt;/p&gt;

&lt;h2 id=&quot;exceptions&quot;&gt;Exceptions&lt;/h2&gt;

&lt;p&gt;As with all rules, there are exceptions to Tell, Don’t Ask.  The most obvious of which is the Parameter Object&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Consider the following example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleMapper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ExampleEntity&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we’re treating our Entity as a Parameter Object, and  &lt;em&gt;asking&lt;/em&gt; it for its values, rather than &lt;em&gt;telling&lt;/em&gt; the mapper what values to use.  In this instance, it is an acceptable trade-off, as the entity shouldn’t know that it’s persisted, as some types of entities may never be stored anywhere (e.g. an &lt;code&gt;InMemoryEntity&lt;/code&gt;), so it doesn’t make sense to have a &lt;code&gt;store&lt;/code&gt; method on the entity. Also, because an entity could evolve over time our method signature could be constantly evolving, or an entity could have a large number of properties that would be inconvenient to specify manually.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you’re already doing Dependency Injection, Tell Don’t Ask is going to be one of the most powerful tools you have for writing code that is as flexible and de-coupled as possible.  Add it to the things you check for in code-reviews, teach it to your junior developers, and make sure you refactor it away whenever you spot it in legacy code.&lt;/p&gt;

&lt;h2 id=&quot;read-next&quot;&gt;Read Next:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://adamcodes/2013/09/27/function-method-procedure.html&quot;&gt;Function vs Method vs Procedure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://c2.com/cgi/wiki?FeatureEnvySmell&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://c2.com/cgi/wiki?ParameterObject&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/09/27/function-method-procedure</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/09/27/function-method-procedure.html"/>
    <title>Function vs Method vs Procedure</title>
    <published>2013-09-27T00:00:00+01:00</published>
    <updated>2013-09-27T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;There seems to be a lot of confusion around the different names given to what are all effectively sub-routines.  Some people erroneously believe they are all essentially the same thing, and technically, whilst they are all simply different words for sub-routines, understanding the subtle differences between each can help you write better code.&lt;/p&gt;

&lt;h2 id=&quot;sub-routines&quot;&gt;Sub-routines&lt;/h2&gt;

&lt;p&gt;Before you can accurately define types of sub-routine, you need to know what a sub-routine is.  It is actually quite simple to define: A sub-routine is a repeatable piece of procedural code you can call by name.&lt;/p&gt;

&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;/h2&gt;

&lt;p&gt;A function is essentially a sub-routine that returns one or more values.  A function should calculate its return value based on its input; It should provide an answer about its arguments, or compute a new value based on its arguments.  Here are some examples of functions in PHP:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAGreaterThanB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This function provides an answer about its arguments.  Namely, is &lt;code&gt;$a&lt;/code&gt; greater than &lt;code&gt;$b&lt;/code&gt;?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This function calculates a new value based on the values of its inputs, specifically, multiplying &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; together and returning the result.&lt;/p&gt;

&lt;p&gt;The above examples are considered &lt;em&gt;Pure Functions&lt;/em&gt; because they don’t rely on or modify anything outside of their own scope, and they don’t cause any side-effects; that means they don’t write any files, produce any output etc.  Given the same input, a pure function will always produce the exact same output.&lt;/p&gt;

&lt;h2 id=&quot;procedures&quot;&gt;Procedures&lt;/h2&gt;

&lt;p&gt;A procedure is a sub-routine that doesn’t return a value, but does have side-effects.  This could be writing to a file, printing to the screen, or modifying the value of its input.  Here are two procedures in PHP:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$bytesWritten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file_put_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$level&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.log&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FILE_APPEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$bytesWritten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, our side-effect is to write a message to a log file.  We can return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to determin whether it failed or not, but really should not return anything else.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is an example of a procedure that mutates (modifies) its input value.  It is almost identical to our multiply function above, however instead of returning a new value, we pass &lt;code&gt;$a&lt;/code&gt; by reference and assign it a new value.&lt;/p&gt;

&lt;h2 id=&quot;methods&quot;&gt;Methods&lt;/h2&gt;

&lt;p&gt;I have deliberately left methods for last, because a method is really a function or procedure that is executed in the context of an &lt;em&gt;object&lt;/em&gt;.  That means there are two types of methods: A &lt;em&gt;function method&lt;/em&gt; and a &lt;em&gt;procedure method&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A function method calculates a new value based on the values of its inputs and/or the scope of the object instance it’s being executed on.&lt;/p&gt;

&lt;p&gt;Here are the above function examples in an object context:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isGreatherThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Following this logically, a procedure method is a procedure that produces side-effects that can include modifying the state of the object instance it’s being executed on.&lt;/p&gt;

&lt;p&gt;Here are the above procedure examples in an object context:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$bytesWritten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file_put_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.log&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FILE_APPEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$bytesWritten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and our multiply example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It’s sometimes easy to forget these distinctions when writing PHP, as everything starts with the &lt;code&gt;function&lt;/code&gt; keyword, however, if you ask yourself: “What type of sub-routine do I &lt;em&gt;really&lt;/em&gt; want here?” you will hopefully find that you start to make better decisions and will write more logical and maintainable code.&lt;/p&gt;

&lt;h2 id=&quot;read-next&quot;&gt;Read Next:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://adamcodes/2013/09/10/interface-segregation-principle-mappers-gateways.html&quot;&gt;Interface-Segregation Principle in the Context of Mappers and Gateways&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/09/10/interface-segregation-principle-mappers-gateways</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/09/10/interface-segregation-principle-mappers-gateways.html"/>
    <title>Interface-Segregation Principle in the Context of Mappers and Gateways</title>
    <published>2013-09-10T00:00:00+01:00</published>
    <updated>2013-09-10T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;The interface-segregation principle is the &lt;em&gt;I&lt;/em&gt; in the SOLID&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; acronym that describes the 5 basic principles of good object oriented design.  It states that no client (read: &lt;em&gt;object&lt;/em&gt;) should be forced to depend on methods it does not use.&lt;/p&gt;

&lt;p&gt;Take this simple snippet that that will probably be familiar to most of you:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeMapper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zend_Db_Table_Abstract&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$someGateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$someGateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a fairly simple form of Dependency Injection where the gateway that we’re operating on is injected in to our mapper, meaning that we could pass any subclass of &lt;code&gt;Zend_Db_Table_Abstract&lt;/code&gt; to our mapper when we construct it and safely expect all of the methods of &lt;code&gt;Zend_Db_Table_Abstract&lt;/code&gt; to be available to us.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the methods available to us in &lt;code&gt;Zend_Db_Table_Abstract&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setOptions
setDefinition
getDefinition
setDefinitionConfigName
getDefinitionConfigName
setRowClass
getRowClass
setRowsetClass
getRowsetClass
addReference
setReferences
getReference
setDependentTables
getDependentTables
setDefaultSource
getDefaultSource
setDefaultValues
getDefaultValues
setDefaultAdapter
getDefaultAdapter
getAdapter
setDefaultMetadataCache
getDefaultMetadataCache
getMetadataCache
setMetadataCacheInClass
metadataCacheInClass
init
info
select
insert
isIdentity
update
delete
find
fetchAll
fetchRow
fetchNew
createRow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s 38 methods that are available to our mapper.&lt;/p&gt;

&lt;p&gt;In reality, does our mapper need to use all of those?  Chances are it doesn’t, but if we type hint on &lt;code&gt;Zend_Db_Table_Abstract&lt;/code&gt;, any object we pass in to our mapper will &lt;em&gt;have&lt;/em&gt; to implement all of those methods&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The interface-segregation principle &lt;strong&gt;requires&lt;/strong&gt; us to use a better way.  If we expand on our mapper a little bit, we could end up with something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeMapper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zend_Db_Table_Abstract&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$someGateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$someGateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findAllByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name = ?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a fairly common use-case.  We only use a few methods from &lt;code&gt;Zend_Db_Table_Abstract&lt;/code&gt; in our mapper, so why not create an interface just for those methods:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SelectableInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zend_Db_Select&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we should make sure our mapper depend on this interface, instead of the full &lt;code&gt;Zend_Db_Table_Abstract&lt;/code&gt; interface:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeMapper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SelectableInterface&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$someGateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$someGateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ... snip ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we make sure our concrete gateway class implements our new interface, like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OurGateway&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zend_Db_Table_Abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SelectableInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We don’t actually need to add any methods, as &lt;code&gt;Zend_Db_Table_Abstract&lt;/code&gt; implements them for us.&lt;/p&gt;

&lt;p&gt;The benefits are immediately obvious here.  Let’s say we don’t want to use &lt;code&gt;Zend_Db_Table_Abstract&lt;/code&gt; for our gateway anymore, and instead we just want to use PDO straight-up.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OurGateway&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SelectableInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pdo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PDO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pdo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pdo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pdo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// fetch all type hints on Zend_Db_Select and as it just returns&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// SQL in its __toString method there shouldn&amp;#39;t be a problem&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// using it with PDO.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zend_Db_Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zend_Db_Select&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$statement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pdo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This implementation still works with our mapper just as well as the original which was based on &lt;code&gt;Zend_Db_Table_Abstract&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But what about when you want to add some more methods to the gateway?  I don’t like to build any SQL outside of my gateways, as I don’t think mappers should have knowledge of the underlying data-structure, so let’s move our &lt;code&gt;findAllByName&lt;/code&gt; method’s SQL building part down a level, to the gateway:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OurGateway&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zend_Db_Table_Abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FetchableInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFindAllByNameSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name = ?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the relevant mapper:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeMapper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FetchableInterface&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$someGateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$someGateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findAllByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFindAllByNameSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and finally the updated interface:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FetchableInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zend_Db_Select&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example is somewhat contrived, you wouldn’t implement these classes this way in real life, but I want to use them to illustrait a point.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;FetchableInterface&lt;/code&gt; doesn’t require the &lt;code&gt;getFindAllByNameSelect&lt;/code&gt; method to be present, but our mapper depends on it.  The reason for this is that we want our interfaces to be as small as possible.  The smallest possible (useful) interface for our gateways is the &lt;code&gt;FetchableInterface&lt;/code&gt;; saying that we can fetch all instances of an object from that gateway based on a &lt;code&gt;Zend_Db_Select&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Not all of our gateways are going to have a &lt;code&gt;getFindAllByNameSelect&lt;/code&gt; method, so we don’t want to add it to our interface that may well be used for a large number of our gateways.  So for our &lt;code&gt;getFindAllByNameSelect&lt;/code&gt; method, we create another interface:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FindByNameInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFindAllByNameSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fortunately, PHP lets you implement multiple interfaces, so we can update our gateway to enforce this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OurGateway&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zend_Db_Table_Abstract&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FetchableInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FindByNameInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... snip ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But this leads to a problem:  We can’t type hint on multiple interfaces in our mapper.  Thankfully, PHP has a little-known feature in that interfaces can use multiple inheritance.  That means we can create a new third interface that our mapper &lt;em&gt;can&lt;/em&gt; type hint on:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FetchableByNameInterface&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FetchableInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FindByNameInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This interface doesn’t need any methods (though you could add some if you wanted to), as it inherits methods from both &lt;code&gt;FetchableInterface&lt;/code&gt; and &lt;code&gt;FindByNameInterface&lt;/code&gt;.  Now we can update our mapper to type hint on this new interface:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeMapper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FetchableByNameInterface&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$someGateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$someGateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ... snip ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and our gateway:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OurGateway&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zend_Db_Table_Abstract&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FetchableByNameInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... snip ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As I said before, the examples here are somewhere contrived, and could be achieved in different or simpler ways (such as &lt;code&gt;FindByNameInterface&lt;/code&gt; extending &lt;code&gt;FetchableInterface&lt;/code&gt;), but the main point of this post was to demonstrait how to use multiple-inheritance with interfaces to achieve really nice and simple interface-segregation.&lt;/p&gt;

&lt;p&gt;Hopefully armed with this knowledge you can go out and start creating objects that depend on the smallest possible interface, which will help you write easier and smaller unit tests (fewer methods to mock), and more reliable and robust code that is ultimately easier to maintain too!&lt;/p&gt;

&lt;h2 id=&quot;read-next&quot;&gt;Read Next:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://3v4l.org/Yff7T&quot;&gt;Example of this code on 80+ PHP versions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://adamcodes/2013/05/30/zend-1.x-phpunit-3.4-and-3.7-composer.html&quot;&gt;Zend Framework 1.x, PHPUnit 3.4 and PHPUnit 3.7 side-by-side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Actually, as &lt;code&gt;Zend_Db_Table_Abstract&lt;/code&gt; is an abstract class and not an interface it will need to &lt;em&gt;extend&lt;/em&gt; Zend_Db_Table_Abstract which already has all of those methods implemented.&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/08/27/one-thing-i-wish-i-knew-opscode-chef</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/08/27/one-thing-i-wish-i-knew-opscode-chef.html"/>
    <title>The One Thing I Wish I Knew When Starting To Use Chef</title>
    <published>2013-08-27T00:00:00+01:00</published>
    <updated>2013-08-27T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;After a couple of months playing with chef, writing my own recipes, consuming, extending, and fixing bugs in other recipes, creating numerous cookbooks for use with vagrant, and even a couple I’ve used to provision servers, there is one thing I’ve picked up that I wish I’d known more than anything when I wrote &lt;a href=&quot;http://adamcodes/2013/01/15/vagrant-is-easy-chef-is-hard.html&quot;&gt;Vagrant is easy - Chef is hard&lt;/a&gt;.  Chef has a package manager.&lt;/p&gt;

&lt;h2 id=&quot;librarian-chef&quot;&gt;Librarian-Chef&lt;/h2&gt;

&lt;p&gt;You don’t need to use git sub-modules to manage your cookbooks.  Librarian is a general purpose package manager for creating other packages managers similar to composer for PHP and bundler for Ruby.  Librarian comes with librarian-chef out of the box (although they say it will be separated out at some point) and that allows you to use a &lt;code&gt;Cheffile&lt;/code&gt; to manage your cookbook dependencies like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /my/chef/project
echo /cookbooks &amp;gt;&amp;gt; .gitignore
echo /tmp &amp;gt;&amp;gt; .gitignore
librarian-chef init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now have a Cheffile at the root of your project.  You can then add cookbooks as dependencies and manage them with the commands &lt;code&gt;librarian-chef install&lt;/code&gt; and &lt;code&gt;librarian-chef update&lt;/code&gt;.  Librarian chef will create a lockfile, so use update and install &lt;a href=&quot;http://adamcodes/2013/03/07/composer-install-vs-composer-update.html&quot;&gt;the same way as you would with composer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A basic Cheffile for one of my CentOS 6.4 Vagrant VMs looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#^syntax detection&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://community.opscode.com/api/v1&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;yum&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;build-essential&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;selinux&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iptables&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;openssh&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;openssl&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;php&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;xdebug&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:github&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;xforty/chef-xdebug&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;database&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is some redundancy built in here, as Librarian-chef will recursively resolve cookbook dependencies for you, which I think it does via &lt;code&gt;metadata.rb&lt;/code&gt; (but don’t quote me on that).&lt;/p&gt;

&lt;p&gt;The package names are the names of the packages as they appear on &lt;a href=&quot;http://community.opscode.com&quot;&gt;community.opscode.com&lt;/a&gt;, and you can include 3rd party cookbooks from github like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cookbook &#39;xdebug&#39;,
    :github =&amp;gt; &#39;xforty/chef-xdebug&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;xforty/chef-xdebug&lt;/code&gt; is &lt;code&gt;github-username/repo-name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With your Cheffile in the root of your project you can run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;librarian-chef install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which, much like &lt;code&gt;composer install&lt;/code&gt; in the PHP world, and &lt;code&gt;bundle install&lt;/code&gt; for Ruby, will go off to community.opscode.com and find the matching packages, and download them straight to the &lt;code&gt;./cookbooks&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Similarly, &lt;code&gt;librarian-chef update&lt;/code&gt; will update your cookbooks to the latest version and install any new ones you’ve added to your Cheffile.&lt;/p&gt;

&lt;p&gt;To lock a cookbook to a specific version, specify it after the comma, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cookbook &#39;yum&#39;, 0.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make sure whenever you run &lt;code&gt;librarian-chef install&lt;/code&gt; or &lt;code&gt;librarian-chef update&lt;/code&gt; you will always get the 0.1.1 version of the yum cookbook.&lt;/p&gt;

&lt;h2 id=&quot;read-next&quot;&gt;Read Next&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://adamcodes/2013/01/15/vagrant-is-easy-chef-is-hard.html&quot;&gt;Vagrant is easy - Chef is hard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/08/09/take-note-code-connexx-2013</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/08/09/take-note-code-connexx-2013.html"/>
    <title>Take Note: Code Connexx 2013</title>
    <published>2013-08-09T00:00:00+01:00</published>
    <updated>2013-08-09T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;No matter where you come from or what your background may be, you take notes.  There is no escaping them.  Whether you write them down, record them digitally, or just store them mentally (arguably not very reliable unless you have an eidetic memory), you are taking notes.&lt;/p&gt;

&lt;p&gt;As a developer taking notes is a soft skill that probably doesn’t even register on your radar, you would rather spend 3 days learning a new compiler than spend 15 minutes improving your note-taking, and that’s cool, but the pay-off for efficient notes can be huge, and an investment well worth your time.&lt;/p&gt;

&lt;p&gt;On the most simple level, efficient notes will allow you to confidently forget something you’ve learnt or must remember, safe in the knowledge that you will be able to find that information again in your notes at a moments notice, freeing up your brain for more pressing tasks, such as learning new compilers, or solving complex problems in your new app.&lt;/p&gt;

&lt;h2 id=&quot;types-of-notes&quot;&gt;Types of Notes&lt;/h2&gt;

&lt;p&gt;All forms of note-taking can be distilled down to three types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Information Retention&lt;/li&gt;
  &lt;li&gt;Progress Tracking&lt;/li&gt;
  &lt;li&gt;Idea Exploration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Information Retention is all about remembering things; Shopping lists, copying from text-books in school (in your own words of course), to do lists, minutes at a meeting.  These are all forms of Information Retention, as in, if you don’t write this down, you’re going to forget it.  There can be many different forms of outcome from Information Retention notes.  Sometimes you want to use them to track your progress (a to do list), other times you just want them as a record of who said what at a meeting (minutes).&lt;/p&gt;

&lt;p&gt;Progress Tracking is more about visualising a series of steps or actions.  To do lists, Diaries and Planners, and Gantt Charts are all forms of Progress Tracking notes.&lt;/p&gt;

&lt;p&gt;Finally, there is Idea Exploration.  This is where writing something down can help you visualise it and grasp it better.  This could be a sketch, a wireframe, or a mind-map.&lt;/p&gt;

&lt;p&gt;There is some considerable overlap between these three types of notes, for example, it could be argued that a shopping list could be both Progress Tracking (ticking items off as you purchase them) and Information Retention (if you don’t write items down you might forget them).  That’s okay.  A list can be either or both, depending on how you use it.&lt;/p&gt;

&lt;p&gt;Putting these note types to work for you as a developer, and ultimately helping you increase your productivity involves two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How you organise your notes&lt;/li&gt;
  &lt;li&gt;Learning and applying some basic techniques&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;organisation&quot;&gt;Organisation&lt;/h2&gt;

&lt;p&gt;An organisation system is the most vital of the two things you need for productive note-taking.  You can get by writing your notes down long form, but if you can’t find a specific piece of information when you need it, you may as well not have it.&lt;/p&gt;

&lt;p&gt;There are many organisation systems, the most popular of which is “Getting Things Done” (or GTD). GTD is &lt;em&gt;not&lt;/em&gt; a system I would recommend.  GTD has something called &lt;em&gt;Contexts&lt;/em&gt;, and you will find a large portion of the information on The Internet relating to GTD seems to be people coming up with systems for dealing with contexts and attempting to make them less complex (like using cards and clips or envelopes instead of notebooks, e.g. “The Hipster PDA”&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;

&lt;p&gt;The reason for contexts in GTD (and ultimately why people seem to use cards and envelopes instead of notebooks to manage them), is also the main reason you need an organisation system in the first place: &lt;strong&gt;Notes are liner in nature, but your thoughts are not&lt;/strong&gt;.  This means you could be writing out a to-do list, and then something pops into your head about another project, and you need to write it down immediately, but then it’s completely out of &lt;em&gt;context&lt;/em&gt; (in the non GTD sense) and not related to the original train of thought for the project.&lt;/p&gt;

&lt;p&gt;You can’t have tags or cross-references in paper-based notes, so how you organise your notes becomes just as important as the notes themselves.  Contexts (and by extension systems such as using cards, envelopes etc instead of a normal notebook) in GTD attempt to overcome this by grouping your notes logically and in a way that makes it “easy” to move the “pages” around.  This is one way to achieve the ultimate goal of organised notes, but is very complex, and my feeling is that you’ll spend more time running the &lt;em&gt;system&lt;/em&gt; than you gain by having the notes.&lt;/p&gt;

&lt;p&gt;GTD does have one important thing right, which is something that I think is the &lt;strong&gt;key&lt;/strong&gt; to improving your productivity through note-taking, and that is: &lt;strong&gt;Everything in your head gets written down&lt;/strong&gt;.  By writing down absolutely everything, and having an organisation system that you are 100% confident in (meaning you can find anything as soon as you need it), you free your mind to work on other, more important tasks (such as writing code).&lt;/p&gt;

&lt;p&gt;If you want to come up with your own method, I recommend starting with a table of contents and page numbers!  But if you’d like to hear about the system I’ve come up with, you can checkout my talk on the subject at &lt;a href=&quot;http://codeconnexx.com/talks/#taking-better-notes&quot;&gt;CodeConnexx 2013&lt;/a&gt;.  Otherwise, subscribe below and I’ll be sure to post the sides and write a post about it once the talk is over!&lt;/p&gt;

&lt;h2 id=&quot;read-next&quot;&gt;Read Next:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://codeconnexx.com/&quot;&gt;CodeConnexx 2013&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://www.43folders.com/2004/09/03/introducing-the-hipster-pda&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/07/19/how-to-create-git-plugin-part2</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/07/19/how-to-create-git-plugin-part2.html"/>
    <title>How to Create a Git Plugin (Part 2)</title>
    <published>2013-07-19T00:00:00+01:00</published>
    <updated>2013-07-19T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;This is part 2 of a 2 part series (&lt;a href=&quot;http://adamcodes/2013/07/12/how-to-create-git-plugin.html&quot;&gt;part 1 here&lt;/a&gt;) on creating git plugins.&lt;/p&gt;

&lt;p&gt;In the first part I explained how to create a basic plugin, and how to create a plugin runner that will allow you to group a bunch of commands together.&lt;/p&gt;

&lt;p&gt;We added two basic commands to that runner, in the same file.  In this part I’m going to show you how to create an external command that gets loaded on-the-fly, and then show you how to install and uninstall your plugin easily using gnumake&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&quot;some-requirements&quot;&gt;Some Requirements&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;http://adamcodes/2013/07/12/how-to-create-git-plugin.html&quot;&gt;part 1&lt;/a&gt; we decided that our hello sub-command should print &lt;code&gt;Hello World&lt;/code&gt; when we use the command with no options, and print out &lt;code&gt;Hello {name}&lt;/code&gt; if any further options are passed.&lt;/p&gt;

&lt;p&gt;Today I’m going to expand that a little and add a help subcommand to our subcommand that simply prints out our usage information for the subcommand, rather than the usage information for the whole plugin as we did in &lt;a href=&quot;http://adamcodes/2013/07/12/how-to-create-git-plugin.html&quot;&gt;part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;During part 1, we created our runner to work using convention over configuration&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, that is, it will automatically look for all subcommands in a file named &lt;code&gt;git-adamcodes-subcommand&lt;/code&gt; where &lt;code&gt;subcommand&lt;/code&gt; is the name of the command we’re running, and inside that file it expects a function named &lt;code&gt;cmd_subcommand&lt;/code&gt;, again where &lt;code&gt;subcommand&lt;/code&gt; is the name of the command we’re running.  We could of course hard code our subcommands to file and function names, but it’s far easier not to.&lt;/p&gt;

&lt;p&gt;Now to begin writing our subcommand, create a file at the same level as your &lt;code&gt;git-adamcodes&lt;/code&gt; file and name it &lt;code&gt;git-adamcodes-hello&lt;/code&gt;.  In that file, you’ll need the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env sh&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;usage&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;usage: git adamcodes hello [name]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;cmd_hello&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$#&amp;quot;&lt;/span&gt; -lt 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;&lt;span class=&quot;k&quot;&gt;        &lt;/span&gt;say_hello World; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$#&amp;quot;&lt;/span&gt; -eq 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;&lt;span class=&quot;k&quot;&gt;        if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;help&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;&lt;span class=&quot;k&quot;&gt;            &lt;/span&gt;usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;        &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;&lt;span class=&quot;k&quot;&gt;        &lt;/span&gt;say_hello &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-21&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-22&quot;&gt;say_hello&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-23&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello ${1}&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-24&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-25&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I’ll go over this quickly, as it’s fairly basic and it should be obvious what it does.  Line 1 is our hashbang, and lines 3-6 define our usage function, which is just echoing out some strings.  The empty echo is an easy way to create a newline.&lt;/p&gt;

&lt;p&gt;Line 8 is the function definition for our subcommand.  As we mentioned earlier, it’s in the format &lt;code&gt;cmd_subcommand&lt;/code&gt;, where in this instance, the subcommand is &lt;code&gt;hello&lt;/code&gt;.  This is the function that our runner from &lt;a href=&quot;http://adamcodes/2013/07/12/how-to-create-git-plugin.html&quot;&gt;part 1&lt;/a&gt; is going to call, and pass in our command line arguments to.&lt;/p&gt;

&lt;p&gt;The first line of our command, line 9, checks the number of arguments passed to the function, if it’s less than (&lt;code&gt;-lt&lt;/code&gt;) 1, we just want to say “Hello World”, and exit with a success status.&lt;/p&gt;

&lt;p&gt;On line 11, we have an else if, which in sh/bash is &lt;code&gt;elif&lt;/code&gt;, and that checks to see if the number of arguments is equal to 1.  If it is, we have a correct usage of our subcommand.&lt;/p&gt;

&lt;p&gt;At this point, we have to check to see if the first parameter of our subcommand was “help”, because this means someone wanted the usage information, and I’m pretty sure they didn’t mean to say “Hello help”, which is just silly.&lt;/p&gt;

&lt;p&gt;If the first parameter was “help”, we print our usage information and exit with a success status again.  If it wasn’t help, that means that the user wanted us to say hello to them, so we call our &lt;code&gt;say_hello&lt;/code&gt; function again, and pass in the first parameter.  Again, we end a successful execution with &lt;code&gt;exit 0&lt;/code&gt; to indicate to git and/or the shell that this action was successful.&lt;/p&gt;

&lt;p&gt;Finally, in all other instances (i.e. greater than 1 parameter), we want to print the usage information, as it looks like the user was using our subcommand incorrectly.&lt;/p&gt;

&lt;p&gt;The last part of our subcommand (lines 22-25) is a helper function.  This is unique to our subcommand, and won’t be shared by our other subcommands.  All this function does is take the first argument passed to it and echo it out after the word hello.  This is convenient for us as we can call &lt;code&gt;say_hello World&lt;/code&gt; and &lt;code&gt;say_hello $1&lt;/code&gt; on lines 10 and 16 respectively.  Code re-use is good, and all that stuff.&lt;/p&gt;

&lt;h2 id=&quot;pulling-it-together&quot;&gt;Pulling it Together&lt;/h2&gt;

&lt;p&gt;Now our plugin is complete, we need to put both files in &lt;code&gt;/usr/bin&lt;/code&gt; or somewhere similar on your path.  Then you need to make the wrapper/runner file executable; the subcommands don’t need to be executable.&lt;/p&gt;

&lt;p&gt;After you’ve copied the files, run &lt;code&gt;sudo chmod +x /usr/bin/git-adamcodes&lt;/code&gt; to make the runner executable.&lt;/p&gt;

&lt;p&gt;You should then be able to drop in to a shell anywhere you have git available, and give it a try:&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/9319659531/&quot;&gt;&lt;img src=&quot;http://farm6.static.flickr.com/5520/9319659531_4a8f189098.jpg&quot; title=&quot;Git Plugin&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&quot;easy-install--uninstall-with-make&quot;&gt;Easy Install + Uninstall With Make&lt;/h2&gt;

&lt;p&gt;Make is basically a build system like Phing or ApacheAnt, but it works with bash/shell, so it’s great for simply installing and uninstalling scripts, or in our case, git plugins.&lt;/p&gt;

&lt;p&gt;Make starts with a bunch of build-targets (or functions) that are defined like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;make&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;  dothis
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;  thenthis
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;  dothis
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;  andthenthis
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;&lt;span class=&quot;nf&quot;&gt;uninstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;  ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each target is on it’s own line, and it’s the target named follow by a colon.  &lt;code&gt;all:&lt;/code&gt; is a the target that is run when you don’t specify another target, so it’s a good place to either build your whole app, or in our case, show a help message.&lt;/p&gt;

&lt;p&gt;Each line below the target is a command to run.  Whitespace is important here, each line indented by a tab character tells make that’s a shell command it should run.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;make&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;nv&quot;&gt;DIRECTORY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/local/bin
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make also has the concept of variables, but unlike shell or bash, whitespace is not important here, you can have as many spaces you like either side of the equals sign.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;make&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;nv&quot;&gt;BIN_DIR&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/local/bin
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;nv&quot;&gt;LOADER&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; git-adamcodes
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;nv&quot;&gt;COMMANDS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; git-adamcodes-hello
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;nv&quot;&gt;COMMNADS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; git-adamcodes-anothercommand
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    @echo &lt;span class=&quot;s2&quot;&gt;&amp;quot;usage: make [install|uninstall]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;    install -d -m 0755 &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;BIN_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;    install -m 0755 &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LOADER&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;BIN_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;    install -m 0644 &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;COMMANDS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;BIN_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;&lt;span class=&quot;nf&quot;&gt;uninstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; -d &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;BIN_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;BIN_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;    rm -f &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LOADER&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;COMMANDS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, this is our complete makefile for our plugin.  It should live in the same directory as our plugin files, and it should be named &lt;code&gt;Makefile&lt;/code&gt; (capitalisation is important).&lt;/p&gt;

&lt;p&gt;Our first 3 lines define some variables for us to use in the makefile.  Specifically, the directory to install the files, the loader we want to make executable, and the script files we just want to copy.&lt;/p&gt;

&lt;p&gt;Line 4 is a bit different, it just adds to the &lt;code&gt;COMMANDS&lt;/code&gt; variable, like the &lt;code&gt;.=&lt;/code&gt; operator in PHP.&lt;/p&gt;

&lt;p&gt;Finally, we get on to our build targets.  As mentioned above, our default build target, &lt;code&gt;all:&lt;/code&gt; just prints out some usage information.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;install:&lt;/code&gt; target runs a few bash commands.  It uses the &lt;code&gt;install&lt;/code&gt; command to first ensure our install directory is created and has the correct permissions (&lt;code&gt;-d&lt;/code&gt; and &lt;code&gt;-m&lt;/code&gt; flags respectively), and then uses the install command to copy our loader to our install directory with executable permissions (755), and our subcommand files with just regular permissions.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;uninstall:&lt;/code&gt; command does something similar in that it just runs a bunch of shell commands again.  It first tests to make sure our install directory exists, it then changes into that directory and uses &lt;code&gt;rm&lt;/code&gt; to remove the files.  Fairly simple.&lt;/p&gt;

&lt;p&gt;We use the backslash operator to tell uninstall this is a single command run over several lines, so that they are executed together rather than one at a time (and will exit without running the rest if any of them fail).&lt;/p&gt;

&lt;p&gt;Once this file is in place you can simply run &lt;code&gt;make install&lt;/code&gt; and &lt;code&gt;make uninstall&lt;/code&gt; from the same directory as your makefile to copy or delete the plugin to the right place with the right permissions.  This is super useful if you intend to distribute your plugin!&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In these two posts we’ve learnt that creating a git plugin is as simple as writing an executable script and naming it in the format &lt;code&gt;git-pluginname&lt;/code&gt;, and then putting it somewhere accessible.&lt;/p&gt;

&lt;p&gt;We’ve also looked at some more advanced techniques to get you building more complex plugins with multiple subcommands and arguments, and finally how to use gnumake to make installing and uninstalling your plugin really easy for anyone you care to distribute it to.&lt;/p&gt;

&lt;p&gt;If you want more content like this, and access to a couple of my own git-plugins I’m going to be open sourcing soon, subscribe to my feed on the right or the mailing list below!&lt;/p&gt;

&lt;h2 id=&quot;read-next&quot;&gt; Read Next&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://adamcodes/2012/08/03/git-cleanly-move-between-branches.html&quot;&gt;Git - A clean branch switching strategy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://www.gnu.org/software/make/&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://en.wikipedia.org/wiki/Convention_over_configuration&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/07/12/how-to-create-git-plugin</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/07/12/how-to-create-git-plugin.html"/>
    <title>How to Create a Git Plugin</title>
    <published>2013-07-12T00:00:00+01:00</published>
    <updated>2013-07-12T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
      <summary type="html">
        &lt;p&gt;I think most Git users know by now how to create an alias in Git to make a function or command more accessible.  What I think fewer people know, or at least don’t take advantage of, is that you can actually create extensions or plugins to Git to make it do basically anything you want.&lt;/p&gt;

&lt;p&gt;What I think even fewer people realise is actually how amazingly easy it is to create one of these extensions.&lt;/p&gt;


        &lt;p&gt;&lt;a href=&quot;http://adamcod.es/2013/07/12/how-to-create-git-plugin.html&quot;&gt;Continue Reading...&lt;/a&gt;&lt;/p&gt;
      </summary>
    
    <content type="html">&lt;p&gt;I think most Git users know by now how to create an alias in Git to make a function or command more accessible.  What I think fewer people know, or at least don’t take advantage of, is that you can actually create extensions or plugins to Git to make it do basically anything you want.&lt;/p&gt;

&lt;p&gt;What I think even fewer people realise is actually how amazingly easy it is to create one of these extensions.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;what-you-need-to-know-the-essentials&quot;&gt;What You Need to Know (The Essentials)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create a shell or bash script that does what you want to do&lt;/li&gt;
  &lt;li&gt;Name your shell script git-&lt;em&gt;name&lt;/em&gt; where &lt;em&gt;name&lt;/em&gt; is the command you want to run after typing &lt;code&gt;git&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Put your script in &lt;code&gt;/usr/local/bin&lt;/code&gt; or somewhere similar in your &lt;code&gt;$PATH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run your script using &lt;code&gt;git name&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using this method you can make Git do anything you want.  However, what you might want to consider is grouping a bunch of similar scripts together into a module of sorts, much like the Git flow plugin&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.  This would allow you to run your command namespaced, so you could have (for example): &lt;code&gt;git yourname subcommand&lt;/code&gt; or &lt;code&gt;git mycompany deploy&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;more-advanced-usage&quot;&gt;More Advanced Usage&lt;/h2&gt;

&lt;p&gt;Here’s the basic concept:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a “wrapper” or access point for your plugin&lt;/li&gt;
  &lt;li&gt;Create a file/script for each sub-command you want to run&lt;/li&gt;
  &lt;li&gt;Use your wrapper to load and run your sub-command scripts&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;defining-some-requirements&quot;&gt;Defining Some Requirements&lt;/h3&gt;

&lt;p&gt;For the sake of simplicity, I’m going to call our namespace “adamcodes” and our plugin is going to do three things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Report its version with the &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--version&lt;/code&gt; flags&lt;/li&gt;
  &lt;li&gt;Display usage information if the subcommand is missing, or the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; flags are used&lt;/li&gt;
  &lt;li&gt;Print &lt;code&gt;Hello {name}|World&lt;/code&gt; when we use the &lt;code&gt;hello&lt;/code&gt; subcommand, printing out &lt;code&gt;Hello {name}&lt;/code&gt; if any further options are passed, or &lt;code&gt;Hello World&lt;/code&gt; if not.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;First, let’s create a directory to work in: &lt;code&gt;mkdir -p ~/src/adamcodes-git-plugin &amp;amp;&amp;amp; cd ~/src/adamcodes-git-plugin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we need to create our wrapper file.  This is the file that will run all of our commands, it will actually be the only executable file in our plugin.&lt;/p&gt;

&lt;p&gt;This file needs to be named in the following format, this is essential or Git won’t be able to find it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch git-adamcodes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That’s it.  It has to start with &lt;code&gt;git-&lt;/code&gt; and then the bit that follows is the command you’ll use to run it.&lt;/p&gt;

&lt;p&gt;Now let’s edit that file and add some stuff.  The first line of every executable script is the hashbang or shebang.  This is so the operating system knows what to use to run your script.&lt;/p&gt;

&lt;p&gt;You could use PHP, Ruby, Python or whatever here and Git should just run it as normal.  I haven’t tested that though, so I’m going to stick to using bash.&lt;/p&gt;

&lt;h3 id=&quot;main-script-wrapperrunner&quot;&gt;Main Script (Wrapper/Runner)&lt;/h3&gt;

&lt;p&gt;A hashbang looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now most people will have a compatible shell available in that location, but we can make it a bit more portable by checking the users’ ENV for the location of their shell, just in-case:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env sh&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we need a couple of help functions.  These should be fairly self explanatory, they just print words to the screen.  The first is going to print out our version number:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;version&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;adamcodes git plugin v0.1.0&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the next is going to print our usage information:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;usage&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;usage: git adamcodes &amp;lt;subcommand&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;nb&quot;&gt;    echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Available subcommands are:&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello &amp;lt;name&amp;gt;  Print out Hello World or Hello &amp;lt;name&amp;gt; (if provided)&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we get into the main part.  Tradition dictates that the main execution of a bash script takes place in the &lt;code&gt;main&lt;/code&gt; function, so that’s what we’ll call ours, too:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$#&amp;quot;&lt;/span&gt; -lt 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;k&quot;&gt;        &lt;/span&gt;usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subcommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;&lt;span class=&quot;nb&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$subcommand&lt;/span&gt; in
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;-h&amp;quot;&lt;/span&gt;|&lt;span class=&quot;s2&quot;&gt;&amp;quot;--help&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;            usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;            ;;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;-v&amp;quot;&lt;/span&gt;|&lt;span class=&quot;s2&quot;&gt;&amp;quot;--version&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;            version; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;            ;;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKINGDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(echo &amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; | sed -e &amp;#39;s,\\,/,g&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;$WORKINGDIR/git-adamcodes-$subcommand&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;&lt;span class=&quot;k&quot;&gt;        &lt;/span&gt;usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-21&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-22&quot;&gt;&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$WORKINGDIR/git-adamcodes-$subcommand&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-23&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-24&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cmd_$subcommand&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-25&quot;&gt;&lt;span class=&quot;k&quot;&gt;        &lt;/span&gt;usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/span&gt;&lt;span id=&quot;True-26&quot;&gt;    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-27&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-28&quot;&gt;&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;cmd_&lt;span class=&quot;nv&quot;&gt;$subcommand&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-29&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, if you’re not used to shell scripting this will probably look a bit scary.  Let’s break it down piece-by-piece.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$#&amp;quot;&lt;/span&gt; -lt 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This first line is fairly simple.  When you pass an argument to a shell script it gets passed in in numbered variables $0 to $N.  Each space is treated as a new variable, with $0 containing the name of the script you ran.  &lt;code&gt;if [ &quot;$#&quot; -lt 1 ]&lt;/code&gt; is basically saying “if the number of options is less than one”.&lt;/p&gt;

&lt;p&gt;As we’re always expecting a subcommand, we can assume if the number of options is less than 1 we have an error, and should display our usage information.  That’s what the next line does &lt;code&gt;usage&lt;/code&gt; simply runs the &lt;code&gt;usage&lt;/code&gt; function we defined above.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exit 1&lt;/code&gt; is all about reporting back to Git (and the shell) whether a command ran successfully or not.  &lt;code&gt;exit&lt;/code&gt; will kill the execution of a script, just like in PHP, and a successful exit means exiting with &lt;code&gt;0&lt;/code&gt;.  An exit in the range &lt;code&gt;1-255&lt;/code&gt; is considered an error and can be used to map to error messages if you have a manual or whatever.  We don’t, so we’ll just exit with 1 to let the shell know it didn’t run successfully, as we expected more parameters.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subcommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next line does two things again.  You can do more than one thing per line in bash by separating with a semi-colon.  If you put them one per line you don’t need the semi-colon.  First, we define a local variable called &lt;code&gt;subcommand&lt;/code&gt;, hence, the &lt;code&gt;local&lt;/code&gt;, and then we’re assigning the first parameter passed to our script into that variable.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;shift&lt;/code&gt; function moves the numbers for passed variables along the number of spaces passed to it.  That is to say, if we called our script like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./script.sh hello world this is a test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We would end up with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$0: ./script.sh
$1: hello
$2: world
$3: this
$4: is
$5: a
$6: test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we called &lt;code&gt;shift&lt;/code&gt; without any number afterwards, it will just move things along one space, so in our example this would leave us with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$0: ./script.sh
$1: world
$2: this
$3: is
$4: a
$5: test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we then called &lt;code&gt;shift&lt;/code&gt; but this time passed in the number 2, like so: &lt;code&gt;shift 2&lt;/code&gt; we should end up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$0: ./script.sh
$1: this
$2: is
$3: a
$4: test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll notice the script name always remains in &lt;code&gt;$0&lt;/code&gt;, this is important for later.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$subcommand&lt;/span&gt; in
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;-h&amp;quot;&lt;/span&gt;|&lt;span class=&quot;s2&quot;&gt;&amp;quot;--help&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;        usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;        ;;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;-v&amp;quot;&lt;/span&gt;|&lt;span class=&quot;s2&quot;&gt;&amp;quot;--version&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;        version; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;        ;;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next we use a standard case statement to check whether the subcommand we just set is equal to &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--version&lt;/code&gt;.  As per our spec above, each of these should run a specific function.  If we find a match we simply run the correct function and exit with 0, which means that we ran successfully.  the &lt;code&gt;;;&lt;/code&gt; below each set of commands is the equivalent of &lt;code&gt;break&lt;/code&gt; in PHP and tells the shell to not continue checking the rest of the case statement.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;workingdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(echo &amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; | sed -e &amp;#39;s,\\,/,g&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This next snippet gets our working directory.  We need this so we know where to look for our sub-command files, as they should be in the same directory as the script we’re running.&lt;/p&gt;

&lt;p&gt;To do this, we use a couple of bash tricks.  First, we create a local variable as we did before.  We then use &lt;code&gt;$(...)&lt;/code&gt;, which allows you to execute a command and capture the result into the variable.&lt;/p&gt;

&lt;p&gt;The bash function we’re calling is dirname, which like the PHP equivalent takes the name of a file and provides you with the directory name.&lt;/p&gt;

&lt;p&gt;As we mentioned earlier, when you run a bash script the script name gets passed into the script in the variable &lt;code&gt;$0&lt;/code&gt;, so running &lt;code&gt;$(dirname $0)&lt;/code&gt; should give us what we’re after, however, that’s not so great for our windows users (e.g. cygwin), as the path separator will be the wrong way around.  Therefore, we nest another &lt;code&gt;$(...)&lt;/code&gt; call where we echo out the value of &lt;code&gt;$0&lt;/code&gt;, pipe the output into the &lt;code&gt;sed&lt;/code&gt; command, and replace all backslashes with forward slashes.  We then take the output of that (captured by the nested &lt;code&gt;$(...)&lt;/code&gt;) and pass it back into dirname, and then assign the captured output of that to the &lt;code&gt;workingdir&lt;/code&gt; variable.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;$WORKINGDIR/git-adamcodes-$subcommand&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we’re simply checking to see if the file for the subcommand exists.  We’re expecting the files to be in the same directory as our current file, and to be named in the format &lt;code&gt;git-namespace-subcommand&lt;/code&gt;.  If we don’t find it, we need to print out our usage info and exit with an error status.  If we do, we can simply carry on.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$WORKINGDIR/git-adamcodes-$subcommand&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;source&lt;/code&gt; is a built-in command that will run a file inside the current shell.  That means it will load all functions and variables from that file and they will be available throughout the shell.  Anything that this script executes will also execute, it’s exactly the same as running the file yourself.&lt;/p&gt;

&lt;p&gt;This means we can put our sub-commands in their own files, with their own variables, but not run them, just make them accessible when we need them.  Think of this like a PHP &lt;code&gt;include&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cmd_$subcommand&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we’ve loaded the file, we should have the sub-command function available to execute, so we test to make sure it exists.  If it doesn’t there’s obviously something wrong, so do our standard “print usage information and error exit status” step.  This actually produces some output we have to do something about, so we do some bash trickery and redirect it into &lt;code&gt;/dev/null&lt;/code&gt;, which is basically a black hole for anything you don’t want.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;cmd_&lt;span class=&quot;nv&quot;&gt;$subcommand&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally we get down to it.  This step runs our sub-command and passes in our &lt;code&gt;$0...$n&lt;/code&gt; variables as function parameters.  We expect our sub-command’s main function to be called &lt;code&gt;cmd_subcommand&lt;/code&gt; where &lt;em&gt;subcommand&lt;/em&gt; is the name of the sub-command you want to type to run it.  If we also called them &lt;code&gt;main&lt;/code&gt; we’d end up with a conflict with our existing main function.&lt;/p&gt;

&lt;p&gt;The reason we used &lt;code&gt;shift&lt;/code&gt; earlier is so that we can write our sub-commands without any knowledge of this wrapper, as far as they’re concerned the variables that get passed in are the same as if they were called directly (without the sub-command name in &lt;code&gt;$1&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now we’ve built up our &lt;code&gt;main&lt;/code&gt; function it won’t run on its own, we need to actually call it and pass in our &lt;code&gt;$0...$n&lt;/code&gt; variables.  To do that, we just do the same as above, but call main instead:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;main &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;pulling-it-all-together&quot;&gt;Pulling it all Together&lt;/h4&gt;

&lt;p&gt;Finally, bringing it all together our plugin’s main file should look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env sh&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;usage&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;usage: git adamcodes &amp;lt;subcommand&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;&lt;span class=&quot;nb&quot;&gt;    echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Available subcommands are:&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello &amp;lt;name&amp;gt;  Print out Hello World or Hello &amp;lt;name&amp;gt; (if provided)&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;version&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;adamcodes git plugin v0.1.0&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$#&amp;quot;&lt;/span&gt; -lt 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;&lt;span class=&quot;k&quot;&gt;        &lt;/span&gt;usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subcommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-21&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-22&quot;&gt;&lt;span class=&quot;nb&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$subcommand&lt;/span&gt; in
&lt;/span&gt;&lt;span id=&quot;True-23&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;-h&amp;quot;&lt;/span&gt;|&lt;span class=&quot;s2&quot;&gt;&amp;quot;--help&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-24&quot;&gt;            usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/span&gt;&lt;span id=&quot;True-25&quot;&gt;            ;;
&lt;/span&gt;&lt;span id=&quot;True-26&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;-v&amp;quot;&lt;/span&gt;|&lt;span class=&quot;s2&quot;&gt;&amp;quot;--version&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-27&quot;&gt;            version; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/span&gt;&lt;span id=&quot;True-28&quot;&gt;            ;;
&lt;/span&gt;&lt;span id=&quot;True-29&quot;&gt;    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-30&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-31&quot;&gt;&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;workingdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(echo &amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; | sed -e &amp;#39;s,\\,/,g&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-32&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;$workingdir/git-adamcodes-$subcommand&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-33&quot;&gt;&lt;span class=&quot;k&quot;&gt;        &lt;/span&gt;usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/span&gt;&lt;span id=&quot;True-34&quot;&gt;    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-35&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-36&quot;&gt;&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$workingdir/git-adamcodes-$subcommand&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-37&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-38&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cmd_$subcommand&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-39&quot;&gt;&lt;span class=&quot;k&quot;&gt;        &lt;/span&gt;usage; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/span&gt;&lt;span id=&quot;True-40&quot;&gt;    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-41&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-42&quot;&gt;&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;cmd_&lt;span class=&quot;nv&quot;&gt;$subcommand&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-43&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-44&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-45&quot;&gt;main &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In &lt;a href=&quot;http://adamcodes/2013/07/19/how-to-create-git-plugin-part2.html&quot;&gt;part 2&lt;/a&gt; I go on to create our hello sub-command, and show you how to write a makefile and use make so installing and removing your add-on becomes really simple.  Make sure you subscribe to my feed so you don’t miss it!&lt;/p&gt;

&lt;h2 id=&quot;read-next&quot;&gt; Read Next&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://adamcodes/2013/07/19/how-to-create-git-plugin-part2.html&quot;&gt;How to Create a Git Plugin (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;https://github.com/nvie/gitflow&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/07/02/you-cant-trust-the-cloud</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/07/02/you-cant-trust-the-cloud.html"/>
    <title>You Can't Trust "The Cloud"</title>
    <published>2013-07-02T00:00:00+01:00</published>
    <updated>2013-07-02T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;Yesterday marked the final day of Google Reader&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.  I was an avid Google Reader user for many, many years (too many to remember), but I was unaffected by the recent shutdown, because I stopped using it about 6 months ago, about 3 months before Google announced they were shutting it down.&lt;/p&gt;

&lt;p&gt;At the start of last month, The Guardian broke the news that the NSA and GCHQ had been spying on us all&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, but I was unaffected because I stopped using Facebook, Gmail, and a host of other services years ago.&lt;/p&gt;

&lt;p&gt;I don’t keep anything I don’t want other people to see in the cloud, and never have.&lt;/p&gt;

&lt;p&gt;The vast majority of people I see switching to new feed readers on twitter are switching to different hosted solutions.  Very very few are switching to self-hosted options like feedafever&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, the reader I switched to at the end of last year.&lt;/p&gt;

&lt;p&gt;That means they’re just as locked in as they were with Google Reader, but these new companies may not be as gracious if or when they decide to shut the service down.  Imagine if Google &lt;em&gt;hadn’t&lt;/em&gt; given you 3 months notice and had just shut Reader down.&lt;/p&gt;

&lt;p&gt;What does this have to do with coding?  Isn’t this a coding blog?  Well, yes.  3 years ago when I co-founded my company, &lt;a href=&quot;http://voreti.com&quot;&gt;Voreti Ltd&lt;/a&gt; we faced a choice.  We planned to build web-based software, that much we knew, but we had a choice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SaaS?&lt;/li&gt;
  &lt;li&gt;Self Hosted?&lt;/li&gt;
  &lt;li&gt;Vertical Market?&lt;/li&gt;
  &lt;li&gt;Black Box?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For most start-ups, this is a no-brainer.  The lure of recurring income, the vendor lock-in, and a whole host of other awesome reasons mean they don’t even think about this, and just run straight to SaaS.&lt;/p&gt;

&lt;p&gt;At the time we were considering the pros and cons of each, we’d just had the all the PSN issues.  The downtime, hacks, leaks, and weeks of not knowing anything and Sony keeping quiet.  Dan (my business partner) and I, had one of our long philosophical tech conversations where we were discussing the cyclical nature of I.T.  Specifically, how companies have been outsourcing and then bringing things back in-house (desktop vs server, centralised vs de-centralised, it’s all the same thing) on a cycle for a long, long time, and that “The Cloud” was just a slightly more persistent outsourcing cycle.&lt;/p&gt;

&lt;p&gt;Our conclusion was that eventually, maybe not that year, the year after, or even in the next 5 years, but &lt;em&gt;eventually&lt;/em&gt; something would happen - large outages - massive hacks - data leaks - lost data - &lt;em&gt;something&lt;/em&gt; - and that companies would once again lose faith in outsourcing and bring their data and services back in house, where they could control them.&lt;/p&gt;

&lt;p&gt;It was this conversation that lead us to go down the black-box route.  Ultimately, being in control of your own software and data is something that is very easy to sell to companies, and anyone that doesn’t understand that isn’t a company that we want to work with anyway.&lt;/p&gt;

&lt;p&gt;Next time you’re building a product, stop and think.  Is SaaS the best thing for your customers?  How does it solve &lt;em&gt;their&lt;/em&gt; problem rather than yours?  And How easy is it going to be to sell “The Cloud” to them after the next big data-breach or high profile shutdown?&lt;/p&gt;

&lt;p&gt;Lately, rather than working on new black-box software for companies, I’ve been working on a couple of self-hosted products for developers and web-site owners, specifically, the one which will be released soon is a self-hosted feedburner replacement, because let’s face it, how long before Google cans that too?  If that sounds like something you’d like to beta test or get early (free) access to before I release and charge for it, sign up to my mailing list below.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://googleblog.blogspot.com.au/2013/03/a-second-spring-of-cleaning.html&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://www.guardian.co.uk/world/prism&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;http://feedafever.com&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/06/04/deploy-a-basic-lamp-stack-digital-ocean-chef-solo</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/06/04/deploy-a-basic-lamp-stack-digital-ocean-chef-solo.html"/>
    <title>Deploy a basic lamp stack to Digital Ocean with Chef Solo</title>
    <published>2013-06-04T00:00:00+01:00</published>
    <updated>2013-06-04T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;I wrote previously that Chef is hard&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.  That was not too long after I started using Vagrant and Chef on a regular basis.  I plan to write an update on that post in the future because I’ve learnt quite a bit about using Chef since then, and there have been a few significant updates to Vagrant too.&lt;/p&gt;

&lt;p&gt;In the meantime, this is a very quick start guide to deploying a LAMP stack to a VPS.  My provider of choice is &lt;a href=&quot;https://www.digitalocean.com/?refcode=dd312899e4e9&quot;&gt;Digital Ocean&lt;/a&gt;, but the same process should work for pretty much any VPS or physical server.&lt;/p&gt;

&lt;h2 id=&quot;what-is-chef&quot;&gt;What is Chef&lt;/h2&gt;

&lt;p&gt;Chef is a provisioning tool.  A provisioning tool is something which can script the deployment or set-up of a server, attempting to solve the snowflake&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; issue by providing a consistent and reliable process that can be automated and therefore replicated many times.&lt;/p&gt;

&lt;p&gt;There are many different provisioning tools out there, the most popular of which are Chef and Puppet.  Chef uses Ruby, Puppet uses a DSL (Domain Specific Language), there are others that use simple bash too, but today we’re going to focus on Chef.&lt;/p&gt;

&lt;h2 id=&quot;quick-chef-primer&quot;&gt;Quick Chef Primer&lt;/h2&gt;

&lt;p&gt;Chef comes in two versions, Server and Solo.  Server requires a Chef Server which will manage your other multiple servers for you.  Chef Solo does not require another server, but has the drawback that it can only manage servers manually or one-at a time.&lt;/p&gt;

&lt;p&gt;Chef has the concept of &lt;em&gt;recipes&lt;/em&gt; and &lt;em&gt;cookbooks&lt;/em&gt;.  Think of a recipe as a single script which does something on your server.  A cookbook is a collection of recipes related to a particular topic, for example installing and configuring apache.  A cookbook is just a directory containing a bunch of folders and files, recipes live in a folder called “recipes” inside the cookbook.  Each recipe is saved as “recipe-name.rb” and is a simple Ruby script.&lt;/p&gt;

&lt;p&gt;A cookbook can also have nodes, roles, and data-bags.  We’ll get onto all of that in another blog post.&lt;/p&gt;

&lt;p&gt;Chef has a command-line tool called knife which helps manage your cookbooks and servers for you.  Out of the box, knife only works with Chef Server, but there is an add-on which allows it to work with Chef Solo.  That’s what we’re going to be using today.&lt;/p&gt;

&lt;h2 id=&quot;step-1---a-new-vps&quot;&gt;Step 1 - A New VPS&lt;/h2&gt;

&lt;p&gt;The first thing we need to do is create a new VPS instance.  If you don’t already have one, sign up for an account on &lt;a href=&quot;https://www.digitalocean.com/?refcode=dd312899e4e9&quot;&gt;Digital Ocean&lt;/a&gt;.  They’ll have you up and running in 55 seconds.  No joke.&lt;/p&gt;

&lt;p&gt;Once you’re signed in, click “SSH Keys” on the left-hand menu, then click “Add SSH Key”.  If you don’t have an SSH Key, we’ll need to create one.&lt;/p&gt;

&lt;p&gt;Open up a terminal and type &lt;code&gt;ssh-keygen&lt;/code&gt;.  Press &lt;code&gt;return&lt;/code&gt; to select the default location, then enter a passphrase.  You’ll need to remember this passphrase, as you’ll need to use it every time you want to access your VPS.&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8935261856/&quot;&gt;&lt;img src=&quot;http://farm9.static.flickr.com/8256/8935261856_9d94a7b93f.jpg&quot; title=&quot;new-ssh-key&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Now browse to &lt;code&gt;~/.ssh&lt;/code&gt; and open &lt;code&gt;id_rsa.pub&lt;/code&gt; in your favourite text editor.  Copy everything you see there to your clipboard, and paste it into the “Public SSH Key” field in the &lt;a href=&quot;https://www.digitalocean.com/?refcode=dd312899e4e9&quot;&gt;Digital Ocean&lt;/a&gt; control panel.&lt;/p&gt;

&lt;p&gt;Now give your key a name, it doesn’t matter what it is, it’s just for your reference in-case you have a few SSH Keys for different uses.  Click “Create SSH Key” and you’re all done.&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8935274328/&quot;&gt;&lt;img src=&quot;http://farm8.static.flickr.com/7330/8935274328_7a9500b65e.jpg&quot; title=&quot;digitalocean-new-key&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Next, click the big green ‘Create’ button to create a new ‘Droplet’ (the name &lt;a href=&quot;https://www.digitalocean.com/?refcode=dd312899e4e9&quot;&gt;Digital Ocean&lt;/a&gt; give to a VPS instance).&lt;/p&gt;

&lt;p&gt;Enter a host name for your new Droplet at the top, and select a size.  The smallest will do for this demo, but feel free to select a larger one, &lt;a href=&quot;https://www.digitalocean.com/?refcode=dd312899e4e9&quot;&gt;Digital Ocean&lt;/a&gt; charge by the hour, not the month.&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8935205666/&quot;&gt;&lt;img src=&quot;http://farm8.static.flickr.com/7421/8935205666_07e12bc9b7.jpg&quot; title=&quot;digitalocean-new-droplet-1&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Now select a region and a distribution.  Choose whatever region is closest to you, I’ve heard the UK should be coming in 2013, but I’ll select Amsterdam until then.&lt;/p&gt;

&lt;p&gt;You can also use whatever distribution you want with Chef, most cookbooks are agnostic, but for this demo we’ll be using “Ubuntu 12.10 x64 Server” as that’s the current LTS release.&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8935308328/&quot;&gt;&lt;img src=&quot;http://farm9.static.flickr.com/8413/8935308328_2551e61679.jpg&quot; title=&quot;digitalocean-region-distro&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Finally, select the SSH Key that you added earlier, leave VirtIO enabled and click “Create Droplet”&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8935320904/&quot;&gt;&lt;img src=&quot;http://farm8.static.flickr.com/7407/8935320904_3ff7896014.jpg&quot; title=&quot;digitalocean-sshkey&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Now wait whilst &lt;a href=&quot;https://www.digitalocean.com/?refcode=dd312899e4e9&quot;&gt;Digital Ocean&lt;/a&gt; creates your new droplet, it should take under 55 seconds; seriously.  Whilst writing this blog post it took around 20 seconds.  When it’s done it will drop you into the control panel for that Droplet, and will give you an IP Address at the top.  We need that IP Address, so save it somewhere.&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8935403056/&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3753/8935403056_1aed779006.jpg&quot; title=&quot;digitalocean-droplet&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-2---dependencies&quot;&gt;Step 2 - Dependencies&lt;/h2&gt;

&lt;p&gt;To get Chef working properly on your local machine you need a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;knife/knife-solo&lt;/li&gt;
  &lt;li&gt;librarian-chef&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can install Ruby from the website&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, or your package manager of choice.  &lt;strong&gt;Make sure you use Ruby 1.9.x and not Ruby 2.x as you will get errors with the json 1.6.1 Gem on 2.x&lt;/strong&gt;.  I use &lt;code&gt;rbenv&lt;/code&gt; to help me keep several different Rubies on the one machine.  Once you have Ruby installed, install the two required Gems:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install knife-solo --no-ri --no-rdoc
gem install librarian-chef --no-ri --no-rdoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will notice that even though Chef is just a Ruby Gem itself, we haven’t included it in our dependencies, and that’s because Chef runs on our server, not on our local machine, so we don’t explicitly need it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You won’t be able to use bundler to manage these dependencies as knife-solo and librarian-chef have a dependency conflict which cannot currently be resolved, but they will happily live side-by-side if installed manually.&lt;/p&gt;

&lt;p&gt;You’ll also notice that we have specified knife-solo, even though knife-solo requires knife (which incidentally comes with Chef).  This is because Ruby Gems will make sure all of the required Gems are installed on your system for you.  As you should see, there are quite a few dependencies, so this saves us a fair bit of time.&lt;/p&gt;

&lt;p&gt;You can now test your new setup by running &lt;code&gt;knife solo&lt;/code&gt; and you should get output like:&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8936842096/&quot;&gt;&lt;img src=&quot;http://farm9.static.flickr.com/8541/8936842096_9942818ed2.jpg&quot; title=&quot;digitalocean-knife-solo&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;And running &lt;code&gt;librarian-chef&lt;/code&gt; which should produce output like:&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8936219737/&quot;&gt;&lt;img src=&quot;http://farm8.static.flickr.com/7424/8936219737_845fd0b5e3.jpg&quot; title=&quot;digitalocean-librarian-chef&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3---opscode-cookbooks&quot;&gt;Step 3 - Opscode Cookbooks&lt;/h2&gt;

&lt;p&gt;Much like Ruby Gems and Bundler, or Packagist and Composer for PHP, Opscode (the people behind Chef) maintain a list of pre-built cookbooks that they or the community have created&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.  Librarian-chef that we installed in the previous section can be used to download and install these cookbooks and their dependencies for us automatically.  This is by far the easiest way to maintain your cookbooks.&lt;/p&gt;

&lt;p&gt;First, open a terminal and create a directory where you’d like to store your project, then change directory into it and create a new chef project using knife:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/Projects
mkdir chef-demo
cd chef-demo
knife solo init .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last &lt;code&gt;.&lt;/code&gt; is important.  It tells knife-solo that we want to create the project in the current directory.  Knife will warn you about a missing configuration file.  Ignore this, as it relates to Chef Server which we won’t be using.  Knife will keep reminding you about this file, and you can safely keep ignoring it.&lt;/p&gt;

&lt;p&gt;Now we have a basic Chef project it’s time to get some cookbooks to install some stuff on our server.  For our very basic setup we want 3 things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Apache&lt;/li&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
  &lt;li&gt;PHP&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Run &lt;code&gt;librarian-chef init&lt;/code&gt; in the root of your project to make librarian-chef manage it.  You should now have a file in the root of your project called &lt;code&gt;Cheffile&lt;/code&gt;, open it in your favourite editor and add the following below the line &lt;code&gt;site &#39;http://community.opscode.com/api/v1&#39;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cookbook &#39;apache2&#39;
cookbook &#39;mysql&#39;
cookbook &#39;php&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax of this file is fairly straight forward, and there should be some commented out examples in there for you to examine.  The cookbook name corresponds to the name of the cookbook on the opscode community website.&lt;/p&gt;

&lt;p&gt;Now run &lt;code&gt;librarian-chef install&lt;/code&gt; and it should go off and grab your cookbooks and dependencies for you.&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8937074144/&quot;&gt;&lt;img src=&quot;http://farm8.static.flickr.com/7456/8937074144_d7955e9831.jpg&quot; title=&quot;digitalocean-librarian-chef-install&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Third party cookbooks should always live in &lt;code&gt;./cookbooks&lt;/code&gt;, so this is where librarian-chef has put them.  If you ever need to override something in a cookbook, never modify it, instead, put the corresponding changes in &lt;code&gt;./site-cookbooks&lt;/code&gt;.  Don’t worry about that for now though, we will cover that in another blog post.&lt;/p&gt;

&lt;h2 id=&quot;step-4---your-node&quot;&gt; Step 4 - Your Node&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;https://www.digitalocean.com/?refcode=dd312899e4e9&quot;&gt;Digital Ocean&lt;/a&gt;, a VPS is a Droplet, in Chef, a VPS (or server) is called a node.  Not surprisingly, node configuration files live in &lt;code&gt;./nodes&lt;/code&gt;.  They should be named in the format &lt;code&gt;{hostname|ip}.json&lt;/code&gt;.  If you don’t know either yet, you can call it anything you want, but you will lose a little syntactic sugar on the command-line a little later on.&lt;/p&gt;

&lt;p&gt;Change into your &lt;code&gt;nodes&lt;/code&gt; directory and create a new node file.  For my purposes, that would be either &lt;code&gt;chef-demo.adamcod.es.json&lt;/code&gt; or &lt;code&gt;82.196.8.99.json&lt;/code&gt;.  Your hostname is probably better long term as your IP address can change, however as this is just a demo I’m not going to actually create the hostname, I’ll be using the IP Address.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd nodes
touch 82.196.8.99.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open the file in your text editor and add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;run_list&quot;: [
    &quot;recipe[apache2]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[php]&quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the file, and go back to the terminal.  A run list is a list of cookbooks, and the recipes inside those cookbooks that we want to run on our server.  They’re specified in the format: &lt;code&gt;recipe[cookbook::recipe]&lt;/code&gt;.  If you leave off the &lt;code&gt;::recipe&lt;/code&gt; part Chef will assume a recipe named “default”.&lt;/p&gt;

&lt;p&gt;Now we’re ready to go; that’s all we need to do.  Let’s move back to the root of your project and try provisioning your server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/Projects/chef-demo
knife solo bootstrap root@82.196.8.99
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Substitute &lt;code&gt;82.196.8.99&lt;/code&gt; with your IP or Hostname, and root with your user-account if you’re not using &lt;a href=&quot;https://www.digitalocean.com/?refcode=dd312899e4e9&quot;&gt;Digital Ocean&lt;/a&gt;.  You can add an optional 4th parameter here which is the path to your nodefile if you didn’t name it in the recommended format.&lt;/p&gt;

&lt;p&gt;You should soon see knife logging into the server, then downloading, installing, and running Chef.  Knife Solo has 3 main commands you should be familiar with:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;knife solo bootstrap&lt;/p&gt;

    &lt;p&gt;This will login to your server, download and install chef, copy across your cookbooks, and then run chef.  This is the composite of the two commands below.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;knife solo cook&lt;/p&gt;

    &lt;p&gt;This will login to your server, copy across your cookbooks, and then run chef&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;knife solo prepare&lt;/p&gt;

    &lt;p&gt;This will login to your server, then download and install chef.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once Chef has finished its run open up a browser and visit your IP Address or Hostname for this Droplet and you should see something like this:&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8936739547/&quot;&gt;&lt;img src=&quot;http://farm8.static.flickr.com/7430/8936739547_88b5bef0bc.jpg&quot; title=&quot;digitalocean-apache-not-found&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;That’s great!  That means that Chef has worked.  Normally you would expect to see something like “It works!” here, but the apache2 Chef recipe doesn’t install the “Default Site” that apache normally comes with.&lt;/p&gt;

&lt;p&gt;Now we can login to the server to do this, using &lt;code&gt;a2ensite default&lt;/code&gt;, or we can do it the Chef way.  We’re going to do it the Chef way, not just because this is a Chef blog post, but also because any manual changes you make to the server will be overwritten every time you run Chef, so doing things via Chef is the recommended way.  Remember: We want to end up with a set of recipes we can run over and over again to get a server to the exact same specification each time, so anything we have to do manually should be seen as a bad.&lt;/p&gt;

&lt;h2 id=&quot;step-5---final-tweaks&quot;&gt;Step 5 - Final Tweaks&lt;/h2&gt;

&lt;p&gt;We’re nearly there.  We have a working apache server, but we don’t have any sites loading.  First, we need to enable the default site in apache, and we do that by editing our “node attributes” for apache.&lt;/p&gt;

&lt;p&gt;If you open &lt;code&gt;cookbooks/apache2/attributes/default.rb&lt;/code&gt; you will see a whole bunch of attributes for different platforms.  The one we’re interested in is &lt;code&gt;default_site_enabled&lt;/code&gt; under ubuntu, which is currently set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Do not edit this here.  Node attributes can be over-ridden on a node-by-node basis in our node file.  Basically, any key in our node file’s json which is not &lt;code&gt;run_list&lt;/code&gt; is a node attribute.  You can see in the attributes file for each recipe (which matches the recipe name but in the attributes directory in the cookbook) what attributes are available for us to over-ride.  We’re only interested in this one today, so update your node file like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;apache&quot;: {
    &quot;default_site_enabled&quot;: true
  },
  &quot;run_list&quot;: [
    &quot;recipe[apache2]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[php]&quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that the key names and hierarchy matches that of the attribute file we looked at above.  Now we re-run Chef using knife, and this time we use the &lt;code&gt;cook&lt;/code&gt; command instead of &lt;code&gt;bootstrap&lt;/code&gt; as we don’t need to install Chef on the server again.&lt;/p&gt;

&lt;p&gt;Just a quick note: Chef is smart enough to know when it’s already been run, so it’s fairly safe to run it multiple times and it will only modify things that have changed in your local cookbooks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;knife solo cook root@82.196.8.99
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now reload your browser and you should see the familiar “It works!” page:&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8936945923/&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3667/8936945923_15c5001459.jpg&quot; title=&quot;digitalocean-it-works&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Progress!  Now let’s test PHP And MySQL.  Login to your server using SSH and run &lt;code&gt;php -v&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8937594046/&quot;&gt;&lt;img src=&quot;http://farm6.static.flickr.com/5324/8937594046_4f90aea576.jpg&quot; title=&quot;digitalocean-php-v&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Success!  Now you’re probably thinking you’d like to test MySQL.  But there’s a problem.  If you run &lt;code&gt;mysql&lt;/code&gt; without any parameters on your new server you’ll find it can’t connect.  That’s because the &lt;code&gt;default&lt;/code&gt; recipe for the &lt;code&gt;mysql&lt;/code&gt; cookbook only installs the MySQL client, not the MySQL server.&lt;/p&gt;

&lt;p&gt;If you take a look in &lt;code&gt;./cookbooks/mysql/recipes&lt;/code&gt; you should see a recipe called &lt;code&gt;server.rb&lt;/code&gt;.  It’s a good bet that that’s what installs MySQL Server, so let’s add that to our &lt;code&gt;run_list&lt;/code&gt; after &lt;code&gt;recipe[mysql]&lt;/code&gt;.  We’ll leave the default MySQL recipe there as we are going to need the client too.  Our node file should now look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;apache&quot;: {
    &quot;default_site_enabled&quot;: true
  },
  &quot;run_list&quot;: [
    &quot;recipe[apache2]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[mysql::server]&quot;,
    &quot;recipe[php]&quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exit out of your SSH session on your server and run &lt;code&gt;knife solo cook root@your.ip.or.hostname&lt;/code&gt; from the root of your project to re-run Chef with our new settings.  You should see something like this:&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8937090475/&quot;&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2878/8937090475_d124287b78.jpg&quot; title=&quot;digitalocean-chef-error&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Welcome to the hell that is Chef error messages.  By trying to be really helpful, they bombard you with far too much information, making it really difficult to decipher what’s actually gone wrong.&lt;/p&gt;

&lt;p&gt;The real problem here is something I thought it important to highlight.  In some recipes some node attributes are not optional, you have to set them for your node, and the MySQL cookbook’s &lt;code&gt;server&lt;/code&gt; recipe is one such recipe.  We need to set a MySQL root password for this node!  Fortunately this is usually quite well documented in the README for whatever cookbook you’re using.  Update your node file to look like the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;apache&quot;: {
    &quot;default_site_enabled&quot;: true
  },
  &quot;mysql&quot;: {
    &quot;server_root_password&quot;: &quot;yoursecretsecurepassword&quot;,
    &quot;server_repl_password&quot;: &quot;yoursecretsecurepassword&quot;,
    &quot;server_debian_password&quot;: &quot;yoursecretsecurepassword&quot;
  },
  &quot;run_list&quot;: [
    &quot;recipe[apache2]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[mysql::server]&quot;,
    &quot;recipe[php]&quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now re-run your &lt;code&gt;knife cook&lt;/code&gt; command and once it’s complete ssh back into your server.  Run &lt;code&gt;mysql -u root -pyoursecretsecurepassword&lt;/code&gt; and you should be dropped into a nice &lt;code&gt;mysql&amp;gt;&lt;/code&gt; prompt, showing your MySQL Server is now installed and working!&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8937807398/&quot;&gt;&lt;img src=&quot;http://farm8.static.flickr.com/7316/8937807398_f75251f702.jpg&quot; title=&quot;digitalocean-mysql-works&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Finally, we have one last thing to do, test PHP on apache.  Still in your ssh session, type &lt;code&gt;exit&lt;/code&gt; to quit MySQL, then add an &lt;code&gt;info.php&lt;/code&gt; to your default site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; exit
Bye
cd /var/www
touch info.php
nano info.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now enter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php phpinfo();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and save and exit using &lt;code&gt;ctrl+x&lt;/code&gt; and typing &lt;code&gt;y&lt;/code&gt; at the prompt to save.  Now open up &lt;code&gt;http://yourserver/info.php&lt;/code&gt; in your browser.&lt;/p&gt;

&lt;p&gt;It should ask you to download the file.  This is a classic symptom of PHP not being installed.  &lt;em&gt;But we checked it on the command line!&lt;/em&gt; I hear you cry.  Yes, we did, but I hope by now you’re starting to spot a theme.  The default opscode community cookbooks tend to do the absolute minimum required, and you have to explicitly say if you want something to be installed.  Taking a look through the PHP cookbook’s recipes there doesn’t seem to be anything relevant, but looking inside apache’s recipes you should notice a mod_php5 recipe.  That’s what we want, so let’s add that to our &lt;code&gt;run_list&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;apache&quot;: {
    &quot;default_site_enabled&quot;: true
  },
  &quot;mysql&quot;: {
    &quot;server_root_password&quot;: &quot;yoursecretsecurepassword&quot;,
    &quot;server_repl_password&quot;: &quot;yoursecretsecurepassword&quot;,
    &quot;server_debian_password&quot;: &quot;yoursecretsecurepassword&quot;
  },
  &quot;run_list&quot;: [
    &quot;recipe[apache2]&quot;,
    &quot;recipe[apache2::mod_php5]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[mysql::server]&quot;,
    &quot;recipe[php]&quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll notice we put &lt;code&gt;mod_php5&lt;/code&gt; before &lt;code&gt;php&lt;/code&gt; in our &lt;code&gt;run_list&lt;/code&gt;.  Normally Chef will run things in order, but the &lt;code&gt;mod_php5&lt;/code&gt; recipie &lt;em&gt;requires&lt;/em&gt; the &lt;code&gt;php&lt;/code&gt; recipe, so Chef is smart enough to know to run that first.&lt;/p&gt;

&lt;p&gt;Now we can exit our SSH session and re-run &lt;code&gt;knife cook&lt;/code&gt; and refresh our &lt;code&gt;info.php&lt;/code&gt; in the browser.&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8937944348/&quot;&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2810/8937944348_14f609cfb3.jpg&quot; title=&quot;digitalocean-phpinfo&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We now have a functional LAMP stack, it obviously requires quite a bit more work to become a secure and reliable server, but we have deployed it in an automated, reliable, and replicable way.  We’ve learnt how to manage attributes and settings for applications via their cookbooks, and how to combine and manage our cookbooks to build our own server, with different settings and applications for different servers.&lt;/p&gt;

&lt;p&gt;Hopefully you’ve gained enough knowledge to feel confident looking at and experimenting with the other cookbooks available on the opscode website and add them to your own cookbook as necessary to make your server secure, reliable and production ready.&lt;/p&gt;

&lt;p&gt;I’m planning to release this blog post as a screen-cast, as well as a more detailed blog post to make a production ready LAMP stack using Chef and &lt;a href=&quot;https://www.digitalocean.com/?refcode=dd312899e4e9&quot;&gt;Digital Ocean&lt;/a&gt; (but should work with any other server or VPS you may want to use).&lt;/p&gt;

&lt;p&gt;To hear about that when it happens, as well as other exclusive content not available here, make sure you enter your email address in the subscribe box below, and let me know on &lt;a href=&quot;https://twitter.com/sixdaysad&quot;&gt;twitter&lt;/a&gt; or &lt;a href=&quot;https://alpha.app.net/adambrett&quot;&gt;ADN&lt;/a&gt; if you have any questions or comments.&lt;/p&gt;

&lt;h2 id=&quot;read-next&quot;&gt; Read Next&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://adamcodes/2013/01/15/vagrant-is-easy-chef-is-hard.html&quot;&gt;Vagrant is easy Chef is hard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://adamcod.es/2013/01/15/vagrant-is-easy-chef-is-hard-part2.html&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://martinfowler.com/bliki/SnowflakeServer.html&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;http://www.ruby-lang.org/en/downloads/&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;http://community.opscode.com&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/05/30/zend-1.x-phpunit-3.4-and-3.7-composer</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/05/30/zend-1.x-phpunit-3.4-and-3.7-composer.html"/>
    <title>Zend Framework 1.x, PHPUnit 3.4 and PHPUnit 3.7 side-by-side</title>
    <published>2013-05-30T00:00:00+01:00</published>
    <updated>2013-05-30T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;Zend Framework 1.x will never support a version of PHPUnit greater than 3.4&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.  This means if you have a system-wide install of PHPUnit available (likely 3.7 at the time of writing) you will be unable to use the &lt;code&gt;phpunit&lt;/code&gt; command with your Zend Framework project without getting errors.&lt;/p&gt;

&lt;p&gt;The solution to this is to do a local installation of PHPUnit 3.4 for each Zend Framework 1.x project you want to work on.  The only problem is, composer support wasn’t added until PHPUnit 3.7, so installing via composer is out and you have to use PEAR.&lt;/p&gt;

&lt;h2 id=&quot;default-setup&quot;&gt;Default Setup&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;BUT WAIT!&lt;/em&gt;  I hear you cry.  &lt;em&gt;Doesn’t composer have the ability to install PEAR packages&lt;/em&gt;.  Yes, it does, so let’s give it a try.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/Projects
mkdir zf-phpunit
cd zf-phpunit
composer init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fill in the details until you get to the section that asks you to define your dependencies interactively, then add zendframework1, and continue:&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8900729560/&quot;&gt;&lt;img src=&quot;http://farm8.static.flickr.com/7438/8900729560_b875186edd.jpg&quot; title=&quot;zend-composer-install&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Now run &lt;code&gt;composer install&lt;/code&gt; and it should go off and grab a copy of zend framework 1 for you.  Once this is complete, create a new zend framework project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./vendor/zendframework/zendframework1/bin/zf.sh create project .
Creating project at ~/Projects/zf-phpunit
Note: This command created a web project, for more information setting up your VHOST, please see docs/README
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the composer autoloader to your &lt;code&gt;public/index.php&lt;/code&gt;  and &lt;code&gt;tests/bootstrap.php&lt;/code&gt; files&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and you should have a fully functioning zend framework 1 project.&lt;/p&gt;

&lt;h2 id=&quot;running-phpunit-37&quot;&gt;Running PHPUnit 3.7&lt;/h2&gt;

&lt;p&gt;zf tool has created a default test for you automatically, so lets try and run it using our system install of phpunit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd tests
phpunit --version
# PHPUnit 3.7.21 by Sebastian Bergmann.
phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which should give you an error something like this:&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8900637907/&quot;&gt;&lt;img src=&quot;http://farm8.static.flickr.com/7349/8900637907_031eebe24c.jpg&quot; title=&quot;zend-phpunit-error&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;This is what we were expecting, this error will never be fixed, which is why we need to use PHPUnit 3.4, so let’s go do that.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;Open &lt;code&gt;composer.json&lt;/code&gt; in your favourite text editor and add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;repositories&quot;: [
  {
    &quot;type&quot;: &quot;pear&quot;,
    &quot;url&quot;: &quot;http://pear.phpunit.de&quot;
  }
],
&quot;require-dev&quot;: {
  &quot;pear-pear.phpunit.de/PHPUnit&quot;: &quot;3.4.*&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run &lt;code&gt;composer update&lt;/code&gt; to grab our new dependencies.  Composer should do its thing and you’ll be left with PHPUnit and the latest ZendFramework 1 version in &lt;code&gt;./vendor&lt;/code&gt;, and a PHPUnit 3.4 executable in &lt;code&gt;./vendor/bin/phpunit&lt;/code&gt;.  So let’s try running that.&lt;/p&gt;

&lt;div class=&quot;embed Flickr&quot;&gt;&lt;a href=&quot;http://www.flickr.com/photos/adbrett/8901787020/&quot;&gt;&lt;img src=&quot;http://farm8.static.flickr.com/7341/8901787020_94ee0fd258.jpg&quot; title=&quot;zend-phpunit-vendored&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Great! Right? Our tests ran perfectly.  Well yes, and &lt;em&gt;maybe&lt;/em&gt; no.&lt;/p&gt;

&lt;h2 id=&quot;extra-credit&quot;&gt;Extra Credit&lt;/h2&gt;

&lt;p&gt;This will get you through almost everything, but in our particular case, we had to install a few dependencies for PHPUnit that composer doesn’t seem to grab:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;repositories&quot;: [
    {
      &quot;type&quot;: &quot;pear&quot;,
      &quot;url&quot;: &quot;http://pear.symfony-project.com&quot;
    },
    {
      &quot;type&quot;: &quot;pear&quot;,
      &quot;url&quot;: &quot;http://pear.phpunit.de&quot;
    }
  ],
  &quot;require&quot;: {
    &quot;zendframework/zendframework1&quot;: &quot;1.x&quot;
  },
  &quot;require-dev&quot;: {
    &quot;pear-pear.phpunit.de/File_Iterator&quot;: &quot;1.3.2&quot;,
    &quot;pear-pear.phpunit.de/Text_Template&quot;: &quot;1.1.2&quot;,
    &quot;pear-pear.phpunit.de/PHP_CodeCoverage&quot;: &quot;1.1.*&quot;,
    &quot;pear-pear.phpunit.de/PHP_Timer&quot;: &quot;1.0.3&quot;,
    &quot;pear-pear.phpunit.de/PHPUnit_MockObject&quot;: &quot;1.1.*&quot;,
    &quot;pear-pear.symfony-project.com/YAML&quot;: &quot;1.0.2&quot;,
    &quot;pear-pear.phpunit.de/PHPUnit&quot;: &quot;3.4.*&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run &lt;code&gt;composer update&lt;/code&gt; again and you should have everything installed that you need to use PHPUnit 3.4 for your project.&lt;/p&gt;

&lt;h2 id=&quot;read-next&quot;&gt; Read Next&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://adamcodes/2013/05/10/composer-and-zend-framework-1.x.html&quot;&gt;Composer &amp;amp; Zend Framework 1.x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://framework.zend.com/issues/browse/ZF-11871&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;See: &lt;a href=&quot;http://adamcodes/2013/05/10/composer-and-zend-framework-1.x.md&quot;&gt;Composer &amp;amp; Zend Framework 1.x&lt;/a&gt; to get Zend Framework working with Composer&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/05/10/composer-and-zend-framework-1.x</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/05/10/composer-and-zend-framework-1.x.html"/>
    <title>Zend Framework 1.x and Composer</title>
    <published>2013-05-10T00:00:00+01:00</published>
    <updated>2013-05-10T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;Using Zend Framework 1.x with composer is fairly straight forward, even if not immediately obvious.  First, let’s create a new Zend Framework 1 project in the standard way, using the zf tool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zf create project zend-composer
cd zend-composer/public
php -S 127.0.0.1:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now visit http://127.0.0.1:8000 in your browser and you should see the familiar “Welcome to the Zend Framework!” page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/welcome-to-zend-framework.png&quot; alt=&quot;Welcome to Zend Framework&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The default project is loading Zend Framework from your include path, so first off, let’s break that.  Edit &lt;code&gt;./public/index.php&lt;/code&gt; and comment out the &lt;code&gt;get_include_path()&lt;/code&gt; line, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Ensure library/ is on include_path
set_include_path(implode(PATH_SEPARATOR, array(
    realpath(APPLICATION_PATH . &#39;/../library&#39;),
    // get_include_path(),
)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refresh your browser and you should now be getting an error similar to this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/zend-include-path.png&quot; alt=&quot;Zend missing include path&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s good, now we’re going to install Zend Framework via composer and add that to our include path.  Close the PHP server using &lt;code&gt;Ctrl+C&lt;/code&gt; and run the following&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ..
composer init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fill in the details for your project until you get to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Would you like to define your dependencies (require) interactively [yes]?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;return&lt;/code&gt; for yes, then search for &lt;code&gt;zendframework1&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/search-dependencies.png&quot; alt=&quot;Search for dependencies&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the number for the line that matches &lt;code&gt;zendframework/zendframework1&lt;/code&gt; which for me is &lt;code&gt;0&lt;/code&gt;, and probably will be for you too.&lt;/p&gt;

&lt;p&gt;Next, enter the version you require, use &lt;code&gt;1.*&lt;/code&gt; for the latest 1.x version&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;At the next &lt;code&gt;Search for a package []:&lt;/code&gt; prompt, press &lt;code&gt;return&lt;/code&gt;, we don’t want to define any dev dependencies yet, so type &lt;code&gt;no&lt;/code&gt; at the next prompt then &lt;code&gt;return&lt;/code&gt; to confirm generation.&lt;/p&gt;

&lt;p&gt;You should end up with a file in your project root called &lt;code&gt;composer.json&lt;/code&gt; that looks similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &quot;name&quot;: &quot;adam/zend-composer&quot;,
    &quot;require&quot;: {
        &quot;zendframework/zendframework1&quot;: &quot;1.*&quot;
    },
    &quot;authors&quot;: [
        {
            &quot;name&quot;: &quot;Adam Brett&quot;,
            &quot;email&quot;: &quot;&quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now type &lt;code&gt;composer install&lt;/code&gt; to get things started.  Composer will go away and download a fresh copy of the latest version of Zend Framework and place it in your projects &lt;code&gt;./vendor&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;We can check like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree vendor -L 1
vendor
├── autoload.php
├── composer
└── zendframework
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great.  We’re almost done.  Now remember that line we commented out?  We need to update that to point at our new Zend Framework download.  The actual library lives in &lt;code&gt;./vendor/zendframework/zendframework1/library&lt;/code&gt; so open up &lt;code&gt;./public/index.php&lt;/code&gt; and change the commented line to match:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Ensure library/ is on include_path
set_include_path(implode(PATH_SEPARATOR, array(
    realpath(APPLICATION_PATH . &#39;/../library&#39;),
    realpath(APPLICATION_PATH . &#39;/../vendor/zendframework/zendframework1/library&#39;)
)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if we restart the PHP server using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd public
php -S 127.0.0.1:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And refresh the site in our browser, we should see the “Welcome to Zend Framework” page again.  Success!&lt;/p&gt;

&lt;p&gt;There’s one last thing to do if you want to consume other composer packages in Zend Framework, and that’s to add composer’s autoloader.  Edit &lt;code&gt;./public/index.php&lt;/code&gt; again and add the autoloader around line 17, just above the &lt;code&gt;require_once&lt;/code&gt; for &lt;code&gt;Zend_Application&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require_once realpath(APPLICATION_PATH . &#39;/../vendor/autoload.php&#39;);

/** Zend_Application */
require_once &#39;Zend/Application.php&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
    &lt;h4 id=&quot;update&quot;&gt;Update:&lt;/h4&gt;
    &lt;p&gt;
        If you&#39;ve followed this guide along step-by-step, the placement of your &lt;code&gt;require_once&lt;/code&gt; for the composer autoloader is really important, because we totally overwrite the &lt;code&gt;include_path&lt;/code&gt; in a previous step.
    &lt;/p&gt;

    &lt;p&gt;
        If you include the composer autoloader before that step you will overwrite any &lt;code&gt;include_path&lt;/code&gt; that composer sets, and will run into a similar issue to the one found &lt;a href=&quot;https://github.com/Emagister/zend-form-decorators-bootstrap/issues/102#issuecomment-20968479&quot;&gt;here&lt;/a&gt;.
    &lt;/p&gt;

    &lt;p&gt;
        To avoid that problem simply make sure you include the composer autoloader &lt;em&gt;after&lt;/em&gt; (un)setting the include path!
    &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Now repeat these steps in &lt;code&gt;./tests/bootstrap.php&lt;/code&gt; and we’re all done!&lt;/p&gt;

&lt;h2 id=&quot;read-next&quot;&gt;Read Next&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://adamcodes/2013/05/30/zend-1.x-phpunit-3.4-and-3.7-composer.html&quot;&gt;Zend Framework 1.x, PHPUnit 3.4 and PHPUnit 3.7 side-by-side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://getcomposer.org/doc/00-intro.md&quot;&gt;Getting start with composer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;I’m assuming you have composer &lt;a href=&quot;https://github.com/composer/composer#global-installation-of-composer-manual&quot;&gt;installed system wide&lt;/a&gt;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Zend Framework 2 is a &lt;a href=&quot;https://packagist.org/packages/zendframework/zendframework&quot;&gt;separate composer package&lt;/a&gt;, rather than a version 2.x, so it’s impossible to install ZF2 via the zendframework1 package.&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/04/09/deprecated-not-depreciated</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/04/09/deprecated-not-depreciated.html"/>
    <title>There's no <em>i</em> in deprecated</title>
    <published>2013-04-09T00:00:00+01:00</published>
    <updated>2013-04-09T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;Yesterday I had a full day of interviews and one of the candidates said something that bothered me:&lt;/p&gt;

&lt;p&gt;In the context of a language feature that is to be removed in a future version, he said that the feature was &lt;em&gt;depreciated&lt;/em&gt;, when I’m pretty sure he meant &lt;em&gt;deprecated&lt;/em&gt;.  At the time I let it go, but it turns out, he is not alone in his confusion&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The difference in spelling is subtle, and both words have the same latin root.  However, in terms of computer programming, features are &lt;em&gt;deprecated&lt;/em&gt;, which in this context is synonymous for &lt;em&gt;obsolete&lt;/em&gt; or &lt;em&gt;superseded&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To &lt;em&gt;deprec&lt;strong&gt;i&lt;/strong&gt;ate&lt;/em&gt; has no real context in computer programming, and instead refers to a decrease in value, for example in an asset or currency.&lt;/p&gt;

&lt;p&gt;It’s an easy mistake to make.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://english.stackexchange.com/questions/45295/why-is-there-confusion-between-depreciated-and-deprecated&quot;&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jonathangazeley.com/2009/07/deprecated-vs-depreciated/&quot;&gt;Jonathan Gazeley&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Depreciation&quot;&gt;WikiPedia - Depreciation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Deprecation&quot;&gt;WikiPedia - Deprecation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://stackoverflow.com/search?q=depreciated&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/03/07/composer-install-vs-composer-update</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/03/07/composer-install-vs-composer-update.html"/>
    <title>"composer update" vs "composer install"</title>
    <published>2013-03-07T00:00:00+00:00</published>
    <updated>2013-03-07T00:00:00+00:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;Unless you’ve been living under a rock, you know about composer&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and packagist&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; for managing dependencies in PHP.  A few days ago, an issue&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; was closed and merged into master which changes the default behaviour of &lt;code&gt;composer update&lt;/code&gt; to be functionally equivellent to &lt;code&gt;composer update --require-dev&lt;/code&gt;.  This confused a few folks&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, and here’s why:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should only ever run &lt;code&gt;composer update&lt;/code&gt; to get the newest versions of your dependencies, not to install them&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What’s not massively clear (or at least wasn’t early on) in the composer documentation&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; is the difference between &lt;code&gt;composer install&lt;/code&gt; and &lt;code&gt;composer update&lt;/code&gt; and the relevancy of &lt;code&gt;composer.lock&lt;/code&gt;.  This is exasperated by composer displaying a warning when running &lt;code&gt;composer install&lt;/code&gt; with a lockfile present and changes in &lt;code&gt;composer.json&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/composer-install-message.png&quot; alt=&quot;composer install message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not very clear.&lt;/p&gt;

&lt;p&gt;Here’s a fairly standard composer work-flow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add &lt;code&gt;composer.json&lt;/code&gt; with some dependencies&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;composer install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add some more dependencies&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;composer update&lt;/code&gt; as you’ve updated your dependencies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is the &lt;em&gt;right&lt;/em&gt; way to use composer.  If you are using composer to deploy your dependencies into a production environment (which many people are), based on this work-flow you may incorrectly assume that you deploy your updated &lt;code&gt;composer.json&lt;/code&gt; to production and run &lt;code&gt;composer update&lt;/code&gt; again.  This is the &lt;em&gt;wrong&lt;/em&gt; way to use composer.&lt;/p&gt;

&lt;p&gt;What’s really happening when you run &lt;code&gt;composer update&lt;/code&gt; is that it’s fetching the newest version of your dependencies as specified by &lt;code&gt;composer.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve been testing your code with monolog 1.2, and monolog 1.3 gets released, unless you’re very explicit in your &lt;code&gt;composer.json&lt;/code&gt; composer will fetch monolog 1.3.  Now imagine that a backward incompatible change or bug is introduced with monolog 1.3.  Suddenly your dependencies have broken your production environment. Not good.&lt;/p&gt;

&lt;p&gt;What you really need to do is deploy your updated &lt;code&gt;composer.lock&lt;/code&gt;, and then re-run &lt;code&gt;composer install&lt;/code&gt;.  You should never run &lt;code&gt;composer update&lt;/code&gt; in production.  If however you deploy a new &lt;code&gt;composer.lock&lt;/code&gt; with new dependencies and/or versions (after having run &lt;code&gt;composer update&lt;/code&gt; in dev) and &lt;em&gt;then&lt;/em&gt; run &lt;code&gt;composer install&lt;/code&gt; composer will update and install new your new dependencies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/composer-install-update.png&quot; alt=&quot;composer install update lockfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Whenever composer generates a new &lt;code&gt;composer.lock&lt;/code&gt; it &lt;em&gt;locks&lt;/em&gt; you to a specific set of dependencies and the latest versions of those dependencies it can resolve.&lt;/p&gt;

&lt;p&gt;This means if your &lt;code&gt;composer.json&lt;/code&gt; specifies &lt;code&gt;monolog/monolog: 1.*&lt;/code&gt;, and it installs monolog 1.2, monolog 1.2 will be included in your lockfile.  From then on when you run &lt;code&gt;composer install&lt;/code&gt; you will only ever get monolog 1.2, even after monolog 1.3 has been released.&lt;/p&gt;

&lt;p&gt;Here’s the basic workflow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/composer-install-flow.png&quot; alt=&quot;composer install update flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not too complicated.&lt;/p&gt;

&lt;p&gt;Now we can come a full circle back to the issue that prompted this post.  As we never run &lt;code&gt;composer update&lt;/code&gt; in production, it follows that whenever we run it we will be in our dev environment, and the automatic inclusion of the &lt;code&gt;--require-dev&lt;/code&gt; flag on &lt;code&gt;composer update&lt;/code&gt; now makes sense.&lt;/p&gt;

&lt;p&gt;If you’re still not happy, you can ignore all of this and add the &lt;code&gt;--no-dev&lt;/code&gt; flag to reverse the behaviour.&lt;/p&gt;

&lt;p&gt;Questions? Comments? Head over to &lt;a href=&quot;http://twitter.com/sixdaysad&quot;&gt;twitter&lt;/a&gt; to let me know what you think.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://getcomposer.org&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://packagist.org&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;https://github.com/composer/composer/pull/1644&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;https://github.com/composer/composer/pull/1644#issuecomment-14347890&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;http://getcomposer.org/doc/&lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/02/28/how-to-hire-a-developer</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/02/28/how-to-hire-a-developer.html"/>
    <title>How to Hire a Developer</title>
    <published>2013-02-28T00:00:00+00:00</published>
    <updated>2013-02-28T00:00:00+00:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;If you’ve ever been for a job interview, you know how hard it is to first get your CV noticed, and how daunting it can be to turn up to an interview or take a technical test, even if you would normally know your stuff inside out nerves can get to the best of us.&lt;/p&gt;

&lt;p&gt;If you’ve never hired a developer before, you might not realise it can be just as difficult on the other side of the table.  How do you make sure you don’t overlook an awesome CV just because it doesn’t stand out?  How do you make sure you don’t come across as a complete tool in the interview and put off an amazing candidate?&lt;/p&gt;

&lt;p&gt;I have been in the fortunate position to hire a number of people in a number of ways, ranging from other freelancers whilst I was freelancing, to filtering CV’s and administering technical tests when I was a Senior Developer, and now being on formal panel interviews as a Lead Developer.&lt;/p&gt;

&lt;p&gt;Over that time (and through lots of trial and error), I’ve found a system that seems to work pretty well, and that’s what I’m going to outline below.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;First off, you need to sit down and outline exactly what this person is going to be doing.  What’s the first project you’re going to give them?  Are they going to be there primarily for support and bug-fixes so you can focus on new projects?  The answer to this questions is important, because it will determine the skills that you need this person to have, and the level that you will need them to be at.&lt;/p&gt;

&lt;p&gt;For example, if they’re going to focus on new projects you want someone with experience writing specs and excellent communication skills.  If the project is going to have a front-end, you probably want someone with HTML+CSS+JS experience, not just PHP.  It would also be preferential if they had some user-interface design experience too, or maybe experience with Balsamiq (or your wireframe tool of choice)?&lt;/p&gt;

&lt;p&gt;If you want someone who’s just going to be fixing bugs to free up &lt;em&gt;your&lt;/em&gt; time for new projects, then you can probably afford someone with a little less experience and train them up.  Or maybe your system has a lot of bugs and uses some cutting edge tech - you might need someone with more experience.&lt;/p&gt;

&lt;h2 id=&quot;advertise&quot;&gt;Advertise&lt;/h2&gt;

&lt;p&gt;Now you have your list of minimum requirements, it’s time to start collecting CV’s.  Put job postings on your web site, stack overflow, wherever you feel is relevant.  In my current and previous roles this involved speaking to and dealing with recruitment agencies that usually already have a database of CV’s with matching skills, but will charge you a percentage of the starting salary of your new recruit as a finders fee.&lt;/p&gt;

&lt;p&gt;Another excellent place to find talent is universities.  Speak to your local CS professors or the uni’s careers department.  Make sure their best students know about the role.&lt;/p&gt;

&lt;p&gt;Make your advert concise and to the point.  Don’t include stupid things like “Rock-star developers only”.  Everyone wants rock-star developers, make sure those rock-stars know why they should apply to your advert and not someone else’s.  Your Joel Test score could help, even if it’s not great you show the candidate you’re the kind of employer that knows what the Joel Test is, and not just some HR/recruiter/manager type.&lt;/p&gt;

&lt;p&gt;If you are a HR/recruiter/manager type, there’s nothing wrong with that, but be aware bureaucracy tends to stifle techies and creative-types.  The best will always go where they have more freedom and liberal environments and because their skills are in demand, they have that option.&lt;/p&gt;

&lt;p&gt;Finally, set a deadline.  You don’t want this going on forever.  Give it a reasonable amount of time, but not too much.  Something like 1-2 months time should suffice.&lt;/p&gt;

&lt;h2 id=&quot;filter&quot;&gt;Filter&lt;/h2&gt;

&lt;p&gt;Once your advert has been out there a while you will start to get CV’s come in.  Depending on the source and the level of skill you require, there is going to be a fairly high signal-to-noise ratio.  Especially if that source is recruitment agencies.  That means it’s going to be your job to filter out the candidates that don’t meet the minimum requirements.&lt;/p&gt;

&lt;p&gt;Start a simple spreadsheet to keep track.  You will need the following columns across the top:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Candidate Name&lt;/p&gt;

    &lt;p&gt;Some recruitment agencies won’t send you a name until the interview is confirmed for fear of you contacting the candidate directly to avoid paying their fee, so use some unique identifier until you know it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Source&lt;/p&gt;

    &lt;p&gt;You’ll want to know where you found this candidate when it comes to contacting them again, you may not have their direct contact details yet, so might need to go back to the job-board or recruitment agency to contact them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Status&lt;/p&gt;

    &lt;p&gt;Be consistent here, as this field will be a useful field to use AutoFilter on later.  I usually stick to:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Phone&lt;/li&gt;
      &lt;li&gt;Interview&lt;/li&gt;
      &lt;li&gt;Call-back&lt;/li&gt;
      &lt;li&gt;Rejected&lt;/li&gt;
      &lt;li&gt;Maybe&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;These should be fairly self explanatory and will quickly let you know where the candidate is in the process.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Notes&lt;/p&gt;

    &lt;p&gt;Use this to make any additional notes on the candidate.  Are they are star candidate?  If they’ve been rejected, why did you reject them?  It’s important to give good feedback so you can give people opportunity to improve.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;formatting&quot;&gt;Formatting&lt;/h3&gt;

&lt;p&gt;When you start filtering, the first thing to do is check for CV formatting.  A CV is the first port of call, your first impression of a candidate, they’re trying to sell themselves to you.  If the CV is poorly formatted, poorly organised, a mishmash of fonts, 20 pages long, or just otherwise &lt;em&gt;painful to read&lt;/em&gt; (and some really will be) this person probably isn’t a very good communicator, and that’s going to mean they’ll likely have problems communicating as a member of your team.&lt;/p&gt;

&lt;p&gt;Whether or not you reject them at this point because of this is really up to you; It will depend on your internal tolerances for this, and ultimately how much communication their role will entail.&lt;/p&gt;

&lt;h3 id=&quot;skills&quot;&gt;Skills&lt;/h3&gt;

&lt;p&gt;The next thing to look for is skills.  Do they list all of the required skills? Most of them?  Any extra desirable skills that are non-essential?  Skills should be easy to find and be realistic.&lt;/p&gt;

&lt;p&gt;When I say realistic, I mean: I’ve had one list Windows Server 2009 among their core skills, another claim 15 years PHP experience when PHP was 13 years old, and another 4 years CakePHP experience when Cake was 3 years old.&lt;/p&gt;

&lt;p&gt;I’m not saying these people were trying to pull a fast one, but when I see something like this it instantly turns me off.  You can throw their CVs away at this point if you want to.  Unfortunately I cannot.  As long as their core skills are listed and match our requirements, I am required by employment legislation that governs my employers industry to consider them.  So be careful, make sure you’re not bound by similar legislation too.&lt;/p&gt;

&lt;h3 id=&quot;previous-employment&quot;&gt;Previous Employment&lt;/h3&gt;

&lt;p&gt;Here we’re looking for just a couple of things.  We want to make sure they’ve done what we want them to do before and for the required amount of time (if you decided this was important in your requirements), and that the companies actually exist, and don’t belong to them and/or a family member.  There’s nothing wrong with this per-se (I freelanced for 4 years before getting my first full-time job), but it requires extra scrutiny to make sure it’s not made-up experience.  Obviously, Google is your friend here.&lt;/p&gt;

&lt;p&gt;Make sure nothing stands out and that everything seems above board.  It’s important that everything they’re describing they’ve done makes sense, and seems logical for their previous job title and the salary that you’re offering.&lt;/p&gt;

&lt;p&gt;If a “Senior Developer” lists looking after the company network or building office computers from components in their job role, then there is clearly something fishy.&lt;/p&gt;

&lt;p&gt;If it all looks good, you can progress them to the next step.&lt;/p&gt;

&lt;h2 id=&quot;rejections&quot;&gt;Rejections&lt;/h2&gt;

&lt;p&gt;After a period of time (likely the deadline you set in your advert), you should have a spreadsheet with a list of potential candidates.  Now you can filter your spreadsheet, contact all of the rejections in one go (if you weren’t contacting them as you went along), and give them a good reason why they’re being rejected.  Be kind and courteous, these people showed an interest in working with you and your company.  Show them some respect and explain why they weren’t suited for the position.  Maybe give them some areas they could improve in.  Do not give them false hope.  You won’t keep their CV on file.&lt;/p&gt;

&lt;h2 id=&quot;phone&quot;&gt;Phone&lt;/h2&gt;

&lt;p&gt;Now you should have two lists of candidates.  “Phone” and “Maybe”.  Put the Maybe’s to one side for now.  For those you want to phone, you should have a set of simple technical questions.  The aim of the telephone interview is to make sure that they actually have the skills they list on their CV, and they’re not just meaningless words to them.&lt;/p&gt;

&lt;p&gt;Contact each of the candidates in turn and arrange a time and date for a telephone interview.  Make it clear that you will be asking them a series of technical questions during the conversation, but it’s not a technical test, you simply want to gauge the level of their skills in the technologies they’ve listed on their CV before inviting them in for a face-to-face interview.  Make this appointment at least 24 hours in advance, you don’t want to surprise them with a bunch of technical questions if they’re not expecting it.&lt;/p&gt;

&lt;h3 id=&quot;telephone-questions&quot;&gt;Telephone Questions&lt;/h3&gt;

&lt;p&gt;When you are composing the technical questions for the telephone interview you should base them on your original requirements.  This means you will end up with one set of questions that you will ask everyone.  This is important to keep it fair.  Write them down, print them out, make it as consistent as possible.&lt;/p&gt;

&lt;p&gt;Ask 2-3 questions about each technology, and make them increase in difficulty as you go on.&lt;/p&gt;

&lt;p&gt;Do not ask anyone questions on a technology they don’t list on their CV.  That means if you have some questions on CSS3, as it’s a desirable but not essential skill, do not ask someone questions on CSS3 unless they explicitly list it as a skill.  If they list CSS as a skill, feel free to ask them if they know CSS3, if they answer yes, only then can you ask them your CSS3 questions.  Asking someone questions about something not on their CV is unfair.&lt;/p&gt;

&lt;p&gt;Here is an example.  Our example job requires PHP5, HTML, and CSS, with Object Oriented Programming desirable.&lt;/p&gt;

&lt;p&gt;Our questions would look like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PHP
    &lt;ol&gt;
      &lt;li&gt;How long have you been using PHP?&lt;/li&gt;
      &lt;li&gt;Can you explain how to list an array of items on the screen?&lt;/li&gt;
      &lt;li&gt;Can you explain how to list a nested array of items on the screen?
        &lt;ol&gt;
          &lt;li&gt;Can you think of a way to make that more efficient? (Bonus points for mentioning recursion)&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;HTML
    &lt;ol&gt;
      &lt;li&gt;Can you explain how to link to another page?&lt;/li&gt;
      &lt;li&gt;Can you explain how to make an ordered list of items?&lt;/li&gt;
      &lt;li&gt;Can you explain semantic markup?&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;CSS
    &lt;ol&gt;
      &lt;li&gt;Can you explain how to change the font of a paragraph of text&lt;/li&gt;
      &lt;li&gt;Can you explain how to change the colour of an active link&lt;/li&gt;
      &lt;li&gt;Can you explain how to make a bullet point list with an image of a tick instead of a circle&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;OOP
    &lt;ol&gt;
      &lt;li&gt;Can you explain what you understand inheritance to mean&lt;/li&gt;
      &lt;li&gt;Can you explain what polymorphism is?&lt;/li&gt;
      &lt;li&gt;Can you explain what coupling and cohesion are and give good examples of each?&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, these questions are pretty basic, they should be things that a professional has done hundreds of times and should have no problem explaining, we don’t want to trip anyone up or trick them, or try to be clever or make ourselves look good or anything like that.&lt;/p&gt;

&lt;p&gt;The point here is that this isn’t a technical test.  To the interviewee it looks like we’re trying to gauge their skill level, and any competent candidate will easily ace these questions.  What we really want to do is make sure we’re not getting people listing skills on their CV without having real life experience.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;my&lt;/em&gt; experience, a simple low-level test like this will weed out 75% of candidates.  As a phone interview takes 15 minutes, when compared to spending 1-2 hours on a face-to-face interview with a totally unqualified candidate we save ourselves a lot of time and hassle.&lt;/p&gt;

&lt;p&gt;Now, let’s imagine for this fictitious role, we’ve received 3 CVs that we want to progress to the telephone interviews.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Joey lists PHP5, HTML, CSS, and OOP.&lt;/li&gt;
  &lt;li&gt;Josh lists PHP4, HTML, and CSS&lt;/li&gt;
  &lt;li&gt;Jane lists PHP5, HTML, and CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s what the conversation might look like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Joey&lt;/strong&gt;: Hello?&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: Hi is that Joey?&lt;br /&gt;
&lt;strong&gt;Joey&lt;/strong&gt;: Yeah&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: Hi Joey it’s Bob from BobsInternetWidgets, I hope you were expecting my call?&lt;br /&gt;
&lt;strong&gt;Joey&lt;/strong&gt;: Yep hello!&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: I just have a few questions for you based on the things on your CV.  This isn’t a technical test and it’s nothing to worry about at all, we just want to gauge where you are with the various skills you’ve listed before we invite you in for a face-to-face interview, is that okay?&lt;br /&gt;
&lt;strong&gt;Joey&lt;/strong&gt;: Yep, no problem.&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: Okay here we go, how long have you been using PHP?&lt;br /&gt;
&lt;strong&gt;Joey&lt;/strong&gt;: Umm, about 5 or 6 years&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: Great, we’re going to start off simply and get a little bit more difficult as we go&lt;br /&gt;
&lt;strong&gt;Joey&lt;/strong&gt;: Okay&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: Can you explain how to list an array of items on the screen?&lt;br /&gt;
&lt;strong&gt;Joey&lt;/strong&gt;: You would go “foreach dollar variablename as dollar value echo dollar value”&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: That’s great, now imagine that some of these values were also arrays, how would you go about listing those on the screen too&lt;br /&gt;
&lt;strong&gt;Joey&lt;/strong&gt;: Umm, you’d probably do an if statement to check if it’s an array and if it is then do another foreach loop.&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: Excellent, is there any way you could see of improving that or making it more efficient?&lt;br /&gt;
&lt;strong&gt;Joey&lt;/strong&gt;: I don’t think so&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: What about if the arrays could be nested at any depth, and you want to print all values, like an array of array of arrays&lt;br /&gt;
&lt;strong&gt;Joey&lt;/strong&gt;: Ohhh! Recursion.  You’d write a function that calls itself passing in the new array.&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: Great thanks.  Now onto a little bit about HTML&lt;br /&gt;
…&lt;em&gt;snip&lt;/em&gt;…&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: Well thanks for your time Joey, that’s great, we just have a few more of these to do and we’ll be in touch shortly to arrange a face-to-face.  Just before I go, is are there any questions you’d like to ask me?&lt;br /&gt;
&lt;strong&gt;Joey&lt;/strong&gt;: I don’t think so at the moment.&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: Great, thanks, bye!&lt;br /&gt;
&lt;strong&gt;Joey&lt;/strong&gt;: Bye  &lt;/p&gt;

&lt;p&gt;Now you can repeat that conversation with Josh, except we won’t be asking Josh any questions about OOP, as he didn’t list it as a skill.  We might throw in additional question about why he’s only listed PHP4, and not PHP5, and ask if he has any PHP5 experience.  It’s up to you to make a judgement call on if you ask a follow up based on his answer.&lt;/p&gt;

&lt;p&gt;Once we’ve spoken to Josh, we’ll speak to Jane.  Jane has listed PHP5 as a skill but not OOP.  This might be an oversight, as most companies now who use PHP5 use object oriented programming (or at least some form of what they think is object oriented programming), so we’ll ask her if she’s done any OOP work, and then make a judgement call on whether or not to ask the OOP questions.  If she hasn’t, that’s not a problem, she didn’t list it on her CV so we can’t expect her to answer questions about it.&lt;/p&gt;

&lt;h3 id=&quot;bad-eggs&quot;&gt;Bad Eggs&lt;/h3&gt;

&lt;p&gt;Occasionally when conducting a telephone interview you will get a bad egg.  Someone who listed all the right skills on their CV, but in real life can’t answer any questions about them.  These people sometimes get angry with you and quite indignatious.  This is a defence mechanism because you’ve caught them lying and ultimately they’re embarrassed.  There’s not a lot you can do about this.  Try to end the conversation as politely and quickly as possible, inform them you won’t be taking their application any further, and if they get too abusive, hang up.&lt;/p&gt;

&lt;p&gt;On the flip side of this, you will get some people who are thoroughly nice, but still don’t know their stuff.  An unfortunate downside of this industry is that anyone with a text editor and a copy of HTML for Dummies will call themselves a web developer.  Don’t make this person feel bad or get angry with them, they obviously have a desire to learn and work in our industry, and that should be fostered and encouraged.&lt;/p&gt;

&lt;p&gt;It will quickly become apparent when you have one of these people on the phone.  Try to end the interview as quickly as possible as ultimately, you’re not a charity and you need to get on.  You can say something along the lines of “that’s all the questions I have for you today, I’ll be in touch shortly to let you know how you got on”.  Move them to the rejected pile and politely inform them their skills aren’t what you’re looking for, or aren’t at the right level at the moment and you can’t take their application any further.  If you’re feeling super nice, give them some links they can read to brush up on the areas they were weak in.&lt;/p&gt;

&lt;h2 id=&quot;face-to-face&quot;&gt;Face-to-Face&lt;/h2&gt;

&lt;p&gt;Now you’ve conducted all of your phone interviews you should have a pretty solid grasp of where each of the candidates sits in terms of your skills requirements, you might even have a list of ones that impressed you the most.  Now is the time to ask them in for a face-to-face interview and technical test.  You could try to schedule all of the interviews for one day, or over a series of days, but believe me, it gets very boring very quickly.  I would recommend no more than 2 interviews in a day unless you have a specific reason to do more.&lt;/p&gt;

&lt;p&gt;When arranging a time for interviews, I am in two minds, and haven’t developed a preference for AM or PM interviews.  A lot of the more “corporate” jobs I’ve interviewed for tend to be AM interviews, usually starting between 8 and 9:15 (even if the company normally starts at 9).  I’ve never had an interview for a “corporate” job start as late as 9.30.&lt;/p&gt;

&lt;p&gt;My own experience of corporate types suggests this is some sort of power play.  I’ve attended enough breakfast meetings to know they are &lt;em&gt;always&lt;/em&gt; unnecessary, and the person insisting on them usually has some sort of complex.  The easy way for a candidate to gain the upper-hand is to show up before the interviewer, but really, who wants to be playing power games before they even have the job?&lt;/p&gt;

&lt;p&gt;On the flip side, a PM interview is after lunch, and you’ll likely tire a lot quicker, but it gives the candidate plenty of time to find your premises, avoid rush-hour traffic, etc. so they’re more likely to show up on time (or early) by default.  Also, in my mind it’s easier to take an afternoon off work than a morning.  I don’t really know why.&lt;/p&gt;

&lt;p&gt;Personally, I aim for one interview around 11AM and another around 1.30PM, and that’s it.  Assuming an interview lasts at most 3 hours, you’ll have 30 minutes between the two to grab some lunch.&lt;/p&gt;

&lt;p&gt;Finally, make sure you are either flexible on the date, or you give the candidate enough notice to book the time off from their current job.&lt;/p&gt;

&lt;h3 id=&quot;technical-test&quot;&gt;Technical Test&lt;/h3&gt;

&lt;p&gt;Most jobs I’ve interviewed for administer the technical test after the panel interview.  I think that’s backwards.  I much prefer to administer the technical test &lt;em&gt;first&lt;/em&gt;.  This means I can mark it whilst the candidate takes a rest before the panel interview begins.  That way I know not to waste too much time on someone who doesn’t have the skills.  Either way, you absolutely must give the candidate a technical test.&lt;/p&gt;

&lt;p&gt;The technical test should have more difficult questions than the telephone interview, you want to push them to the limits and expect them to get some questions wrong.  Get your current team to sit the test (under test conditions) before you give it to a candidate, that way you know if it’s too hard or too easy.&lt;/p&gt;

&lt;p&gt;Make sure you administer the test on a computer, with an IDE and a test environment setup and working, but without an internet connection.  You’re most likely not looking for someone that can only copy &amp;amp; paste from google or stackoverflow, and the IDE should remind them of the correct function names and parameter orders if required.&lt;/p&gt;

&lt;p&gt;When composing the test, you want it to cover all of your core skills and your desirable skills.  Give them same test to everyone, whether they listed all the skills or not, at this stage we are getting close to making a decision, so we need to be able to differentiate between candidates on a level playing field.  There are two methods of creating a technical test for an interview:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ask Specific Questions&lt;/li&gt;
  &lt;li&gt;Build a simple app&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;questions&quot;&gt;Questions&lt;/h4&gt;

&lt;p&gt;If you’re going down the questions route, break the test down so you have one section per skill.  Going back to our example above, that would mean having a section on PHP, one on HTML, one on CSS, and one on OOP.  Score each section out of 10.  That means you can break down questions into two questions worth 5 points, 5 questions worth 2 points, 2 x 3’s and a 4, 3 x 2’s and a 4 etc.  You can tailor this depending on what you feel is most relevant for the skill level you’re recruiting for.&lt;/p&gt;

&lt;p&gt;For each question write down a marking scheme.  Don’t just write down the correct answer.  You need to specifically say: This question is worth 2 points, I will give 1 point for &lt;em&gt;this&lt;/em&gt;, and 1 point for &lt;em&gt;this&lt;/em&gt; or &lt;em&gt;this&lt;/em&gt;.  I like to make my questions more difficult as they go on.&lt;/p&gt;

&lt;p&gt;A section on PHP might look like this (I’ll only do two questions here, but you’d want 3 in the real test to make this section worth a total of 10 points):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Write a function to return the area of a circle given the radius.  You can get the value of PI from the PHP function  &lt;code&gt;pi()&lt;/code&gt;. (2 Marks)&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;0.5 marks for correct use of &lt;code&gt;function() {}&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;0.5 marks for well named variables and function e.g. passing in &lt;code&gt;$radius&lt;/code&gt; instead of &lt;code&gt;$r&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;0.5 marks for correct behaviour&lt;/li&gt;
      &lt;li&gt;0.5 marks for use of &lt;code&gt;^ 2&lt;/code&gt; instead of &lt;code&gt;$radius * $radius&lt;/code&gt; or a single line function vs multiple lines&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Example:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; function calculate_area($r) {
     $area = pi() * $r ^ 2;
     return $area;
 }
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;This scores 0.5 for correctly using &lt;code&gt;function() {...}&lt;/code&gt;, 0.5 for correct behaviour, and 0.5 for using &lt;code&gt;^2&lt;/code&gt; which scores a total of 1.5/2.&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; function circleArea($radius) {
     return pi() * $radius * $radius;
 }
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;This scores 2/2 as even though they didn’t know about or didn’t use the power-of, they wrote a more succinct function with better variable naming.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write a PHP function to output a nested HTML list of fruits given the following array (3 marks):&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; array(
     &#39;apples&#39; =&amp;gt; array(
         &#39;Granny Smith&#39;,
         &#39;Golden Delicious&#39;,
         &#39;Red Delicious&#39;
     ),
     &#39;bananas&#39;,
     &#39;grapes&#39;,
     &#39;oranges&#39; =&amp;gt; array(
         &#39;Valencia&#39;
     ),
     &#39;pears&#39; =&amp;gt; array(
         &#39;Conference&#39;
     )
 )
&lt;/code&gt;&lt;/pre&gt;

    &lt;ol&gt;
      &lt;li&gt;1 mark for correct functionality&lt;/li&gt;
      &lt;li&gt;1 mark for correct use of recursion&lt;/li&gt;
      &lt;li&gt;0.5 marks for well named variables&lt;/li&gt;
      &lt;li&gt;0.5 marks for style (grammar, indentation, variable naming, verbosity, etc.)&lt;/li&gt;
      &lt;li&gt;Give no points for this question if they use two separate functions&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Example:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; function print_fruits($fruits) {
     $output = &#39;&amp;lt;ul&amp;gt;&#39;;
     foreach ($fruits as $index =&amp;gt; $value) {
         $output .= &#39;&amp;lt;li&amp;gt;&#39;;

         if (is_array($value)) {
             $output .= $index;
             $output .= print_fruits($fruits);
         } else {
             $output .= $value;
         }

         $output .= &#39;&amp;lt;/li&amp;gt;&#39;;
     }

     $output .= &#39;&amp;lt;/ul&amp;gt;&#39;;

     return $output;
 }
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;This scores 0.5 for correct functionality, it is correct but it returns the list and we asked for them to output it.  It scores 1 for the correct use of recursion, 0.5 for style as it’s fairly succinct, logical, well indented, easy to follow etc. giving a total of 2.5 marks out of 3.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can see here how we’re outlining specifically where you’re going to award marks and what for.  Some of it can be subjective such as &lt;em&gt;0.5 marks for style&lt;/em&gt;, but I wouldn’t award a lot of marks like that.  It’s important here that we’re consistent so that someone who didn’t write the test would be able to use your marking scheme to mark the test just as you would have done.&lt;/p&gt;

&lt;h4 id=&quot;build-an-app&quot;&gt;Build an App&lt;/h4&gt;

&lt;p&gt;The “build an app” type tests are much more straight-forward to create, but much more difficult to mark.  Once the functionality is correct, it’s down to style, but you will also have to appreciate that the candidate will be nervous, and under time constraints, it probably won’t be their best work, give them some leeway.  After that you can only really score on style, naming conventions etc.  It would probably be really useful if you wrote some unit-tests for the candidate to code against, and for yourself when marking the test.&lt;/p&gt;

&lt;p&gt;Some examples of this type of test would be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In 30 minutes write an application that allows you to add a list of songs to a MySQL database, list those songs, and then edit them&lt;/li&gt;
  &lt;li&gt;Given this this rudimentary blog application [already written by you], in 30 minutes add anonymous commenting functionality to the posts&lt;/li&gt;
  &lt;li&gt;In 45 minutes write a simple login script that uses PHP Sessions to secure a number of pages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have sat a few of this type of test, but cannot say much more about the process that goes on behind it, as it’s not a type of test I’ve ever set for a candidate.&lt;/p&gt;

&lt;h3 id=&quot;panel&quot;&gt;Panel&lt;/h3&gt;

&lt;p&gt;By the time we get to the panel interview you should have a pretty good idea of the technical ability of the candidate.  At this point, we want to discern more about their personality and ability to communicate technical ideas and concepts with you and any non-technical colleagues or users.&lt;/p&gt;

&lt;p&gt;For the panel interview, we usually have the candidates potential direct line manager, a senior technical person from the team (that’s me), and a senior technical person from outside of the department (for impartiality).  For senior or managerial roles we also have the director of the company sit in, in your instance this may or may not be the candidates potential line manager, or it might be that your company is too large for the director to worry about such things.&lt;/p&gt;

&lt;p&gt;We don’t like to have too many people present as it can be intimidating, so try to keep it to a bear minimum.  That being said, a competent candidate shouldn’t have any problem answering questions from a panel of 3-4 people.&lt;/p&gt;

&lt;p&gt;With the questions themselves, write them down and decide them beforehand.  Ask everyone the same questions.  Plan to ask about 30 minutes of questions and make them open ended.  Split the interview into a few sections.  We use (roughly):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Business &amp;amp; Logic Questions&lt;/p&gt;

    &lt;p&gt;These questions are NOT the typical “Chicken Crossing” type questions.  Those type of questions are pointless and don’t show anything.  These should be more along the lines of experience and procedure checking.&lt;/p&gt;

    &lt;p&gt;E.g. “You come in to work one morning and find a stack of post-it’s on your desk saying that an application you’re responsible for is broken, what do you do?”&lt;/p&gt;

    &lt;p&gt;This is quite a telling question as people always answer it differently.  Some people go straight for error logs, others go straight to users for more detail.&lt;/p&gt;

    &lt;p&gt;Most people will answer it with some kind of acceptable answer, but the key thing we’re looking for is escalation i.e. inform your superior and keep them informed so appropriate action can be taken with regards to customers/users.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Personality Questions&lt;/p&gt;

    &lt;p&gt;Depending on the seniority of the role we’re hiring for these may vary from (paraphrasing from memory here) “How will you earn the respect of your peers” to “If someone on your team insists on doing something you know to be inefficient or wrong, what will you do?”  With the former we’re looking for something non-offensive, and with the later, what we’re really looking for is for them to try to perused their team member with logic, but if that fails ultimately use their seniority and say something like “no, do it my way” (but friendlier).&lt;/p&gt;

    &lt;p&gt;We usually include something in this section on managing change too, as users are pretty much resistant to change wherever you work.  Something along the lines of “A new feature you’re introducing will improve the efficiency of 90% of your users, but increase workload for 5%, how do you go about explaining the benefits of the change to that 5%?”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Technical Questions&lt;/p&gt;

    &lt;p&gt;The candidate has already had enough technical questions, so keep these relatively light.  That said - they should be detailed enough for the candidate to talk for 1-2 minutes on the subject.  What we’re really trying to find out here is if they are effective communicators.  This really helps if there are non-technical people on the panel and &lt;em&gt;they&lt;/em&gt; understand what the candidate is saying.  A good example would be something like “Explain the components of a standard MVC framework” or “What steps would you take to optimise a slow performing query?”.&lt;/p&gt;

    &lt;p&gt;Although we’re not &lt;em&gt;really&lt;/em&gt; testing their technical ability here, we still kind of are, so make sure these questions are sufficiently difficult for the level you’re recruiting for, but still light, i.e. something someone of that level should know inside out.  With that in mind, they can still screw themselves over here (see example below).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have all of your questions, print off a sheet with the questions on.  Include an area for each question with key words or phrases you’re looking for in the answer, an area for you to write notes about their answer, and then an area to grade their answer on a scale of 1-5.&lt;/p&gt;

&lt;p&gt;Don’t be afraid to go off on a slight tangent or deviate from the questions if you feel the candidate needs pushing to explain their answer further.  For example (this is taken from a real interview answer):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&lt;/strong&gt;: [Original question] If a front-end website is performing slowly, what would you do to speed it up?&lt;br /&gt;
&lt;strong&gt;Candidate&lt;/strong&gt;: I’d load the page content via AJAX to minimise the number of requests and make the page appear as though it’s loading faster.&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: [Pushing the candidate] Okay, can you see any potential downsides to that for a front-end website?&lt;br /&gt;
&lt;strong&gt;Candidate&lt;/strong&gt;: No, it should make all the pages load faster&lt;br /&gt;
&lt;strong&gt;You&lt;/strong&gt;: [Last attempt to get a better answer] What about SEO or accessibility, what effect would loading the pages via AJAX have on those?&lt;br /&gt;
&lt;strong&gt;Candidate&lt;/strong&gt;: It wouldn’t have any effect.  &lt;/p&gt;

&lt;p&gt;Needless to say, this candidate didn’t get an offer, but your job is not to try and trick the candidate or catch them out.  They may have the knowledge and need a little help extracting it.&lt;/p&gt;

&lt;p&gt;Scoring a candidates answer on a scale of 1-5 will help you if you’re trying to decide between two equally qualified candidates.  If you do the scoring as you go along, and get the rest of the panel to do the same you can average the panels scores and it may show a preference for one of the candidates.&lt;/p&gt;

&lt;p&gt;At the end of the panel interview, thank the candidate for their time and ask them if they have any questions for you.  Allow 5-10 minutes to answer their questions, although most candidates I’ve interviewed only have 1 or 2 very minor questions.&lt;/p&gt;

&lt;h3 id=&quot;finally&quot;&gt;Finally&lt;/h3&gt;

&lt;p&gt;Now you should have enough information about your candidates to make an informed, logical decision.  If you’re still struggling, share it with your team, or the team that the candidate will be working with.  If anyone has any reservations then don’t hire that person, otherwise, it’s time to make them an offer.&lt;/p&gt;

&lt;p&gt;For those people that you don’t make an offer, be honest with them as to why, you won’t do them any favours by lying or sparing their feelings.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This post ended up being pretty long, so in summary:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write down the specific requirements for the job, do not compromise on these&lt;/li&gt;
  &lt;li&gt;Advertise the position in as many places as possible&lt;/li&gt;
  &lt;li&gt;Track your C.V.s in a central location and record their progress&lt;/li&gt;
  &lt;li&gt;Pre-qualify candidates with a telephone interview&lt;/li&gt;
  &lt;li&gt;Invite successful candidates for a face-to-face&lt;/li&gt;
  &lt;li&gt;Give them a technical test, break it down into logical sections that test all of the requirements, allow 30 minutes&lt;/li&gt;
  &lt;li&gt;Be consistent with your panel questions, grade on a scale&lt;/li&gt;
  &lt;li&gt;If you or anyone on the panel/team has doubts, move on&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Be mindful of any laws or legislation related to recruitment in your field or industry&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Questions and comments can go on &lt;a href=&quot;https://twitter.com/sixdaysad&quot;&gt;twitter&lt;/a&gt;.  Let me know what you think!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.joelonsoftware.com/articles/GuerrillaInterviewing3.html&quot;&gt;The Guerrilla Guide to Interviewing&lt;/a&gt; (Joel on Software)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.calevans.com/nerd-herding/&quot;&gt;Nerd Herding&lt;/a&gt; (Cal Evans)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codinghorror.com/blog/2005/03/on-interviewing-programmers.html&quot;&gt;On Interviewing Programmers&lt;/a&gt; (Jeff Atwood/CodingHorror)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/02/12/mark-old-posts-liquid-tag-jekyll</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/02/12/mark-old-posts-liquid-tag-jekyll.html"/>
    <title>Mark Old Posts as Deprecated in Jekyll</title>
    <published>2013-02-12T00:00:00+00:00</published>
    <updated>2013-02-12T00:00:00+00:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;This blog is built with jekyll&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, which is a static blogging platform from the guys at github, and is also the engine behind github pages&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, where this blog is hosted.&lt;/p&gt;

&lt;p&gt;I have written a simple plugin to add a LiquidTag&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; to render a warning for all posts that reach a certain age.  This is particularly useful for technical blogs such as this one, where the things I’m writing about can move on pretty quickly.  The way something was done a year ago isn’t necessarily the way I recommend doing it today.&lt;/p&gt;

&lt;h2 id=&quot;using-the-plugin&quot;&gt;Using the Plugin&lt;/h2&gt;

&lt;p&gt;If you have a Gemfile, add the &lt;code&gt;chronic&lt;/code&gt; gem and run &lt;code&gt;bundle install&lt;/code&gt;. If you don’t have a Gemfile, install the gem with &lt;code&gt;gem install chronic --no-ri --no-rdoc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can add the &lt;code&gt;mark_old_post_tag.rb&lt;/code&gt; file to your &lt;code&gt;_plugins&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Mark Old Posts Liquid Tag&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# A liquid tag for Jekyll sites to mark old posts as deprecated&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Usage:&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#     {% mark_old_posts &amp;lt;time_ago_in_words|date&amp;gt; %}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Example:&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#     {% mark_old_posts 6 months ago %}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#     {% mark_old_posts 1 year ago %}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#     {% mark_old_posts 01/01/2012 %}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Requires:&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#     chronic gem: sudo gem install chronic --no-ri --no-rdoc&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Unless required by applicable law or agreed to in writing, software&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# See the License for the specific language governing permissions and&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# limitations under the License.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-21&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-22&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# @author Adam Brett &amp;lt;adam@adambrett.co.uk&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-23&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# @license BSD-3-Clause&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-24&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# @version 0.1&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-25&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# @link http://gist.github.com/adambrett/&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-26&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# @link http://adamcod.es/2013/02/12/mark-old-posts-liquid-tag-jekyll.html&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-27&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-28&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-29&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;chronic&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-30&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-31&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-32&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MarkOldPostTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Tag&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-33&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cut_off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-34&quot;&gt;      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-35&quot;&gt;      &lt;span class=&quot;vi&quot;&gt;@cut_off_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Chronic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cut_off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-36&quot;&gt;      &lt;span class=&quot;vi&quot;&gt;@cut_off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cut_off&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-37&quot;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-38&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-39&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-40&quot;&gt;      &lt;span class=&quot;n&quot;&gt;post_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-41&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-42&quot;&gt;      &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@cut_off_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-43&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-44&quot;&gt;      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-45&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-46&quot;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mark_old_post&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-47&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-48&quot;&gt;      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-49&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-50&quot;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@cut_off_date&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-51&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-52&quot;&gt;      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-53&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-54&quot;&gt;      &lt;span class=&quot;n&quot;&gt;html_output_for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-55&quot;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-56&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-57&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;html_output_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-58&quot;&gt;      &lt;span class=&quot;n&quot;&gt;post_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%A, %B %d, %Y&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-59&quot;&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-60&quot;&gt;&lt;span class=&quot;sh&quot;&gt;&amp;lt;div class=&amp;quot;alert alert-warning&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-61&quot;&gt;&lt;span class=&quot;sh&quot;&gt;  &amp;lt;h4&amp;gt;Out Of Date Warning&amp;lt;/h4&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-62&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-63&quot;&gt;&lt;span class=&quot;sh&quot;&gt;  &amp;lt;p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-64&quot;&gt;&lt;span class=&quot;sh&quot;&gt;    This article was published on &amp;lt;strong&amp;gt;#{post_date}&amp;lt;/strong&amp;gt; which was&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-65&quot;&gt;&lt;span class=&quot;sh&quot;&gt;    &amp;lt;strong&amp;gt;more than #{@cut_off}&amp;lt;/strong&amp;gt;, this means the content may be&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-66&quot;&gt;&lt;span class=&quot;sh&quot;&gt;    out of date or no longer relevant.  You should &amp;lt;strong&amp;gt;verify that the&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-67&quot;&gt;&lt;span class=&quot;sh&quot;&gt;    technical information in this article is still current&amp;lt;/strong&amp;gt; before&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-68&quot;&gt;&lt;span class=&quot;sh&quot;&gt;    relying upon it for your own purposes.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-69&quot;&gt;&lt;span class=&quot;sh&quot;&gt;  &amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-70&quot;&gt;&lt;span class=&quot;sh&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-71&quot;&gt;&lt;span class=&quot;no&quot;&gt;      HTML&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-72&quot;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-73&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-74&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-75&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-76&quot;&gt;&lt;span class=&quot;ss&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;mark_old_posts&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:MarkOldPostTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s not very customisable at the moment.  At some point in the future I’d like to allow you to specify the HTML markup without having to modify the plugin itself, but for now you have to modify the output of the &lt;code&gt;html_output_for&lt;/code&gt; method if you want to change anything.&lt;/p&gt;

&lt;p&gt;To render the warning message, add the tag: &lt;code&gt;{% mark_old_posts &amp;lt;time ago in words|date &amp;gt;%}&lt;/code&gt; wherever you want the HTML to be output.  You can specify any sort of date string that &lt;code&gt;chronic&lt;/code&gt; will understand here, such as &lt;code&gt;6 months ago&lt;/code&gt;, &lt;code&gt;12 months ago&lt;/code&gt;, or an actual date such as &lt;code&gt;01/01/2012&lt;/code&gt;.  You can see the example for this site on github&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;excluding-postspages&quot;&gt;Excluding Posts/Pages&lt;/h2&gt;

&lt;p&gt;If you don’t want to deprecate an old post, set &lt;code&gt;mark_old_post: false&lt;/code&gt; in the YFM for the post or page and the plugin won’t render anything.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://jekyllrb.com/&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://pages.github.com/&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;http://liquidmarkup.org/&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;https://github.com/adambrett/adamcod.es/blob/57014bd1d57ce765ec6b674796abe9bfc8f93a44/_includes/article.html#L8&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/01/24/mimicking-the-recently-not-approved-property-get-set-syntax</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/01/24/mimicking-the-recently-not-approved-property-get-set-syntax.html"/>
    <title>Mimicking the recently not approved Property Get/Set Syntax</title>
    <published>2013-01-24T00:00:00+00:00</published>
    <updated>2013-01-24T00:00:00+00:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;There was a proposal&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; for a new getter and setter syntax that would have enabled you to write code like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Code sample indicating the terminology&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimePeriod&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- Traditional Property&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Hours&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- Guarded Property&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;        &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- Accessor, more specifically a getter&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;        &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- Accessor, more specifically a setter&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;        &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- Accessor, more specifically an issetter&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;        &lt;span class=&quot;nb&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- Accessor, more specifically an unsetter&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The benefit here, is that accessing the properties directly on an instantiated object like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt; &lt;span class=&quot;c1&quot;&gt;// Accessing the property is the same as accessing a class member&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt; &lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TimePeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt; &lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Hours&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Stored as 43200&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Outputs 12&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Would result in the getters and setters being called transparently.  Neat!  There are plenty of use-cases for this, and it would drastically reduce the amount of code in a lot of libraries and frameworks that are simple getters and setters, but unfortunately a large enough minority of core-contributors disagreed, or weren’t happy with the syntax, or the implementation (or something), and the proposal failed to pass, so it won’t be making it into the language. Not so neat.&lt;/p&gt;

&lt;p&gt;Fortunately, there is a way to replicate this functionality (albeit with less syntactic sugar) using PHP’s existing Magic Methods, and when combined with PHP 5.4’s traits&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, we get something pretty close.  Consider the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Accessors&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;        &lt;span class=&quot;nv&quot;&gt;$getter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;get&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$getter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$getter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;        &lt;span class=&quot;nv&quot;&gt;$setter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;set&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$setter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$setter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-21&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Code sample indicating the terminology&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-22&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimePeriod&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-23&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-24&quot;&gt;    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Accessors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-25&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-26&quot;&gt;    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- Traditional Property&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-27&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-28&quot;&gt;    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-29&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-30&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-31&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-32&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-33&quot;&gt;    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-34&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-35&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-36&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-37&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now if we run our test code again:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt; &lt;span class=&quot;c1&quot;&gt;// Accessing the property is the same as accessing a class member&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt; &lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TimePeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt; &lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Hours&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Stored as 43200&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Outputs 12&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We get the correct output!  For PHP 5.3 we could add the magic methods directly into the class that wants to use them, or create a base class and extend everything we want to have access to the magic getter/setters from that, but that feels messy, traits seem like the cleanest way to do this.&lt;/p&gt;

&lt;p&gt;If we add &lt;code&gt;__isset&lt;/code&gt; and &lt;code&gt;__unset&lt;/code&gt; to the &lt;code&gt;Accessor&lt;/code&gt; trait, we can replicate that functionality too:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Accessors&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;        &lt;span class=&quot;nv&quot;&gt;$issetter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;isset&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$issetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$issetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;        &lt;span class=&quot;nv&quot;&gt;$unsetter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;set&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unsetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$unsetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-21&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Code sample indicating the terminology&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-22&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimePeriod&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-23&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-24&quot;&gt;    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Accessors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-25&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-26&quot;&gt;    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- Traditional Property&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-27&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-28&quot;&gt;    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;issetHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-29&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-30&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-31&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-32&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-33&quot;&gt;    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unsetHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-34&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-35&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-36&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-37&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously this is a lot more verbose than the original RFC, but it does provide a way to mimic some of its functionality.  If you want to use it, you can see the full trait in &lt;a href=&quot;https://gist.github.com/4621373#file-trait-full-php&quot;&gt;this gist&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;https://wiki.php.net/rfc/propertygetsetsyntax-v1.2&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://php.net/manual/en/language.oop5.traits.php&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/01/15/vagrant-is-easy-chef-is-hard-part2</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/01/15/vagrant-is-easy-chef-is-hard-part2.html"/>
    <title>Vagrant is easy - Chef is hard (Part 2).</title>
    <published>2013-01-15T00:00:00+00:00</published>
    <updated>2013-01-15T00:00:00+00:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;This is part 2 of a 2 part quick-start to using Vagrant&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and Chef&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; to speed up and simplify your development environment.  If you haven’t read the first part, and aren’t already familiar with Vagrant go to &lt;a href=&quot;http://adamcodes/2013/01/15/vagrant-is-easy-chef-is-hard.html&quot;&gt;part 1 here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In part 1 we covered the key commands and config settings you need to get vagrant up and running quickly with little-to-no fuss.  But that was the easy part.  Now comes the hard part.  Chef.&lt;/p&gt;

&lt;h2 id=&quot;chef&quot;&gt;Chef&lt;/h2&gt;

&lt;p&gt;The reason Chef is so hard, and the reason it has such as steep learning curve, is that every single blog post or tutorial, and even the chef manual itself, all deal with low-level Chef.  That is not what we want.  As a developer I have a hundred things to do and no time to do them.  I don’t care about low-level stuff.  I want stuff that Just Works.  So here we go.  This is the least amount of knowledge you need to get a lamp stack up and running on Vagrant.  As a side effect of that, you’ll actually learn quite a bit of Chef along the way.&lt;/p&gt;

&lt;h3 id=&quot;key-points&quot;&gt;Key Points&lt;/h3&gt;

&lt;p&gt;Before we start, there are a couple of key definitions you’re going to need to learn to make your life simpler.  They aren’t difficult, and I’ll do my best to distil them down to a basic level.&lt;/p&gt;

&lt;h4 id=&quot;cookbooks&quot;&gt;Cookbooks&lt;/h4&gt;

&lt;p&gt;Installing things (apache, mysql, php etc) is done by something called Cookbooks.  Cookbooks are a collection of Templates and &lt;em&gt;Recipes&lt;/em&gt; (and a few other things we don’t care about right now) that  tell Chef how to install something.&lt;/p&gt;

&lt;h5 id=&quot;recipes&quot;&gt;Recipes&lt;/h5&gt;

&lt;p&gt;At a basic level, a &lt;em&gt;Recipe&lt;/em&gt; is a ruby file that calls a bunch of Chef functions to install something.&lt;/p&gt;

&lt;h5 id=&quot;templates&quot;&gt;Templates&lt;/h5&gt;

&lt;p&gt;A template is much like a PHP app template with variable replacements, loops etc, but for system config files.  Think v-hosts, httpd.conf, php.ini etc.&lt;/p&gt;

&lt;h5 id=&quot;lwrp&quot;&gt;LWRP&lt;/h5&gt;

&lt;p&gt;You will see LWRPs mentioned a lot and it’s not immediately obvious what they are.  It stands for &lt;em&gt;Light Weight Resource Providers&lt;/em&gt;.  But really they’re functions that do something Chefy (like install a Pecl Module/PEAR Library in the PHP Cookbook).  They should just call them that.  You don’t really need to use these yet, but I figured you’d want to know what they are when you see them mentioned elsewhere.&lt;/p&gt;

&lt;h4 id=&quot;chef-server-vs-chef-solo&quot;&gt;Chef Server vs Chef Solo&lt;/h4&gt;

&lt;p&gt;Chef comes in two flavours.  Chef Solo and Chef Server.  Chef is always run on the guest or machine being provisioned, not your own machine or workstation.  That means it needs to have the cookbooks copied across in order for it to know where they are.  Chef Server takes care of this for you (the copying across), as well as managing a central repository of your cookbooks.&lt;/p&gt;

&lt;p&gt;Chef Server can also do some other fancy stuff (such as provisioning new EC2 instances for you), but unless you’re using it for a live server or professional dev-ops (and we’re not), forget about it.  We can copy the cookbooks across ourselves (or in reality vagrant will).&lt;/p&gt;

&lt;p&gt;One final point of note: Opscode (the company behaind chef) will host a Chef server for you, or you can do it yourself.  It would appear Chef can provision it’s own Chef Server, but I’ve not tried.&lt;/p&gt;

&lt;h4 id=&quot;roles&quot;&gt;Roles&lt;/h4&gt;

&lt;p&gt;A role is simply a type of server.  E.g. If you have a distributed architecture with a load balancer, 2x web servers and 2x database servers, your roles would be “Load Balancer”, “Web Server”, and “Database Server”.  That’s a role.&lt;/p&gt;

&lt;p&gt;A role is not limiting, in reality it’s a name given to a collection of cookbooks you want to run.  E.g. You specify that your webserver roll should run the apache, php, and mysql cookbooks.  The cookbooks that a particular role should run is called a “Run List” in Chef, that’s because the name of the Chef function you pass the cookbooks to run to is &lt;code&gt;run_list&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;extra-credit&quot;&gt;Extra Credit&lt;/h4&gt;

&lt;p&gt;You don’t need to know about this, but I will cover it here for completeness.  Chef also has the concepts of “Nodes” and “Data-Bags”.  I haven’t used these features, but my understanding is that a “Node” is an instance of a Role.  So you have your 2x webservers, each using the “Web Server” role.  Each one of those is a Node.&lt;/p&gt;

&lt;p&gt;From my understanding, “Data-Bags” provide additional data to your Recipes, this could be a list of admins or databases to create, or something similar.  I haven’t used them, so I’m not familiar with them.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;Now the real quickstart.  You need a directory to hold your Chef related stuff, for simplicity when updating cookbooks, you need that directory managed with git.  This is fairly essential as managing updates to your cookbooks by hand would be a nightmare.  From your application’s root directory run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ../
mkdir -p chef/{cookbooks,data_bags,nodes,roles,site-cookbooks}
cd chef
git init .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s our basic directory structure.  Done.  Next we need to add some cookbooks.  Thankfully, there are a ton of them available on Github&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; that we can use.  We don’t need to write our own (most tutorials focus on writing your own… I don’t know why).&lt;/p&gt;

&lt;p&gt;Now think about what you would normally do when building a new ubuntu VM.  First, you sort out apt to make sure everything is up to date.  Cookbooks live in, unsurprisingly, the cookbooks directory, so lets add the apt cookbook to take care of apt for us:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/opscode-cookbooks/apt.git cookbooks/apt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, now we want apache2 up and running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/opscode-cookbooks/apache2.git cookbooks/apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom. Done.  MySQL?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/opscode-cookbooks/mysql.git cookbooks/mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/opscode-cookbooks/php.git cookbooks/php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok.  We have our cookbooks.  Now we need to add a role so Chef knows which ones to run (you could add a whole bunch of cookbooks here, then in the roll only run a select few).&lt;/p&gt;

&lt;p&gt;So, create &lt;code&gt;roles/vagrant-test-box.rb&lt;/code&gt; and add the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Name of the role should match the name of the file&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;vagrant-test-box&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Run list function we mentioned earlier&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apt]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s it.  Done.  Now lets briefly go back to the Vagrantfile we created in part1:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Enable provisioning with chef solo, specifying a cookbooks path, roles&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# path, and data_bags path (all relative to this Vagrantfile), and adding&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# some recipes and/or roles.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;provision&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:chef_solo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;roles_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;../chef/roles&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;    &lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookbooks_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../chef/site-cookbooks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;../chef/cookbooks&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    &lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_role&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;vagrant-test-box&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See that bit at the bottom.  That’s how vagrant knows to use Chef, and where to find your cookbooks.  If you’ve stored your cookbooks somewhere other than where I’ve suggested, update the paths here, otherwise, let’s update the role to “vagrant-test-box”, as that’s what we just created, and then go back to your application root and run &lt;code&gt;vagrant up&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Everything should run successfully, you’ll see it all whizzing past as Chef installs it, and it will drop you back to a shell prompt with the VM running and provisioned.  Awesome.  You can have a quick test by visiting 192.168.33.33 in your browser, or www.example.vm if you installed the vagrant-hostmaster plugin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/successful-chef-provision.png&quot; alt=&quot;Successful Chef Provision&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets look at what was created in a bit more detail.  Run &lt;code&gt;vagrant ssh&lt;/code&gt; to login to the VM.  Now type &lt;code&gt;mysql -u root -p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Uh oh.  Two problems.  First, we never set a password for the MySQL server, so we can’t login, second, if we run that command without a password, we get the error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/var/run/mysqld/mysqld.sock&#39; (2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySQL Server isn’t installed?? Why??  Lets take a look at the cookbook.&lt;/p&gt;

&lt;p&gt;When you add a cookbook to your run list as we did above, Chef will run the default recipe, which can be found in &lt;code&gt;recipes/default.rb&lt;/code&gt;.  So let’s take a look at &lt;code&gt;cookbooks/mysql/recipes/default.rb&lt;/code&gt; and see what’s going on.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mysql::client&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Right.  We installed the MySQL Client, but not MySQL Server.  The astute amongst you will have spotted another file in &lt;code&gt;cookbooks/mysql/recipes&lt;/code&gt; called &lt;code&gt;server.rb&lt;/code&gt;.  A cookbook can contain multiple recipes, and by default the MySQL cookbook only installs the MySQL Client, to install the server we also need to add the MySQL Server recipe to our run list.  You specify a recipe inside a cookbook other than the default using the &lt;code&gt;::&lt;/code&gt; syntax you can see above.  Lets modify our &lt;code&gt;vagrant-test-box&lt;/code&gt; role to look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Name of the role should match the name of the file&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;vagrant-test-box&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Run list function we mentioned earlier&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apt]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql::server]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We’ve left the default MySQL recipe in there as we’re going to need the MySQL Client to administer our server.&lt;/p&gt;

&lt;p&gt;Now run &lt;code&gt;vagrant provision&lt;/code&gt; to run Chef again, and let’s see what happens.&lt;/p&gt;

&lt;p&gt;You got an error? Good.  What you’ve just come across is the complete disaster that is Chef error messages.  Totally useless.  What it’s actually complaining about is a missing constant: &lt;code&gt;Opscode::OpenSSL&lt;/code&gt;.  This is actually a symptom of something else.  Some cookbooks and recipes have dependencies on other cookbooks and recipes.  Specifically in this instance, the &lt;code&gt;mysql::server&lt;/code&gt; recipe depends on the &lt;code&gt;openssl&lt;/code&gt; cookbook.&lt;/p&gt;

&lt;p&gt;Fortunately for us, the cookbooks in the opscode GitHub repository have fairly good README’s that list their dependencies fairly well.  Let’s take a look at the cookbooks we’ve included so far and see if they have any other dependencies we’ve missed.  Go ahead, I’ll wait.&lt;/p&gt;

&lt;p&gt;Great, It looks like only &lt;code&gt;mysql::server&lt;/code&gt; has any dependencies.  Apache2 has some dependencies if you’re using RHEL or CentOS, and PHP does if you’re going to build it from source, but we’re not so we can just add the missing openssl cookbook and get on with it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ../chef
git submodule add https://github.com/opscode-cookbooks/openssl.git cookbooks/openssl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s add it to our run list before &lt;code&gt;mysql::server&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apt]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[openssl]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql::server]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I’ve added it to just after apt for neatness.  You can add it anywhere you want before &lt;code&gt;mysql::server&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s try again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant provision
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh no… another cryptic error.  The key line here is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FATAL: You must set node[&#39;mysql&#39;][&#39;server_debian_password&#39;], node[&#39;mysql&#39;][&#39;server_root_password&#39;], node[&#39;mysql&#39;][&#39;server_repl_password&#39;] in chef-solo mode. For more information, see https://github.com/opscode-cookbooks/mysql#chef-solo-note
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We forgot to set our root password so we can login to the server, and Chef knows it, so it won’t let us proceed without it.  Now we need to learn about &lt;code&gt;override_attributes&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;n&quot;&gt;override_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;mysql&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;server_root_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iloverandompasswordsbutthiswilldo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;server_repl_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iloverandompasswordsbutthiswilldo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;server_debian_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iloverandompasswordsbutthiswilldo&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not massively scary.  Put this in your &lt;code&gt;vagrant-test-box.rb&lt;/code&gt; role before your run list.  This function allows you to override some defaults setup in the cookbooks on a per-role basis.  Nothing too difficult, it is again often documented in the cookbook’s README, or is fairly easy to find by searching the cookbooks’s templates or recipes for things like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;apache&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;log_dir&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s a fairly good indication we can overwrite that attribute in our role by adding the key to our override attributes function call:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;n&quot;&gt;override_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;apache&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;log_dir&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/srv/logs&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# new attribute overridden&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;mysql&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;server_root_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iloverandompasswordsbutthiswilldo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;server_repl_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iloverandompasswordsbutthiswilldo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;server_debian_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iloverandompasswordsbutthiswilldo&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ok, don’t add that to your role for real, as we haven’t created that directory so it will cause an error.&lt;/p&gt;

&lt;p&gt;Now your role should look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Name of the role should match the name of the file&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;vagrant-test-box&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;n&quot;&gt;override_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;mysql&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;server_root_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iloverandompasswordsbutthiswilldo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;server_repl_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iloverandompasswordsbutthiswilldo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;server_debian_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iloverandompasswordsbutthiswilldo&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Run list function we mentioned earlier&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apt]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[openssl]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql::server]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Save the file and run another &lt;code&gt;vagrant provision&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Are you noticing a pattern here?  Well done.  That’s how we can debug our recipes.  Change -&amp;gt; &lt;code&gt;vagrant provision&lt;/code&gt; -&amp;gt; Error -&amp;gt; Repeat until it works.  If the error isn’t obvious, Google is your friend.  Chef will also always give you a stack trace which will show you the recipe and line giving the error, a quick read of the source can usually give you a good indication of what’s really going on.  It reads close to plain English, so you stand a good chance of understanding even if you don’t know Ruby.&lt;/p&gt;

&lt;p&gt;This time it should run successfully, so log back in with &lt;code&gt;vagrant ssh&lt;/code&gt; and try to connect to MySQL with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql -u root -piloverandompasswordsbutthiswilldo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should drop you into a &lt;code&gt;mysql&amp;gt;&lt;/code&gt; prompt, where you can run &lt;code&gt;show databases;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
+--------------------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is looking good.  Type &lt;code&gt;quit&lt;/code&gt; to exit MySQL, now type &lt;code&gt;php --version&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PHP 5.3.2-1ubuntu4.18 with Suhosin-Patch (cli) (built: Sep 12 2012 19:33:42)
Copyright (c) 1997-2009 The PHP Group
Zend Engine v2.3.0, Copyright (c) 1998-2010 Zend Technologies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even better. Now let’s enable the default site and test Apache.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo a2ensite default
sudo service apache2 reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll notice we didn’t need to type a password, vagrant was good enough to add itself to the automatic sudoer’s list.  Now visit www.example.vm or 192.168.33.33 if you aren’t using the hostmaster plugin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/it-works.png&quot; alt=&quot;Apache Default Site&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re getting there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &quot;&amp;lt;?php phpinfo();&quot; | sudo tee /var/www/info.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visit www.example.vm/info.php or 192.168.33.33/info.php to see if it works.  Damn, it downloaded the file.  Ok.  A quick look through the recipes in the Apache2 cookbook shows a &lt;code&gt;mod_php5&lt;/code&gt; recipe.  We probably need to add that, so lets add it to our run list and try again:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Run list function we mentioned earlier&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apt]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[openssl]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2::mod_php5]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql::server]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now run &lt;code&gt;vagrant provision&lt;/code&gt; and try to load the info file in our browser again when it’s finished.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/not-found.png&quot; alt=&quot;Not Found&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What’s that all about?  Well, Chef has just re-installed everything for you, so Apache’s config is all new again.  Let’s repeat the steps above.  Make a note we need to find a way to make our virtual hosts persistent.  We’ll come back to it soon.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
sudo a2ensite default
sudo service apache2 reload
echo &quot;&amp;lt;?php phpinfo();&quot; | sudo tee /var/www/info.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now try to load info.php again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/vagrant-phpinfo.png&quot; alt=&quot;Vagrant phpinfo()&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Success!  But a quick scan of the &lt;code&gt;info.php&lt;/code&gt; output shows the MySQL section is missing.  Let’s verify that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php --info | grep mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing.  Let’s check the PHP cookbook.  There’s a &lt;code&gt;module_mysql&lt;/code&gt; recipe! Excellent.  Are you spotting another pattern here?  Nothing is enabled by default with the opscode cookbooks, if it’s optional, you have to specify it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Run list function we mentioned earlier&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apt]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[openssl]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2::mod_php5]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql::server]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php::module_mysql]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now run &lt;code&gt;vagrant provision&lt;/code&gt; again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
php --info | grep mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much better.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/vagrant-mysql-info.png&quot; alt=&quot;Vagrant php mysql info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That just leaves us with one last thing.  Getting our data and virtual hosts to persist between provisions.&lt;/p&gt;

&lt;p&gt;I know I said we wouldn’t need them, but to get our virtual host to point at our code and persist between provisions, we need to use a LWRP.  Specifically the &lt;code&gt;web_app&lt;/code&gt; LWRP from the apache2 cookbook.&lt;/p&gt;

&lt;p&gt;This may or may not be the &lt;em&gt;right&lt;/em&gt; way to do this, but I know it works so it’s how I’m going to do it until I find a better way.  Create a directory in &lt;code&gt;chef/site-cookbooks&lt;/code&gt; called &lt;code&gt;apache2&lt;/code&gt;.  Inside there, create another directory called &lt;code&gt;recipes&lt;/code&gt;.  Now add a file called &lt;code&gt;vhosts.rb&lt;/code&gt; with the content:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Cookbook Name:: apache2&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Recipe:: vhosts&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Copyright 2012, Adam Brett. All Rights Reserved.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Unless required by applicable law or agreed to in writing, software&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# See the License for the specific language governing permissions and&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# limitations under the License.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;&lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;apache2&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;&lt;span class=&quot;n&quot;&gt;web_app&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;example&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;  &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;www.example.vm&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;  &lt;span class=&quot;n&quot;&gt;server_aliases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;example.vm&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;  &lt;span class=&quot;n&quot;&gt;allow_override&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;all&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;  &lt;span class=&quot;n&quot;&gt;docroot&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/srv/site/&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember how in our &lt;code&gt;Vagrantfile&lt;/code&gt; we told Vagrant to mount the current directory at &lt;code&gt;/srv/site&lt;/code&gt;?  That’s so our source code was available in the VM.&lt;/p&gt;

&lt;p&gt;Now we create a custom recipe (hence the site-cookbooks location), and import the apache2 default recipe.&lt;/p&gt;

&lt;p&gt;There’s something important to note here.  If you create a recipe in &lt;code&gt;site-cookbooks&lt;/code&gt; that has a recipe of the exact same name and location as one in &lt;code&gt;cookbooks&lt;/code&gt;, the one in &lt;code&gt;site-cookbooks&lt;/code&gt; will be used.  This allows you to extend or modify the opscode cookbooks without having to modify them directly.  This is why we used git to manage this directory.  We can now very easily update all of our cookbooks with git without worrying about overwriting any of our custom modifications.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;web_app&lt;/code&gt; LWRP (or function) is defined in &lt;code&gt;cookbooks/apache2/definitions/web_app.rb&lt;/code&gt;. If you open this file and take a look, you can see in here lots of calls to &lt;code&gt;params[:something]&lt;/code&gt;.  These are the params you can pass to the function call.  You can also see it’s using the template &lt;code&gt;web_app.conf.erb&lt;/code&gt;.  Open this file in the &lt;code&gt;apache2/templates/default&lt;/code&gt; directory and you can see a bunch more params you can pass to this function/LWRP.  We only need to use a couple so we’ll leave the recipe as it is.&lt;/p&gt;

&lt;p&gt;You include your own recipes in the run list exactly as you would a normal one, so lets add ours:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Run list function we mentioned earlier&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apt]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[openssl]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2::mod_php5]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql::server]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php::module_mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2::vhosts]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now run &lt;code&gt;vagrant provision&lt;/code&gt; again, and visit www.example.vm in your browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/vagrant-local-website.png&quot; alt=&quot;Vagrant Local Website&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Success!  Any index.html you have in your application root should now be loaded in your browser.  If you need to load an &lt;code&gt;index.php&lt;/code&gt; or something else, add the &lt;code&gt;directory_index&lt;/code&gt; paramter to the web_app LWRP call.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;n&quot;&gt;web_app&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;example&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;  &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;www.example.vm&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;  &lt;span class=&quot;n&quot;&gt;server_aliases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;example.vm&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;  &lt;span class=&quot;n&quot;&gt;directory_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;index.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;  &lt;span class=&quot;n&quot;&gt;allow_override&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;all&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;  &lt;span class=&quot;n&quot;&gt;docroot&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/srv/site/&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So we’re pretty close.  All that’s left now to have something &lt;em&gt;really&lt;/em&gt; useful is to import our database schema.&lt;/p&gt;

&lt;p&gt;Fortunately for us, the guys have opscode have a cookbook for that too.  It’s called database, and we’re going to need some LWRP providers from it again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ../chef
git submodule add https://github.com/opscode-cookbooks/database.git cookbooks/database
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;database&lt;/code&gt; cookbook recipe &lt;code&gt;mysql&lt;/code&gt; has a dependency on the &lt;code&gt;build-essential&lt;/code&gt; cookbook, so let’s add that too.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/opscode-cookbooks/build-essential.git cookbooks/build-essential
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add the database::mysql recipe, build-essential default recipe, and another custom one we’re about to create to your run list.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Run list function we mentioned earlier&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apt]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[build-essential]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[openssl]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2::mod_php5]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql::server]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php::module_mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2::vhosts]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[database::mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[database::import]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let’s setup that custom recipe.  Bear in mind, there is probably a &lt;em&gt;correct&lt;/em&gt; way to do this.  I’m not aware of it, and this way &lt;em&gt;works&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p site-cookbooks/database/recipes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add &lt;code&gt;import.rb&lt;/code&gt; in your newly created directory with the following content:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Cookbook Name:: database&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Recipe:: import&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Copyright 2012, Adam Brett. All Rights Reserved.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Unless required by applicable law or agreed to in writing, software&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# See the License for the specific language governing permissions and&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# limitations under the License.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;&lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;database::mysql&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Store this in a variable so we don&amp;#39;t keep repeating it&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;&lt;span class=&quot;n&quot;&gt;mysql_connection_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;    &lt;span class=&quot;ss&quot;&gt;:host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;    &lt;span class=&quot;ss&quot;&gt;:username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;# automatically get this from the override_attributes call!&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;    &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;server_root_password&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-21&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-22&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-23&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# my_database = database name&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-24&quot;&gt;&lt;span class=&quot;n&quot;&gt;mysql_database&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;my_database&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-25&quot;&gt;  &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql_connection_info&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-26&quot;&gt;  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-27&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-28&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-29&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# import an sql dump from your app_root/data/dump.sql to the my_database database&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-30&quot;&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;import&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-31&quot;&gt;  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mysql -u root -p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;server_root_password&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; my_database &amp;lt; /srv/site/data/dump.sql&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-32&quot;&gt;  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:run&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-33&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-34&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-35&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# this isn&amp;#39;t really necessary, as we&amp;#39;re using root and not creating a database&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-36&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# user, but I&amp;#39;m including it and commenting it out so you can see what it looks like&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-37&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# mysql_database_user &amp;#39;my_user&amp;#39; do&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-38&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#  connection mysql_connection_info&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-39&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#  database_name &amp;#39;my_database&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-40&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#  action :grant&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-41&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, make sure the database dump exists, and run &lt;code&gt;vagrant provision&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Error!&lt;/p&gt;

&lt;p&gt;Again!&lt;/p&gt;

&lt;p&gt;It turns out that there is some weirdness with Chef and build-essential and Ruby Gems (which is what gives us the database LWRPs).  A quick scan of the build-essential README reveals we need to add:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;n&quot;&gt;default_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;build_essential&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;compiletime&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to our role definition.  Go ahead and do that, so the whole thing should look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Name of the role should match the name of the file&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;vagrant-test-box&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;n&quot;&gt;default_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;build_essential&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;compiletime&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;&lt;span class=&quot;n&quot;&gt;override_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;mysql&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;server_root_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iloverandompasswordsbutthiswilldo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;server_repl_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iloverandompasswordsbutthiswilldo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;        &lt;span class=&quot;s2&quot;&gt;&amp;quot;server_debian_password&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iloverandompasswordsbutthiswilldo&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Run list function we mentioned earlier&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apt]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-21&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[build-essential]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-22&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[openssl]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-23&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-24&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2::mod_php5]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-25&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-26&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[mysql::server]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-27&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-28&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[php::module_mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-29&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[apache2::vhosts]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-30&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[database::mysql]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-31&quot;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;recipe[database::import]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-32&quot;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then run it again: &lt;code&gt;vagrant provision&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All done? Let’s verify it worked:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
mysql -u root -piloverandompasswordsbutthiswilldo


mysql&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| my_database        |
| mysql              |
+--------------------+
3 rows in set (0.00 sec)

mysql&amp;gt; use my_database;
Database changed

mysql&amp;gt; show tables;
+-----------------------+
| Tables_in_my_database |
+-----------------------+
| my_table              |
+-----------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success!  You should now be able to put your vagrant database details into your app and have it load as expected, and if not, I should have given you access to the tools and knowledge you need to start experimenting and debugging for yourself.&lt;/p&gt;

&lt;p&gt;In the months and years to come Vagrant and Chef are going to become as indispensable for any serious developer, so please give it a go and let me know on &lt;a href=&quot;http://twitter.com/sixdaysad&quot;&gt;twitter&lt;/a&gt; if there’s anything you think needs improving or clarifying in this post!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://vagrantup.com&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://www.opscode.com/chef&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;https://github.com/opscode-cookbooks/&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/01/15/vagrant-is-easy-chef-is-hard</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/01/15/vagrant-is-easy-chef-is-hard.html"/>
    <title>Vagrant is easy - Chef is hard.</title>
    <published>2013-01-15T00:00:00+00:00</published>
    <updated>2013-01-15T00:00:00+00:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;This is part 1 of a 2 part quickstart to using Vagrant and Chef to speed up and simplify your development environment.  If you’re already familiar with Vagrant and just want to find out about Chef, go to &lt;a href=&quot;http://adamcodes/2013/01/15/vagrant-is-easy-chef-is-hard-part2.html&quot;&gt;part 2 here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven’t started using Chef&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and Vagrant&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; yet, you should, it’s awesome and in a few short weeks has totally changed my development environment.&lt;/p&gt;

&lt;p&gt;The only problem is that it’s not much use on its own, and getting started with Chef/Puppet is really really hard as there is no good documentation out there for it.  Not even the manual.  Today I’m going to change that.  If you’re a developer and just want to build a consistent and reliable test environment, as quickly and with as little hassle as possible pay close attention.&lt;/p&gt;

&lt;p&gt;Just before Christmas we had a massive office refurb.  The office was shut and completely inaccessible for just over a week, which meant I spent the week working from home, without access to our UAT box.  Normally this wouldn’t be a problem, I’d just have developed locally and uploaded when back in the office, except the issue I was working on was very specific to the PHP version we were running, our ops guys wouldn’t upgrade and that meant I needed an environment as close to live as possible for testing.&lt;/p&gt;

&lt;p&gt;I took this opportunity to pick-up vagrant.  I’d heard about it before, even installed it, but never really used it.&lt;/p&gt;

&lt;h2 id=&quot;vagrant&quot;&gt;Vagrant&lt;/h2&gt;

&lt;p&gt;Think of vagrant as a command line script for VirtualBox&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.  I’m going to skip over how to install both, as it’s really easy just following the instructions on their websites.  You will need the latest VirtualBox and Vagrant installed for this to work though.&lt;/p&gt;

&lt;p&gt;There are a couple of important concepts in Vagrant&lt;/p&gt;

&lt;h3 id=&quot;baseboxes&quot;&gt;Baseboxes&lt;/h3&gt;

&lt;p&gt;Baseboxes are virtual machine images.  This is the default start state of your VM.  Think of setting up a new VM, then saving a snapshot so that you can restore to that point any time you want.  That’s like a basebox.  Except baseboxes are scripted, so they’re way cooler.&lt;/p&gt;

&lt;p&gt;Lots of people have created baseboxes for you already&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, so you don’t need to create your own.  The default is &lt;code&gt;lucid32&lt;/code&gt;, an ubuntu basebox.  This will probably be fine unless you know why you need another one.&lt;/p&gt;

&lt;p&gt;Key Command (to add a new box): &lt;code&gt;vagrant box add lucid32 http://files.vagrantup.com/lucid32.box&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lucid32&lt;/code&gt; is how you’ll reference the box locally, the url is where it can be downloaded.&lt;/p&gt;

&lt;h3 id=&quot;vagrantfile&quot;&gt;VagrantFile&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Vagrantfile&lt;/code&gt; is the name of a textfile in the root of your project.  It provides all of the config settings, such as which directories on the host to mount in the VM (your code, etc), as well as networking config.&lt;/p&gt;

&lt;p&gt;You’ll want to end up with a &lt;code&gt;Vagrantfile&lt;/code&gt; that looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;ss&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# Your local name for the basebox you want to use.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;lucid32&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# Assign this VM to a host-only network IP, allowing you to access it&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# via the IP. Host-only networks can talk to the host machine as well as&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# any other machines on the same network, but cannot be accessed (through this&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# network interface) by any external networks.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hostonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;192.168.33.33&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# Use the vagrant hostmaster plugin[^5] to automatically add a domain name&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;www.example.vm&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# Share an additional folder to the guest VM. The first argument is&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# an identifier, the second is the path on the guest to mount the&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# folder, and the third is the path on the host to the actual folder.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# You can add as many of these as you like, anywhere you like&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share_folder&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;v-data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/srv/data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;../data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:nfs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share_folder&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;v-site&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/srv/site&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:nfs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-21&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# Enable provisioning with chef solo, specifying a cookbooks path, roles&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-22&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# path, and data_bags path (all relative to this Vagrantfile), and adding&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-23&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# some recipes and/or roles.&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-24&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;provision&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:chef_solo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-25&quot;&gt;    &lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;roles_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;../chef/roles&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-26&quot;&gt;    &lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookbooks_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../chef/site-cookbooks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;../chef/cookbooks&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-27&quot;&gt;    &lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_role&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;webserver&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-28&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-29&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Key Command (to add a new Vagrantfile to your current project): &lt;code&gt;vagrant init&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;baseboxes-are-normally-empty&quot;&gt;Baseboxes are normally empty&lt;/h3&gt;

&lt;p&gt;When you have a base ubuntu install, you can’t do much with it, that’s the same with baseboxes.  While you could build a basebox that already has everything you need installed, that’s not really using it to the best of its ability.  To get anything installed, you need a provisioner, and that’s where Chef comes in.  You can also use puppet, but don’t worry too much about that for now, provisioning is the hard part and we’ll cover it in the next post.&lt;/p&gt;

&lt;h3 id=&quot;key-commands&quot;&gt;Key Commands&lt;/h3&gt;

&lt;p&gt;There are 6 key commands you will need day-to-day for vagrant&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;vagrant up&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This starts the VM if it’s not already running.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;vagrant suspend&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This saves the machine state and temporarily shuts down the VM.  Running &lt;code&gt;vagrant up&lt;/code&gt; will bring it back again exactly as it was.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;vagrant ssh&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Login to your VM using ssh.  Vagrant uses its own private/public keys which are automatically copied to the VM, so there’s no username/password to worry about.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;vagrant provision&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This re-runs your provisioner of choice (e.g. if you’ve updated something) without having to start from scratch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;vagrant reload&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This resets the VM to the basebox’s original state and re-runs your provisioner.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;vagrant destroy&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This completely removes all trace of the VM from your system (but not the basebox or provisioner).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;This should be enough to get you started using Vagrant.  If you follow these steps, then run &lt;code&gt;vagrant up&lt;/code&gt; you should have a functioning VM, and the key commands should be enough to give you a great grounding in how to use vagrant.  Now carry on reading &lt;a href=&quot;http://adamcodes/2013/01/15/vagrant-is-easy-chef-is-hard-part2.html&quot;&gt;part 2&lt;/a&gt; to find out how to make your VM actually do something useful.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://www.opscode.com/chef&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://vagrantup.com&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;https://www.virtualbox.org&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;http://vagrantbox.es&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/01/08/why-psr3-doesnt-make-sense</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/01/08/why-psr3-doesnt-make-sense.html"/>
    <title>Why PSR-3 Doesn't Make Sense and Why I'm Excited About It.</title>
    <published>2013-01-08T00:00:00+00:00</published>
    <updated>2013-01-08T00:00:00+00:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;PSR-3&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; doesn’t make sense because people aren’t writing the right kind of PHP yet.  By this I mean that people aren’t writing the kind of PHP that would benefit from having a standard logging interface across multiple frameworks and libraries.&lt;/p&gt;

&lt;p&gt;Most people are still writing Symfony PHP, or CakePHP, or CodeIgniter, or Zend or… you get the picture.  Why would it matter if they have a logger that they can use across all of the libraries and frameworks.  They only use the one.&lt;/p&gt;

&lt;p&gt;Some people use a slightly more modern approach, they use one of the more up-to-date frameworks with PSR-0 and composer support.  To them, it makes more sense.  If they’re using a library from packagist, wouldn’t it be great if you could tell (Symfony|Zend|Laravel) to use the same logger as all of your libraries when it was writing its logs, then you’d only need &lt;em&gt;one&lt;/em&gt; logger instance for all your apps, and it would write all your logs to the one place.  Great.&lt;/p&gt;

&lt;p&gt;I think this is likely where the original proposal came from, and that &lt;em&gt;is&lt;/em&gt; great, but I still think it misses the point.&lt;/p&gt;

&lt;p&gt;Imagine, if you would, the following application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── dist
│   ├── rest &amp;lt;-- SlimPHP
│   │   ├── README.md
│   │   ├── composer.json
│   │   ├── composer.lock
│   │   ├── logs
│   │   ├── public
│   │   ├── templates
│   │   └── vendor
│   └── web &amp;lt;-- CakePHP
│       ├── README.md
│       ├── app
│       ├── build.properties
│       ├── build.xml
│       ├── index.php
│       ├── lib
│       ├── plugins
│       └── vendors
├── logs
├── src &amp;lt;-- My Application Code
│   └── AdamBrett
│       └── Application
│           ├── Entities
│           ├── StorageAdapters
│           └── UseCases
├── tests
└── vendor &amp;lt;-- My 3rd Party Libraries
    └── Psr
        └── Log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this is the beginnings of a modern PHP application.  The source of the application, the bulk of the logic and entities are stored in the &lt;code&gt;src&lt;/code&gt; directory.  The REST API is delivered by the micro-framework SlimPHP, and the web application is delivered by CakePHP.&lt;/p&gt;

&lt;p&gt;They both have very little controller logic.  A controller action would basically setup a &lt;code&gt;StorageAdapter&lt;/code&gt; (imagine &lt;code&gt;CakeStorage&lt;/code&gt; and &lt;code&gt;IdiormStorage&lt;/code&gt; objects both implementing &lt;code&gt;StorageInterface&lt;/code&gt;), and pass it along to the relevant use-case - potentially with any relevant entity object - to perform the action required.  No repetition of code, a highly testable modern application.&lt;/p&gt;

&lt;p&gt;Then you look at the logging situation.  Slim is logging to &lt;code&gt;./dist/rest/logs&lt;/code&gt;, Cake is logging to &lt;code&gt;./dist/web/app/tmp/logs&lt;/code&gt;, and your use-cases use monolog&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; to log to somewhere else.  Yuk.&lt;/p&gt;

&lt;p&gt;The guys in camp 2, who kind of gets PSR-3, are now thinking: Wouldn’t it be great if we could just use monolog throughout to log to &lt;code&gt;./logs&lt;/code&gt;?  That’s what PSR-3 is for.&lt;/p&gt;

&lt;p&gt;No! &lt;em&gt;No cookies for you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I don’t want to sift through my logs and find entries from Slim, Cake, and my own code.  If one of my users has an issue with the API why would I care about Cake’s logs when Cake only handles my web requests?&lt;/p&gt;

&lt;p&gt;For that matter - why would I care about the logs my use-cases produce when called from Cake?  I don’t.  At all.  What I want, what I &lt;em&gt;really&lt;/em&gt; really want, is to say: Hey, I have a problem with the REST API, let’s check through the SlimPHP logs &lt;em&gt;and&lt;/em&gt; see the logs from any use cases it calls.  All in one place.  Together.  In date order.  As it happened.&lt;/p&gt;

&lt;p&gt;For me, &lt;em&gt;that’s&lt;/em&gt; what’s exciting about PSR-3.  I don’t want all my logs in one place.  I want to see my use-cases in Cake’s logs when I’m debugging my web app, and I want to see my use-cases in Slim’s logs when I’m debugging my REST API.&lt;/p&gt;

&lt;p&gt;Once SlimPHP and CakePHP support the PSR-3 logger standard internally, I want to pass &lt;em&gt;their&lt;/em&gt; loggers to &lt;em&gt;my&lt;/em&gt; use-cases and get the output &lt;em&gt;I&lt;/em&gt; want in the format &lt;em&gt;I&lt;/em&gt; want - in the location I expect it - with a high signal-to-noise ratio.&lt;/p&gt;

&lt;p&gt;The PSR-3 LoggerInterface has the potential to give me that.  And I think that’s pretty exciting.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;https://github.com/Seldaek/monolog&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/08/10/introducing-tweetest-php-test-framework</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/08/10/introducing-tweetest-php-test-framework.html"/>
    <title>Introducing Tweetest</title>
    <published>2012-08-10T00:00:00+01:00</published>
    <updated>2012-08-10T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;A few weeks ago I stumbled upon the &lt;a href=&quot;http://twitto.org/&quot;&gt;Twitto&lt;/a&gt; ‘Web Framework in a Tweet’ by &lt;a href=&quot;http://fabien.potencier.org/&quot;&gt;Fabien Potencier&lt;/a&gt;, creator of the Symphony Framework.&lt;/p&gt;

&lt;p&gt;I was sure I had come across it before, as well as the &lt;a href=&quot;http://f055.net/article/the-140-character-webapp-challenge/&quot;&gt;140 Character Web-App Challenge&lt;/a&gt; that has inspired it, but not paid much attention to either.  What made a difference this time, however, was that earlier that day I had written a tiny test function for a disposable proof of concept that didn’t warrant a full unit testing framework.  I opened up my file from earlier that day, and after a few tweaks, &lt;a href=&quot;https://twitter.com/sixdaysad/status/223484283254349824&quot;&gt;tweeted&lt;/a&gt; the result.&lt;/p&gt;

&lt;p&gt;Since then (mostly for fun) I decided to see if I could replicate all of the assertions from PHPUnit with my tiny test function and nothing more.  It turns out, &lt;a href=&quot;http://adambrett.github.com/tweetest&quot;&gt;you can&lt;/a&gt;, so I gave tweetest a name, created a &lt;a href=&quot;http://github.com/adambrett/tweetest&quot;&gt;GitHub repo&lt;/a&gt; and even a &lt;a href=&quot;http://adambrett.github.com/tweetest&quot;&gt;website&lt;/a&gt; with some documentation to show others what could be done.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/08/03/git-cleanly-move-between-branches</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/08/03/git-cleanly-move-between-branches.html"/>
    <title>Git - A clean branch switching strategy</title>
    <published>2012-08-03T00:00:00+01:00</published>
    <updated>2012-08-03T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
      <summary type="html">Some git strategies swapping branches without bringing the uncommitted or experimental changes with you</summary>
      &lt;p&gt;&lt;a href=&quot;http://adamcod.es/2012/08/03/git-cleanly-move-between-branches.html&quot;&gt;Continue Reading...&lt;/a&gt;&lt;/p&gt;
    
    <content type="html">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;You’re working on &lt;code&gt;feature/awesome-new-stuff&lt;/code&gt; and have a whole bunch of changes that you don’t want to commit yet, and you get a call about a bug that needs to be fixed asap.  You checkout develop, create a hotfix branch and make your changes.  Then you do &lt;code&gt;git status&lt;/code&gt; and see all of your experimental changes from &lt;code&gt;feature/awesome-new-stuff&lt;/code&gt; have come with you, making it harder to spot the changes relating only to the hotfix.&lt;/p&gt;

&lt;h2 id=&quot;the-quick-and-dirty&quot;&gt;The Quick and Dirty&lt;/h2&gt;

&lt;p&gt;The simplest way to avoid this is to stash any changes before you move to another branch, this looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;git stash
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;git checkout develop
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;git flow hotfix start &amp;lt;release&amp;gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;...
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;&amp;lt;codecodecode&amp;gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;...
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;git flow hotfix finish &amp;lt;release&amp;gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;git checkout feature/awesome-new-stuff
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;git stash pop
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, if you find yourself doing this a lot, for a lot of different features and branches, this can get messy pretty quickly.  Instead, why not leverage the flexibility of git and just commit early and often, and simply amend as you go:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;git add .
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;git commit -a -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;WIP&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;...
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&amp;lt;codecodecode&amp;gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;...
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;git add .
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;git commit --amend
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Because you are working locally in git commits can be undone and re-done at will, it’s only when you push the commit to a central repository that you need to pay serious attention.&lt;/p&gt;

&lt;p&gt;So create a work in progress commit, and then use &lt;code&gt;git commit --amend&lt;/code&gt; to add to it often.  Then when you go to switch branches to work on another feature you don’t have to worry about stashing and popping or bringing changes with you.&lt;/p&gt;

&lt;p&gt;When you’re ready for the real commit on a branch you can run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;git reset --soft HEAD~
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;git reset
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first reset will undo your last commit (the WIP commit), with the second reset un-staging the files.  You can now re-commit all of your changes paying more serious attention to your commit message.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/25/imagine-php-image-library</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/25/imagine-php-image-library.html"/>
    <title>Make a circle thumbnail with the Imagine PHP Image Library</title>
    <published>2012-07-25T00:00:00+01:00</published>
    <updated>2012-07-25T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
      <summary type="html">A Filter for the Imagine PHP Image Library to create circle thumbnails</summary>
      &lt;p&gt;&lt;a href=&quot;http://adamcod.es/2012/07/25/imagine-php-image-library.html&quot;&gt;Continue Reading...&lt;/a&gt;&lt;/p&gt;
    
    <content type="html">&lt;h2 id=&quot;what-is-imagine&quot;&gt;What is Imagine&lt;/h2&gt;

&lt;p&gt;Image processing in PHP is &lt;em&gt;really&lt;/em&gt; unpleasant.  Imagine is a PHP 5.3 library which makes image processing suck way less.  According to the &lt;a href=&quot;http://imagine.readthedocs.org&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/avalanche123/Imagine&quot;&gt;Imagine&lt;/a&gt; is a[n] OOP library for image manipulation built in PHP 5.3 using the latest best practices and thoughtful design that should allow for decoupled and unit-testable code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Put simply, Imagine is a nicely PSR-0 namespace’d wrapper that provides a consistent interface for lower level Gd, ImageMagick and GMagick functionality.  And &lt;em&gt;consistency is good&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you haven’t heard of Imagine, or aren’t familiar with its concepts, go &lt;a href=&quot;https://speakerdeck.com/u/avalanche123/p/introduction-to-imagine&quot;&gt;here&lt;/a&gt; and read the presentation first, as the code below assumes a knowledge of its features concepts.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Whilst re-working an area of our internal CRM, we came up with the idea of cards.  These would be little snippets of information about people, companies, products and other CRM objects related to the page you’re on, neatly stacked in order of importance down the right-hand side of a page.&lt;/p&gt;

&lt;p&gt;Here’s an initial concept for a contact card:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/contact-card-square.png&quot; alt=&quot;Contact Card Square&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pretty good, but we decided we can do a bit bitter, and rounded pictures would be a bit friendlier:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/contact-card-face.png&quot; alt=&quot;Contact Card Round&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Only problem, that makes coding the thumbnails a lot harder.  Our users aren’t going to upload nice transparent rounded pictures for us, so we’re going to have to find a way to process them ourselves.&lt;/p&gt;

&lt;h2 id=&quot;enter-imagine&quot;&gt;Enter Imagine&lt;/h2&gt;

&lt;p&gt;Having read about Imagine, it had peaked my interested, and I’d wanted to use it on a project for a while.  It turns out that creating a circle thumbnail with Imagine is actually really easy.  Much like most custom things in Imagine, you want to create a filter, I called mine &lt;code&gt;CircleThumbnailFilter&lt;/code&gt; (original, I know).  It looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CircleThumbnailFilter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Imagine\Filter\FilterInterface&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$imagine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Imagine\Image\ImagineInterface&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$imagine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;        &lt;span class=&quot;nx&quot;&gt;Imagine\Image\BoxInterface&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;imagine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$imagine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Imagine\Image\ImageInterface&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;        &lt;span class=&quot;c1&quot;&gt;// create a thumbnail&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;        &lt;span class=&quot;nv&quot;&gt;$thumbnail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thumbnail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;            &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;            &lt;span class=&quot;nx&quot;&gt;Imagine\Image\ImageInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;THUMBNAIL_OUTBOUND&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-21&quot;&gt;        &lt;span class=&quot;c1&quot;&gt;// create a new image to hold our mask&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-22&quot;&gt;        &lt;span class=&quot;c1&quot;&gt;// make the background white&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-23&quot;&gt;        &lt;span class=&quot;nv&quot;&gt;$mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;imagine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Imagine\Image\Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fff&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-24&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-25&quot;&gt;        &lt;span class=&quot;c1&quot;&gt;// draw a black circle at the center of our new image&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-26&quot;&gt;        &lt;span class=&quot;c1&quot;&gt;// use $this-&amp;gt;size to make it full width and height&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-27&quot;&gt;        &lt;span class=&quot;nv&quot;&gt;$mask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-28&quot;&gt;            &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ellipse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-29&quot;&gt;                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Imagine\Image\Point\Center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-30&quot;&gt;                &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-31&quot;&gt;                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Imagine\Image\Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;000&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-32&quot;&gt;                &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-33&quot;&gt;            &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-34&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-35&quot;&gt;        &lt;span class=&quot;c1&quot;&gt;// apply the mask to the thumbnail and return it&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-36&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$thumbnail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-37&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-38&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The constructor is fairly self explanatory, it takes an instance of your imagine interface, and a box instance which is used to control the size of your thumbnail.&lt;/p&gt;

&lt;p&gt;The apply function is the one that does the work, it is required to take exactly one parameter, an instance of &lt;code&gt;Imagine\Image\ImageInterface&lt;/code&gt; which is enforced by &lt;code&gt;Imagine\Filter\FilterInterface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first thing we do is resize our image, if someone uploads a 1000x1000 image, we want to scale it down.&lt;/p&gt;

&lt;p&gt;Next, we create a canvas and call it &lt;code&gt;$mask&lt;/code&gt;.  We so this by calling the &lt;code&gt;create&lt;/code&gt; method on the &lt;code&gt;ImageInterface&lt;/code&gt; we passed to our constructor.  We pass in the &lt;code&gt;BoxInterface&lt;/code&gt; we also passed to our constructor to tell it the size of the image we want to create, and a new &lt;code&gt;Imagine\Image\Color&lt;/code&gt; to tell it the background colour we want.  We then end up with a brand-new instance of &lt;code&gt;Imagine\Image\ImageInterface&lt;/code&gt; in &lt;code&gt;$mask&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we call the draw method on the image stored in $mask to load the &lt;code&gt;Drawer&lt;/code&gt; object, and then we tell it to draw us an ellipse.&lt;/p&gt;

&lt;p&gt;We first pass in the position we want the ellipse drawn at, which is the exact center of the Box we’ve been using all the way through, we tell it that we want our ellipse to be the same size as our box (i.e. to fill it), and we tell it to make it black, with no transparency, and finally we pass &lt;code&gt;true&lt;/code&gt; which tells it that it should be filled, rather than an outline.&lt;/p&gt;

&lt;p&gt;Once we have our mask created, if we were to save it, it would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/contact-card-mask.png&quot; alt=&quot;Contact Card Mask&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We don’t want to output our mask though, we just want to use it to make parts of our square thumbnail transparent.  To do that we use Imagine’s built-in applyMask filter, passing the mask we created earlier in as the only parameter.  We can then return this image so we can use it in our scripts.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To use the filter, you need to include Imagine using &lt;a href=&quot;http://imagine.readthedocs.org/en/latest/usage/introduction.html#installation&quot;&gt;one of the methods in the documentation&lt;/a&gt;, I recommend installing it via &lt;a href=&quot;http://getcomposer.org&quot;&gt;composer&lt;/a&gt;, as Imagine is available on &lt;a href=&quot;http://packagist.org/packages/imagine/Imagine&quot;&gt;packagist&lt;/a&gt;, and then using the composer autoloader to load Imagine via the PSR-0 namespace syntax.&lt;/p&gt;

&lt;p&gt;You will also need to autoload or require the CircleThumbnailFilter object somehow, you could put it in your app’s namespace or just do it the old-school way with &lt;code&gt;require_once&lt;/code&gt;.  Either way, when both are loaded, you can run the circle filter like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$imagine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Imagine\Gd\Imagine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CircleThumbnailFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$imagine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Imagine\Image\Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$imagine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/square/image.jpg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/circle/image.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure that no-matter what your input format (which isn’t really important, Imagine should know what to do with most valid image formats), make sure you output it as something with transparency (preferably png).  Don’t do what I did and spend 40 minutes wondering why the transparency mask wasn’t applying when you were outputting as a jpg.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/17/cakephp-class-string-not-found</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/17/cakephp-class-string-not-found.html"/>
    <title>Class 'String' not found in app/Model/User.php on line xx</title>
    <published>2012-07-17T00:00:00+01:00</published>
    <updated>2012-07-17T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
      <summary type="html">This is a rare error that may crop-up when developing a CakePHP application - this is how to solve it</summary>
      &lt;p&gt;&lt;a href=&quot;http://adamcod.es/2012/07/17/cakephp-class-string-not-found.html&quot;&gt;Continue Reading...&lt;/a&gt;&lt;/p&gt;
    
    <content type="html">&lt;p&gt;This is a really easy to fix error that occurs in a very specific situation.  Namely when developing an application in CakePHP that makes use of the ACL behavior whilst also having a &lt;code&gt;beforeSave&lt;/code&gt; method on the User model.  It can be pretty frustrating at first because there’s nothing about it on the Internet, and as far as you can tell, there isn’t an error on line xx, and you’re not using the String object anywhere.&lt;/p&gt;

&lt;p&gt;It’s happening because of a missing options array on the &lt;code&gt;beforeSave&lt;/code&gt; method you added to the User model.  Simply change:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;beforeSave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;beforeSave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and make sure that you call &lt;code&gt;parent::beforeSave($options)&lt;/code&gt; somewhere in your method definition.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/13/unchangable-public-variables-in-php</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/13/unchangable-public-variables-in-php.html"/>
    <title>Unchangable Public Variables In PHP</title>
    <published>2012-07-13T00:00:00+01:00</published>
    <updated>2012-07-13T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
      <summary type="html">If you&#39;ve ever had a use-case where you want to make a class property publicly read-able, but not modifiable, (without adding a getter), this is how you do it.</summary>
      &lt;p&gt;&lt;a href=&quot;http://adamcod.es/2012/07/13/unchangable-public-variables-in-php.html&quot;&gt;Continue Reading...&lt;/a&gt;&lt;/p&gt;
    
    <content type="html">&lt;p&gt;If you’ve ever had a use-case where you want to make a class property publicly readable, but not writable, (without adding a getter), this is how you do it.&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;Obviously, the easiest (and probably correct/best) way to do this is to add a getter to the class that returns the value of the private/protected property.  However this is a trick to make it appear as a normal property (in case you don’t want any getters in your API, for example).&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;p&gt;This trick involves using PHP’s magic methods and looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagicPublicProperty&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_primaryKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;primaryKey&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;            &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;get_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Unable to set property `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$property&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;` on&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; objects of type `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;primaryKey&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_primaryKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_primaryKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-21&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-22&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-23&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-24&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-25&quot;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;primaryKey&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-26&quot;&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_primaryKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-27&quot;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-28&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-29&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we have a protected property that is obviously only accessible to instances of this class or child classes.&lt;/p&gt;

&lt;p&gt;Below that we are using PHP’s magic methods &lt;code&gt;__get&lt;/code&gt; and &lt;code&gt;__isset&lt;/code&gt; to intercept calls to this class’ properties and we’re checking to see if the property attempting to be accessed is &lt;code&gt;primaryKey&lt;/code&gt;.  If it is, we return either the &lt;code&gt;isset&lt;/code&gt; result or the value, depending on what we want to do.  This bit is fairly straight forward.&lt;/p&gt;

&lt;p&gt;To stop anyone from attempting to set the value of this property from outside of the class, we need to add something to the &lt;code&gt;__set&lt;/code&gt; magic method, if we didn’t, it could lead to unexpected results.  We &lt;em&gt;could&lt;/em&gt; just trap it and return, doing nothing, but to make sure no-one does this accidentally in their code expecting it work, we should throw an exception with a helpful message.&lt;/p&gt;

&lt;p&gt;What if you want it to be modified from outside of the class too?&lt;/p&gt;

&lt;p&gt;Make it public (duh).&lt;/p&gt;

&lt;h3 id=&quot;tests&quot;&gt;Tests&lt;/h3&gt;

&lt;p&gt;Here are some quick tests to prove it’s working as expected:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span id=&quot;True-1&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-2&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-3&quot;&gt;&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/MagicPublicProperty.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-4&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-5&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MagicPublicProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-6&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-7&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-8&quot;&gt;&lt;span class=&quot;cm&quot;&gt;Added the following methods to MagicPublicProperty for the below tests:&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-9&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-10&quot;&gt;&lt;span class=&quot;cm&quot;&gt;    public function changePrimaryKey() {&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-11&quot;&gt;&lt;span class=&quot;cm&quot;&gt;        $this-&amp;gt;_primaryKey = array(&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-12&quot;&gt;&lt;span class=&quot;cm&quot;&gt;            &amp;#39;foreign_key_1&amp;#39;,&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-13&quot;&gt;&lt;span class=&quot;cm&quot;&gt;            &amp;#39;foreign_key_2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-14&quot;&gt;&lt;span class=&quot;cm&quot;&gt;        );&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-15&quot;&gt;&lt;span class=&quot;cm&quot;&gt;    }&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-16&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-17&quot;&gt;&lt;span class=&quot;cm&quot;&gt;    public function removePrimaryKey() {&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-18&quot;&gt;&lt;span class=&quot;cm&quot;&gt;        unset($this-&amp;gt;_primaryKey);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-19&quot;&gt;&lt;span class=&quot;cm&quot;&gt;    }&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-20&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-21&quot;&gt;&lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-22&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-23&quot;&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;primaryKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Is set&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-24&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-25&quot;&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;primaryKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Is accessible&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-26&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-27&quot;&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-28&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;changePrimaryKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-29&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;primaryKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-30&quot;&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Is internally changeable&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-31&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-32&quot;&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-33&quot;&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-34&quot;&gt;        &lt;span class=&quot;nv&quot;&gt;$test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;primaryKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;somethingelse&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-35&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-36&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-37&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-38&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-39&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-40&quot;&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Exception if set&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-41&quot;&gt;
&lt;/span&gt;&lt;span id=&quot;True-42&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-43&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;is_callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-44&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-45&quot;&gt;        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: Passed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-46&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-47&quot;&gt;        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: Failed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-48&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-49&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span id=&quot;True-50&quot;&gt;&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Is set: Passed
Is accessible: Passed
Is internally changeable: Passed
Exception if set: Passed
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/10/unable-to-run-adb-andriod-ubuntu-eclipse</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/10/unable-to-run-adb-andriod-ubuntu-eclipse.html"/>
    <title>Unable to run 'adb', Andriod SDK, Ubuntu, Eclipse</title>
    <published>2012-07-10T00:00:00+01:00</published>
    <updated>2012-07-10T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
      <summary type="html">If you get this frustraiting and confusing message when trying to install the andriod SDK in Ubuntu, the fix is pretty easy.</summary>
      &lt;p&gt;&lt;a href=&quot;http://adamcod.es/2012/07/10/unable-to-run-adb-andriod-ubuntu-eclipse.html&quot;&gt;Continue Reading...&lt;/a&gt;&lt;/p&gt;
    
    <content type="html">&lt;p&gt;If you get the following really annoying message while trying to install the andriod SDK on ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stopping ADB server failed (code -1).
Unable to run &#39;adb&#39;: Cannot run program &quot;/home/user/android-sdk-linux/platform-tools/adb&quot;: java.io.IOException: error=2, No such file or directory.
Starting ADB server failed (code -1).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s because you’re running 64bit ubuntu, and phones (and therefore the SDK) are only 32bit, if you run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install ia32-libs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will solve all of your problems and the SDK will install correctly.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/04/git-changes-wrong-branch</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/04/git-changes-wrong-branch.html"/>
    <title>Git - Help! I made my changes on the wrong branch (easy fix)</title>
    <published>2012-07-04T00:00:00+01:00</published>
    <updated>2012-07-04T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
      <summary type="html">A simple git one-liner that will help you when you make changes to the wrong branch</summary>
      &lt;p&gt;&lt;a href=&quot;http://adamcod.es/2012/07/04/git-changes-wrong-branch.html&quot;&gt;Continue Reading...&lt;/a&gt;&lt;/p&gt;
    
    <content type="html">&lt;h2 id=&quot;weve-all-done-it&quot;&gt;We’ve all done it&lt;/h2&gt;

&lt;p&gt;You get an emergency email from your boss and have to immediately drop everything you’re doing to solve his problem.  You listen to what’s wrong and make all the necessary changes, test it, and then you’re ready to commit, only you’re on &lt;code&gt;feature/awesome-new-stuff&lt;/code&gt; and forgot to checkout &lt;code&gt;develop&lt;/code&gt; before you made your changes. ****.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All is not lost&lt;/em&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Pre-git, I have no idea how I would have fixed this.  Separating your fixes with your feature changes would probably have been done by hand, and taken ages.&lt;/p&gt;

&lt;p&gt;However thanks to git we can simply checkout the correct branch, and and our untracked changes will move with us.&lt;/p&gt;

&lt;h2 id=&quot;if-youve-not-committed-yet&quot;&gt;If you’ve not committed yet&lt;/h2&gt;

&lt;p&gt;First, make sure all of your &lt;em&gt;feature&lt;/em&gt; changes are committed to the correct branch (but &lt;em&gt;not&lt;/em&gt; the fixes you want to move!), then:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git checkout &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Be sure to replace &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; with the name of the branch you actually want to commit to.&lt;/p&gt;

&lt;h2 id=&quot;if-youve-already-committed-the-changes&quot;&gt;If you’ve already committed the changes&lt;/h2&gt;

&lt;p&gt;If you’ve already committed your changes, you need to do a SOFT reset. A soft reset will put your changes back into the index, instead of destroying them like a HARD reset would:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git reset --soft HEAD^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A quick note here, the ^ is the number of commits to roll-back, so if you wanted to go back 2 commits, you’d use:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git reset --soft HEAD^^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and for 3 commits&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git reset --soft HEAD^^^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and so on… then you can run the &lt;a href=&quot;#if-youve-not-committed-yet&quot;&gt;checkout&lt;/a&gt; command above.&lt;/p&gt;

&lt;h2 id=&quot;if-there-is-a-conflict-between-the-two-branches&quot;&gt;If there is a conflict between the two branches&lt;/h2&gt;

&lt;p&gt;If the changes you want to move will conflict with something on the branch you’re moving to git will simply refuse to checkout the new branch.  In this instance you want to use the stash-checkout-pop command like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git stash &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout &amp;lt;branch&amp;gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git stash pop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will stash the changes so you have nothing to move, then checkout the new branch (as with nothing to move there can be no conflicts), and finally pop the stashed changes into the new branch ready for committing.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Unless you’ve made changes in the same files as your fixes, you’ll have to find another way, sorry!&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/03/anatomy-of-a-good-commit-message</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/03/anatomy-of-a-good-commit-message.html"/>
    <title>Anatomy Of A Good Commit Message</title>
    <published>2012-07-03T00:00:00+01:00</published>
    <updated>2012-07-03T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;The developers at my new job have been using subversion for the last 8 years, and with a few exceptions, huge &lt;em&gt;code-bomb&lt;/em&gt; style commits covering numerous features and changes (and with generic one-line commit messages) seem to have been the norm.  Source control was used primarily for backup (a sin I think many teams are guilty of at one point or another), and wasn’t used to its full potential, so no-one really paid attention to commit messages or the size of commits; after they were written they were never referenced again.&lt;/p&gt;

&lt;p&gt;When I joined the team, they had already researched and seen the benefits of Git and wanted to move as soon as possible. With my advocation and re-iteration of the various benefits management were quickly convinced and the work was scheduled.  I wanted to make sure Git became a useful tool for the whole team and once everything was ready to be moved across, that meant introducing the idea of smaller atomic commits with better (more useful) commit messages.&lt;/p&gt;

&lt;p&gt;There are already a few &lt;a href=&quot;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;good&lt;/a&gt; &lt;a href=&quot;http://lbrandy.com/blog/2009/03/writing-better-commit-messages/&quot;&gt;posts&lt;/a&gt; and &lt;a href=&quot;http://programmers.stackexchange.com/questions/42110/can-you-recommend-a-good-commit-message-template-guidelines-to-enforce-in-the&quot;&gt;discussions&lt;/a&gt; about what makes a good commit message, but they all lack the rigidity that I felt we were going to need to break 8 years of bad habit.  I wanted a system I could present that wasn’t going to be overwhelming to a team of widely varying skill levels, on top of getting used to a new SCM, a new way of working (with feature branches/git flow) and smaller atomic commits.&lt;/p&gt;

&lt;p&gt;Whilst the information already out there is great, it doesn’t provide the copy, paste, and fill-in-the-blanks kind of template I wanted for the junior developers so they didn’t have to think too much about their commit messages (at least until they became more familiar with the new tools and processes), and those already familiar with good commit practices had a rock solid base to work from.&lt;/p&gt;

&lt;h2 id=&quot;template&quot;&gt;Template&lt;/h2&gt;

&lt;p&gt;With that in mind, I compiled the various posts and discussions on commit messages into the following template, the bulk of the template is from &lt;a href=&quot;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;here&lt;/a&gt; with a couple of minor modifications.  It’s &lt;a href=&quot;https://github.com/blog/926-shiny-new-commit-styles&quot;&gt;widely accepted&lt;/a&gt; as the best example of a good commit message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Action: Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical; tools like
rebase can get confused if you run the two together.

Write your commit message in the present tense: &quot;Fix bug&quot; and not &quot;Fixed
bug.&quot;  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a
  single space, with blank lines in between, but conventions vary here

- Use a hanging indent

Relation: #issue
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;rules&quot;&gt;Rules&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The body of a commit is mandatory.  You should explain to those who might be looking back over your code why you did what you did in this commit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Commits should be atomic.  That is, a single unit of functionality that can be applied or reverted in its entirety.  Commits should not include changes across functionality.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The first word of the summary should be one of:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Add&lt;/li&gt;
      &lt;li&gt;Modify&lt;/li&gt;
      &lt;li&gt;Re-factor&lt;/li&gt;
      &lt;li&gt;Fix&lt;/li&gt;
      &lt;li&gt;Remove&lt;/li&gt;
      &lt;li&gt;Tidy&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;And should accurately describe what you’re doing with this commit.  If you’re doing more than one of these actions in a commit, you should probably consider breaking them into smaller commits.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last line of the description should be one of the following statuses, followed by a hash (#) and the issue number from the tracker, if relevant:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Fixes&lt;/li&gt;
      &lt;li&gt;Closes&lt;/li&gt;
      &lt;li&gt;References&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Your keywords may vary, but in our issue tracker &lt;em&gt;fixes&lt;/em&gt; and &lt;em&gt;closes&lt;/em&gt; are keywords that will assign statuses to an issue, &lt;em&gt;references&lt;/em&gt; doesn’t do anything, but including the issue number with a # will link the commit to that issue, so it’s nice to know that you’re just putting it in there to reference the issue.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These rules haven’t been in use very long, and aren’t set in stone.  As time goes on we might find ourselves relaxing them, adding to them, or changing them all together.  As a base to work from they pretty solid right now and should stand us in good stead for the foreseeable future.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/06/29/welcome-to-the-first-post</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/06/29/welcome-to-the-first-post.html"/>
    <title>The lorem ipsum</title>
    <published>2012-06-29T00:00:00+01:00</published>
    <updated>2012-06-29T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    
    <content type="html">&lt;p&gt;Hello, this is a test.&lt;/p&gt;

&lt;p&gt;Ever since I got my first low spec VPS I’ve been interested in finding more efficient ways of using those resources.  I’ve looked at all sorts of caching and server tweaks aimed as consuming less resources and had some successes, and quite a lot of failures, so when I first came across the jekyll blogging engine a few years ago &lt;em&gt;it just made sense&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ever since then I’ve wanted to try using it, but for one reason or another never got around to it.  Now that’s going to change, this is my first foray into blogging with jekyll, and I’m going to see how it goes.  Stay tuned.&lt;/p&gt;
</content>
  </entry>
  

</feed>
