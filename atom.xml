<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
  <title>Adam Codes</title>
  <link href="http://example.com/"/>
  <link type="application/atom+xml" rel="self" href="http://adamcod.es/atom.xml"/>
  <updated>2013-01-08T15:13:34+00:00</updated>
  <id>http://adamcod.es/</id>
  <author>
    <name>Adam Brett</name>
    <email>adam@adambrett.co.uk</email>
  </author>

  
  <entry>
    <id>http://adamcod.es/2013/01/08/why-psr3-doesnt-make-sense</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/01/08/why-psr3-doesnt-make-sense.html"/>
    <title>Why PSR-3 Doesn't Make Sense and Why I'm Excited About It.</title>
    <published>2013-01-08T00:00:00+00:00</published>
    <updated>2013-01-08T00:00:00+00:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;PSR-3&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; doesn’t make sense because people aren’t writing the right kind of PHP yet.  By this I mean that people aren’t writing the kind of PHP that would benefit from having a standard logging interface across multiple frameworks and libraries.&lt;/p&gt;

&lt;p&gt;Most people are still writing Symfony PHP, or CakePHP, or CodeIgniter, or Zend or… you get the picture.  Why would it matter if they have a logger that they can use across all of the libraries and frameworks.  They only use the one.&lt;/p&gt;

&lt;p&gt;Some people use a slightly more modern approach, they use one of the more up-to-date frameworks with PSR-0 and composer support.  To them, it makes more sense.  If they’re using a library from packagist, wouldn’t it be great if you could tell (Symfony|Zend|Laravel) to use the same logger as all of your libraries when it was writing its logs, then you’d only need &lt;em&gt;one&lt;/em&gt; logger instance for all your apps, and it would write all your logs to the one place.  Great.&lt;/p&gt;

&lt;p&gt;I think this is likely where the original proposal came from, and that &lt;em&gt;is&lt;/em&gt; great, but I still think it misses the point.&lt;/p&gt;

&lt;p&gt;Imagine, if you would, the following application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── dist
│   ├── rest &amp;lt;-- SlimPHP
│   │   ├── README.md
│   │   ├── composer.json
│   │   ├── composer.lock
│   │   ├── logs
│   │   ├── public
│   │   ├── templates
│   │   └── vendor
│   └── web &amp;lt;-- CakePHP
│       ├── README.md
│       ├── app
│       ├── build.properties
│       ├── build.xml
│       ├── index.php
│       ├── lib
│       ├── plugins
│       └── vendors
├── logs
├── src &amp;lt;-- My Application Code
│   └── AdamBrett
│       └── Application
│           ├── Entities
│           ├── StorageAdapters
│           └── UseCases
├── tests
└── vendor &amp;lt;-- My 3rd Party Libraries
    └── Psr
        └── Log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this is the beginnings of a modern PHP application.  The source of the application, the bulk of the logic and entities are stored in the &lt;code&gt;src&lt;/code&gt; directory.  The REST API is delivered by the micro-framework SlimPHP, and the web application is delivered by CakePHP.&lt;/p&gt;

&lt;p&gt;They both have very little controller logic.  A controller action would basically setup a &lt;code&gt;StorageAdapter&lt;/code&gt; (imagine &lt;code&gt;CakeStorage&lt;/code&gt; and &lt;code&gt;IdiormStorage&lt;/code&gt; objects both implementing &lt;code&gt;StorageInterface&lt;/code&gt;), and pass it along to the relevant use-case - potentially with any relevant entity object - to perform the action required.  No repetition of code, a highly testable modern application.&lt;/p&gt;

&lt;p&gt;Then you look at the logging situation.  Slim is logging to &lt;code&gt;./dist/rest/logs&lt;/code&gt;, Cake is logging to &lt;code&gt;./dist/web/app/tmp/logs&lt;/code&gt;, and your use-cases use monolog&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; to log to somewhere else.  Yuk.&lt;/p&gt;

&lt;p&gt;The guys in camp 2, who kind of gets PSR-3, are now thinking: Wouldn’t it be great if we could just use monolog throughout to log to &lt;code&gt;./logs&lt;/code&gt;?  That’s what PSR-3 is for.&lt;/p&gt;

&lt;p&gt;No! &lt;em&gt;No cookies for you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I don’t want to sift through my logs and find entries from Slim, Cake, and my own code.  If one of my users has an issue with the API why would I care about Cake’s logs when Cake only handles my web requests?&lt;/p&gt;

&lt;p&gt;For that matter - why would I care about the logs my use-cases produce when called from Cake?  I don’t.  At all.  What I want, what I &lt;em&gt;really&lt;/em&gt; really want, is to say: Hey, I have a problem with the REST API, let’s check through the SlimPHP logs &lt;em&gt;and&lt;/em&gt; see the logs from any use cases it calls.  All in one place.  Together.  In date order.  As it happened.&lt;/p&gt;

&lt;p&gt;For me, &lt;em&gt;that’s&lt;/em&gt; what’s exciting about PSR-3.  I don’t want all my logs in one place.  I want to see my use-cases in Cake’s logs when I’m debugging my web app, and I want to see my use-cases in Slim’s logs when I’m debugging my REST API.&lt;/p&gt;

&lt;p&gt;Once SlimPHP and CakePHP support the PSR-3 logger standard internally, I want to pass &lt;em&gt;their&lt;/em&gt; loggers to &lt;em&gt;my&lt;/em&gt; use-cases and get the output &lt;em&gt;I&lt;/em&gt; want in the format &lt;em&gt;I&lt;/em&gt; want - in the location I expect it - with a high signal-to-noise ratio.&lt;/p&gt;

&lt;p&gt;The PSR-3 LoggerInterface has the potential to give me that.  And I think that’s pretty exciting.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md&lt;a href=&quot;#fnref:1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;https://github.com/Seldaek/monolog&lt;a href=&quot;#fnref:2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/08/10/introducing-tweetest-php-test-framework</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/08/10/introducing-tweetest-php-test-framework.html"/>
    <title>Introducing Tweetest</title>
    <published>2012-08-10T00:00:00+01:00</published>
    <updated>2012-08-10T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;A few weeks ago I stumbled upon the &lt;a href=&quot;http://twitto.org/&quot;&gt;Twitto&lt;/a&gt; ‘Web Framework in a Tweet’ by &lt;a href=&quot;http://fabien.potencier.org/&quot;&gt;Fabien Potencier&lt;/a&gt;, creator of the Symphony Framework.&lt;/p&gt;

&lt;p&gt;I was sure I had come across it before, as well as the &lt;a href=&quot;http://f055.net/article/the-140-character-webapp-challenge/&quot;&gt;140 Character Web-App Challenge&lt;/a&gt; that has inspired it, but not paid much attention to either.  What made a difference this time, however, was that earlier that day I had written a tiny test function for a disposable proof of concept that didn’t warrant a full unit testing framework.  I opened up my file from earlier that day, and after a few tweaks, &lt;a href=&quot;https://twitter.com/sixdaysad/status/223484283254349824&quot;&gt;tweeted&lt;/a&gt; the result.&lt;/p&gt;

&lt;p&gt;Since then (mostly for fun) I decided to see if I could replicate all of the assertions from PHPUnit with my tiny test function and nothing more.  It turns out, &lt;a href=&quot;http://adambrett.github.com/tweetest&quot;&gt;you can&lt;/a&gt;, so I gave tweetest a name, created a &lt;a href=&quot;http://github.com/adambrett/tweetest&quot;&gt;GitHub repo&lt;/a&gt; and even a &lt;a href=&quot;http://adambrett.github.com/tweetest&quot;&gt;website&lt;/a&gt; with some documentation to show others what could be done.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/08/03/git-cleanly-move-between-branches</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/08/03/git-cleanly-move-between-branches.html"/>
    <title>Git - A clean branch switching strategy</title>
    <published>2012-08-03T00:00:00+01:00</published>
    <updated>2012-08-03T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;You’re working on &lt;code&gt;feature/awesome-new-stuff&lt;/code&gt; and have a whole bunch of changes that you don’t want to commit yet, and you get a call about a bug that needs to be fixed asap.  You checkout develop, create a hotfix branch and make your changes.  Then you do &lt;code&gt;git status&lt;/code&gt; and see all of your experimental changes from &lt;code&gt;feature/awesome-new-stuff&lt;/code&gt; have come with you, making it harder to spot the changes relating only to the hotfix.&lt;/p&gt;

&lt;h2 id=&quot;the-quick-and-dirty&quot;&gt;The Quick and Dirty&lt;/h2&gt;

&lt;p&gt;The simplest way to avoid this is to stash any changes before you move to another branch, this looks something like this:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3075876.js?file=quick-and-dirty.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git stash
git checkout develop
git flow hotfix start &amp;lt;release&amp;gt;
...
&amp;lt;codecodecode&amp;gt;
...
git flow hotfix finish &amp;lt;release&amp;gt;
git checkout feature/awesome-new-stuff
git stash pop&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;However, if you find yourself doing this a lot, for a lot of different features and branches, this can get messy pretty quickly.  Instead, why not leverage the flexibility of git and just commit early and often, and simply amend as you go:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3075876.js?file=wip.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git add .
git commit -a -m 'WIP'
...
&amp;lt;codecodecode&amp;gt;
...
git add .
git commit --amend&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;Because you are working locally in git commits can be undone and re-done at will, it’s only when you push the commit to a central repository that you need to pay serious attention.&lt;/p&gt;

&lt;p&gt;So create a work in progress commit, and then use &lt;code&gt;git commit --amend&lt;/code&gt; to add to it often.  Then when you go to switch branches to work on another feature you don’t have to worry about stashing and popping or bringing changes with you.&lt;/p&gt;

&lt;p&gt;When you’re ready for the real commit on a branch you can run:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3075876.js?file=finish.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git reset --soft HEAD~
git reset&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;The first reset will undo your last commit (the WIP commit), with the second reset un-staging the files.  You can now re-commit all of your changes paying more serious attention to your commit message.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/25/imagine-php-image-library</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/25/imagine-php-image-library.html"/>
    <title>Make a circle thumbnail with the Imagine PHP Image Library</title>
    <published>2012-07-25T00:00:00+01:00</published>
    <updated>2012-07-25T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;h2 id=&quot;what-is-imagine&quot;&gt;What is Imagine&lt;/h2&gt;

&lt;p&gt;Image processing in PHP is &lt;em&gt;really&lt;/em&gt; unpleasant.  Imagine is a PHP 5.3 library which makes image processing suck way less.  According to the &lt;a href=&quot;http://imagine.readthedocs.org&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/avalanche123/Imagine&quot;&gt;Imagine&lt;/a&gt; is a[n] OOP library for image manipulation built in PHP 5.3 using the latest best practices and thoughtful design that should allow for decoupled and unit-testable code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Put simply, Imagine is a nicely PSR-0 namespace’d wrapper that provides a consistent interface for lower level Gd, ImageMagick and GMagick functionality.  And &lt;em&gt;consistency is good&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you haven’t heard of Imagine, or aren’t familiar with its concepts, go &lt;a href=&quot;https://speakerdeck.com/u/avalanche123/p/introduction-to-imagine&quot;&gt;here&lt;/a&gt; and read the presentation first, as the code below assumes a knowledge of its features concepts.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Whilst re-working an area of our internal CRM, we came up with the idea of cards.  These would be little snippets of information about people, companies, products and other CRM objects related to the page you’re on, neatly stacked in order of importance down the right-hand side of a page.&lt;/p&gt;

&lt;p&gt;Here’s an initial concept for a contact card:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/contact-card-square.png&quot; alt=&quot;Contact Card Square&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pretty good, but we decided we can do a bit bitter, and rounded pictures would be a bit friendlier:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/contact-card-face.png&quot; alt=&quot;Contact Card Round&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Only problem, that makes coding the thumbnails a lot harder.  Our users aren’t going to upload nice transparent rounded pictures for us, so we’re going to have to find a way to process them ourselves.&lt;/p&gt;

&lt;h2 id=&quot;enter-imagine&quot;&gt;Enter Imagine&lt;/h2&gt;

&lt;p&gt;Having read about Imagine, it had peaked my interested, and I’d wanted to use it on a project for a while.  It turns out that creating a circle thumbnail with Imagine is actually really easy.  Much like most custom things in Imagine, you want to create a filter, I called mine &lt;code&gt;CircleThumbnailFilter&lt;/code&gt; (original, I know).  It looks like this:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3060605.js?file=CircleThumbnailFilter.php&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class CircleThumbnailFilter implements Imagine\Filter\FilterInterface
{
    private $imagine;

    public function __construct(Imagine\Image\ImagineInterface $imagine,
        Imagine\Image\BoxInterface $size)
    {
        $this-&amp;gt;imagine = $imagine;
        $this-&amp;gt;size = $size;
    }

    public function apply(Imagine\Image\ImageInterface $image)
    {
        // create a thumbnail
        $thumbnail = $image-&amp;gt;thumbnail(
            $this-&amp;gt;size,
            Imagine\Image\ImageInterface::THUMBNAIL_OUTBOUND
        );

        // create a new image to hold our mask
        // make the background white
        $mask = $this-&amp;gt;imagine-&amp;gt;create($this-&amp;gt;size, new Imagine\Image\Color('fff'));

        // draw a black circle at the center of our new image
        // use $this-&amp;gt;size to make it full width and height
        $mask-&amp;gt;draw()
            -&amp;gt;ellipse(
                new Imagine\Image\Point\Center($this-&amp;gt;size),
                $this-&amp;gt;size,
                new Imagine\Image\Color('000', 0),
                true
            );

        // apply the mask to the thumbnail and return it
        return $thumbnail-&amp;gt;applyMask($mask);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;The constructor is fairly self explanatory, it takes an instance of your imagine interface, and a box instance which is used to control the size of your thumbnail.&lt;/p&gt;

&lt;p&gt;The apply function is the one that does the work, it is required to take exactly one parameter, an instance of &lt;code&gt;Imagine\Image\ImageInterface&lt;/code&gt; which is enforced by &lt;code&gt;Imagine\Filter\FilterInterface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first thing we do is resize our image, if someone uploads a 1000x1000 image, we want to scale it down.&lt;/p&gt;

&lt;p&gt;Next, we create a canvas and call it &lt;code&gt;$mask&lt;/code&gt;.  We so this by calling the &lt;code&gt;create&lt;/code&gt; method on the &lt;code&gt;ImageInterface&lt;/code&gt; we passed to our constructor.  We pass in the &lt;code&gt;BoxInterface&lt;/code&gt; we also passed to our constructor to tell it the size of the image we want to create, and a new &lt;code&gt;Imagine\Image\Color&lt;/code&gt; to tell it the background colour we want.  We then end up with a brand-new instance of &lt;code&gt;Imagine\Image\ImageInterface&lt;/code&gt; in &lt;code&gt;$mask&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we call the draw method on the image stored in $mask to load the &lt;code&gt;Drawer&lt;/code&gt; object, and then we tell it to draw us an ellipse.&lt;/p&gt;

&lt;p&gt;We first pass in the position we want the ellipse drawn at, which is the exact center of the Box we’ve been using all the way through, we tell it that we want our ellipse to be the same size as our box (i.e. to fill it), and we tell it to make it black, with no transparency, and finally we pass &lt;code&gt;true&lt;/code&gt; which tells it that it should be filled, rather than an outline.&lt;/p&gt;

&lt;p&gt;Once we have our mask created, if we were to save it, it would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/contact-card-mask.png&quot; alt=&quot;Contact Card Mask&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We don’t want to output our mask though, we just want to use it to make parts of our square thumbnail transparent.  To do that we use Imagine’s built-in applyMask filter, passing the mask we created earlier in as the only parameter.  We can then return this image so we can use it in our scripts.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To use the filter, you need to include Imagine using &lt;a href=&quot;http://imagine.readthedocs.org/en/latest/usage/introduction.html#installation&quot;&gt;one of the methods in the documentation&lt;/a&gt;, I recommend installing it via &lt;a href=&quot;http://getcomposer.org&quot;&gt;composer&lt;/a&gt;, as Imagine is available on &lt;a href=&quot;http://packagist.org/packages/imagine/Imagine&quot;&gt;packagist&lt;/a&gt;, and then using the composer autoloader to load Imagine via the PSR-0 namespace syntax.&lt;/p&gt;

&lt;p&gt;You will also need to autoload or require the CircleThumbnailFilter object somehow, you could put it in your app’s namespace or just do it the old-school way with &lt;code&gt;require_once&lt;/code&gt;.  Either way, when both are loaded, you can run the circle filter like so:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3060605.js?file=usage.php&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php

$imagine = new Imagine\Gd\Imagine();
$filter  = new CircleThumbnailFilter($imagine, new Imagine\Image\Box(100, 100));

$filter-&amp;gt;apply($imagine-&amp;gt;open('/path/to/square/image.jpg'))
    -&amp;gt;save('/path/to/circle/image.png');&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;Make sure that no-matter what your input format (which isn’t really important, Imagine should know what to do with most valid image formats), make sure you output it as something with transparency (preferably png).  Don’t do what I did and spend 40 minutes wondering why the transparency mask wasn’t applying when you were outputting as a jpg.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/17/cakephp-class-string-not-found</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/17/cakephp-class-string-not-found.html"/>
    <title>Class 'String' not found in app/Model/User.php on line xx</title>
    <published>2012-07-17T00:00:00+01:00</published>
    <updated>2012-07-17T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;This is a really easy to fix error that occurs in a very specific situation.  Namely when developing an application in CakePHP that makes use of the ACL behavior whilst also having a &lt;code&gt;beforeSave&lt;/code&gt; method on the User model.  It can be pretty frustrating at first because there’s nothing about it on the Internet, and as far as you can tell, there isn’t an error on line xx, and you’re not using the String object anywhere.&lt;/p&gt;

&lt;p&gt;It’s happening because of a missing options array on the &lt;code&gt;beforeSave&lt;/code&gt; method you added to the User model.  Simply change:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;public function beforeSave() {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function beforeSave($options = array()) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and make sure that you call &lt;code&gt;parent::beforeSave($options)&lt;/code&gt; somewhere in your method definition.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/13/unchangable-public-variables-in-php</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/13/unchangable-public-variables-in-php.html"/>
    <title>Unchangable Public Variables In PHP</title>
    <published>2012-07-13T00:00:00+01:00</published>
    <updated>2012-07-13T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;If you’ve ever had a use-case where you want to make a class property publicly readable, but not writable, (without adding a getter), this is how you do it.&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;Obviously, the easiest (and probably correct/best) way to do this is to add a getter to the class that returns the value of the private/protected property.  However this is a trick to make it appear as a normal property (in case you don’t want any getters in your API, for example).&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;p&gt;This trick involves using PHP’s magic methods and looks like this:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3104351.js?file=MagicPublicProperty.php&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class MagicPublicProperty {
    protected $_primaryKey = 'id';

    public function __set($property, $value) {
        if($property == 'primaryKey') {
            $name = get_class($this);
            throw new Exception(&amp;quot;Unable to set property `{$property}` on&amp;quot;
                . &amp;quot; objects of type `{$name}`&amp;quot;);
        }
    }

    public function __get($property) {
        if($property == 'primaryKey' &amp;amp;&amp;amp; isset($this-&amp;gt;_primaryKey)) {
            return $this-&amp;gt;_primaryKey;
        }
    }

    public function __isset($property) {
        if($property == 'primaryKey') {
            return isset($this-&amp;gt;_primaryKey);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;Here we have a protected property that is obviously only accessible to instances of this class or child classes.&lt;/p&gt;

&lt;p&gt;Below that we are using PHP’s magic methods &lt;code&gt;__get&lt;/code&gt; and &lt;code&gt;__isset&lt;/code&gt; to intercept calls to this class’ properties and we’re checking to see if the property attempting to be accessed is &lt;code&gt;primaryKey&lt;/code&gt;.  If it is, we return either the &lt;code&gt;isset&lt;/code&gt; result or the value, depending on what we want to do.  This bit is fairly straight forward.&lt;/p&gt;

&lt;p&gt;To stop anyone from attempting to set the value of this property from outside of the class, we need to add something to the &lt;code&gt;__set&lt;/code&gt; magic method, if we didn’t, it could lead to unexpected results.  We &lt;em&gt;could&lt;/em&gt; just trap it and return, doing nothing, but to make sure no-one does this accidentally in their code expecting it work, we should throw an exception with a helpful message.&lt;/p&gt;

&lt;p&gt;What if you want it to be modified from outside of the class too?&lt;/p&gt;

&lt;p&gt;Make it public (duh).&lt;/p&gt;

&lt;h3 id=&quot;tests&quot;&gt;Tests&lt;/h3&gt;

&lt;p&gt;Here are some quick tests to prove it’s working as expected:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3104351.js?file=tests.php&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php

require_once __DIR__ . '/MagicPublicProperty.php';

$test = new MagicPublicProperty;

/*
Added the following methods to MagicPublicProperty for the below tests:

    public function changePrimaryKey() {
        $this-&amp;gt;_primaryKey = array(
            'foreign_key_1',
            'foreign_key_2'
        );
    }

    public function removePrimaryKey() {
        unset($this-&amp;gt;_primaryKey);
    }

*/

test(isset($test-&amp;gt;primaryKey), 'Is set');

test($test-&amp;gt;primaryKey == 'id', 'Is accessible');

test(function() use ($test) {
    $test-&amp;gt;changePrimaryKey();
    return is_array($test-&amp;gt;primaryKey);
}, 'Is internally changeable');

test(function() use ($test) {
    try {
        $test-&amp;gt;primaryKey = 'somethingelse';
    } catch (Exception $e) {
        return true;
    }

    return false;
}, 'Exception if set');

function test($c,$m) {
    $c = (is_callable($c)) ? $c() : $c;
    if($c) {
        echo &amp;quot;$m: Passed\n&amp;quot;;
    } else {
        echo &amp;quot;$m: Failed\n&amp;quot;;
    }
}
echo &amp;quot;\n\n&amp;quot;;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;and the results:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3104351.js?file=results&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;Is set: Passed
Is accessible: Passed
Is internally changeable: Passed
Exception if set: Passed&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/10/unable-to-run-adb-andriod-ubuntu-eclipse</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/10/unable-to-run-adb-andriod-ubuntu-eclipse.html"/>
    <title>Unable to run 'adb', Andriod SDK, Ubuntu, Eclipse</title>
    <published>2012-07-10T00:00:00+01:00</published>
    <updated>2012-07-10T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;If you get the following really annoying message while trying to install the andriod SDK on ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stopping ADB server failed (code -1).
Unable to run 'adb': Cannot run program &quot;/home/user/android-sdk-linux/platform-tools/adb&quot;: java.io.IOException: error=2, No such file or directory.
Starting ADB server failed (code -1).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s because you’re running 64bit ubuntu, and phones (and therefore the SDK) are only 32bit, if you run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install ia32-libs&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will solve all of your problems and the SDK will install correctly.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/04/git-changes-wrong-branch</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/04/git-changes-wrong-branch.html"/>
    <title>Git - Help! I made my changes on the wrong branch (easy fix)</title>
    <published>2012-07-04T00:00:00+01:00</published>
    <updated>2012-07-04T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;h2 id=&quot;weve-all-done-it&quot;&gt;We’ve all done it&lt;/h2&gt;

&lt;p&gt;You get an emergency email from your boss and have to immediately drop everything you’re doing to solve his problem.  You listen to what’s wrong and make all the necessary changes, test it, and then you’re ready to commit, only you’re on &lt;code&gt;feature/awesome-new-stuff&lt;/code&gt; and forgot to checkout &lt;code&gt;develop&lt;/code&gt; before you made your changes. ****.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All is not lost&lt;/em&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Pre-git, I have no idea how I would have fixed this.  Separating your fixes with your feature changes would probably have been done by hand, and taken ages.&lt;/p&gt;

&lt;p&gt;However thanks to git we can simply checkout the correct branch, and and our untracked changes will move with us.&lt;/p&gt;

&lt;h2 id=&quot;if-youve-not-committed-yet&quot;&gt;If you’ve not committed yet&lt;/h2&gt;

&lt;p&gt;First, make sure all of your &lt;em&gt;feature&lt;/em&gt; changes are committed to the correct branch (but &lt;em&gt;not&lt;/em&gt; the fixes you want to move!), then:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3047748.js?file=checkout.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git checkout &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;Be sure to replace &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; with the name of the branch you actually want to commit to.&lt;/p&gt;

&lt;h2 id=&quot;if-youve-already-committed-the-changes&quot;&gt;If you’ve already committed the changes&lt;/h2&gt;

&lt;p&gt;If you’ve already committed your changes, you need to do a SOFT reset. A soft reset will put your changes back into the index, instead of destroying them like a HARD reset would:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3047748.js?file=soft-reset.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;A quick note here, the ^ is the number of commits to roll-back, so if you wanted to go back 2 commits, you’d use:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3047748.js?file=soft-reset-2.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^^&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;and for 3 commits&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3047748.js?file=soft-reset-3.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^^^&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;and so on… then you can run the &lt;a href=&quot;#if-youve-not-committed-yet&quot;&gt;checkout&lt;/a&gt; command above.&lt;/p&gt;

&lt;h2 id=&quot;if-there-is-a-conflict-between-the-two-branches&quot;&gt;If there is a conflict between the two branches&lt;/h2&gt;

&lt;p&gt;If the changes you want to move will conflict with something on the branch you’re moving to git will simply refuse to checkout the new branch.  In this instance you want to use the stash-checkout-pop command like so:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3047748.js?file=stash-checkout-pop.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git stash &amp;amp;&amp;amp; git checkout &amp;lt;branch&amp;gt; &amp;amp;&amp;amp; git stash pop&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;This will stash the changes so you have nothing to move, then checkout the new branch (as with nothing to move there can be no conflicts), and finally pop the stashed changes into the new branch ready for committing.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Unless you’ve made changes in the same files as your fixes, you’ll have to find another way, sorry!&lt;a href=&quot;#fnref:1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/03/anatomy-of-a-good-commit-message</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/03/anatomy-of-a-good-commit-message.html"/>
    <title>Anatomy Of A Good Commit Message</title>
    <published>2012-07-03T00:00:00+01:00</published>
    <updated>2012-07-03T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;The developers at my new job have been using subversion for the last 8 years, and with a few exceptions, huge &lt;em&gt;code-bomb&lt;/em&gt; style commits covering numerous features and changes (and with generic one-line commit messages) seem to have been the norm.  Source control was used primarily for backup (a sin I think many teams are guilty of at one point or another), and wasn’t used to its full potential, so no-one really paid attention to commit messages or the size of commits; after they were written they were never referenced again.&lt;/p&gt;

&lt;p&gt;When I joined the team, they had already researched and seen the benefits of Git and wanted to move as soon as possible. With my advocation and re-iteration of the various benefits management were quickly convinced and the work was scheduled.  I wanted to make sure Git became a useful tool for the whole team and once everything was ready to be moved across, that meant introducing the idea of smaller atomic commits with better (more useful) commit messages.&lt;/p&gt;

&lt;p&gt;There are already a few &lt;a href=&quot;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;good&lt;/a&gt; &lt;a href=&quot;http://lbrandy.com/blog/2009/03/writing-better-commit-messages/&quot;&gt;posts&lt;/a&gt; and &lt;a href=&quot;http://programmers.stackexchange.com/questions/42110/can-you-recommend-a-good-commit-message-template-guidelines-to-enforce-in-the&quot;&gt;discussions&lt;/a&gt; about what makes a good commit message, but they all lack the rigidity that I felt we were going to need to break 8 years of bad habit.  I wanted a system I could present that wasn’t going to be overwhelming to a team of widely varying skill levels, on top of getting used to a new SCM, a new way of working (with feature branches/git flow) and smaller atomic commits.&lt;/p&gt;

&lt;p&gt;Whilst the information already out there is great, it doesn’t provide the copy, paste, and fill-in-the-blanks kind of template I wanted for the junior developers so they didn’t have to think too much about their commit messages (at least until they became more familiar with the new tools and processes), and those already familiar with good commit practices had a rock solid base to work from.&lt;/p&gt;

&lt;h2 id=&quot;template&quot;&gt;Template&lt;/h2&gt;

&lt;p&gt;With that in mind, I compiled the various posts and discussions on commit messages into the following template, the bulk of the template is from &lt;a href=&quot;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;here&lt;/a&gt; with a couple of minor modifications.  It’s &lt;a href=&quot;https://github.com/blog/926-shiny-new-commit-styles&quot;&gt;widely accepted&lt;/a&gt; as the best example of a good commit message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Action: Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical; tools like
rebase can get confused if you run the two together.

Write your commit message in the present tense: &quot;Fix bug&quot; and not &quot;Fixed
bug.&quot;  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a
  single space, with blank lines in between, but conventions vary here

- Use a hanging indent

Relation: #issue
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;rules&quot;&gt;Rules&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The body of a commit is mandatory.  You should explain to those who might be looking back over your code why you did what you did in this commit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Commits should be atomic.  That is, a single unit of functionality that can be applied or reverted in its entirety.  Commits should not include changes across functionality.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The first word of the summary should be one of:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Add&lt;/li&gt;
      &lt;li&gt;Modify&lt;/li&gt;
      &lt;li&gt;Re-factor&lt;/li&gt;
      &lt;li&gt;Fix&lt;/li&gt;
      &lt;li&gt;Remove&lt;/li&gt;
      &lt;li&gt;Tidy&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;And should accurately describe what you’re doing with this commit.  If you’re doing more than one of these actions in a commit, you should probably consider breaking them into smaller commits.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last line of the description should be one of the following statuses, followed by a hash (#) and the issue number from the tracker, if relevant:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Fixes&lt;/li&gt;
      &lt;li&gt;Closes&lt;/li&gt;
      &lt;li&gt;References&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Your keywords may vary, but in our issue tracker &lt;em&gt;fixes&lt;/em&gt; and &lt;em&gt;closes&lt;/em&gt; are keywords that will assign statuses to an issue, &lt;em&gt;references&lt;/em&gt; doesn’t do anything, but including the issue number with a # will link the commit to that issue, so it’s nice to know that you’re just putting it in there to reference the issue.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These rules haven’t been in use very long, and aren’t set in stone.  As time goes on we might find ourselves relaxing them, adding to them, or changing them all together.  As a base to work from they pretty solid right now and should stand us in good stead for the foreseeable future.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/06/29/welcome-to-the-first-post</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/06/29/welcome-to-the-first-post.html"/>
    <title>The lorem ipsum</title>
    <published>2012-06-29T00:00:00+01:00</published>
    <updated>2012-06-29T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;Hello, this is a test.&lt;/p&gt;

&lt;p&gt;Ever since I got my first low spec VPS I’ve been interested in finding more efficient ways of using those resources.  I’ve looked at all sorts of caching and server tweaks aimed as consuming less resources and had some successes, and quite a lot of failures, so when I first came across the jekyll blogging engine a few years ago &lt;em&gt;it just made sense&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ever since then I’ve wanted to try using it, but for one reason or another never got around to it.  Now that’s going to change, this is my first foray into blogging with jekyll, and I’m going to see how it goes.  Stay tuned.&lt;/p&gt;
</content>
  </entry>
  
 
</feed>
