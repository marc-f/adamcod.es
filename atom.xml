<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
  <title>Adam Codes</title>
  <link href="http://example.com/"/>
  <link type="application/atom+xml" rel="self" href="http://adamcod.es/atom.xml"/>
  <updated>2013-01-14T10:02:07+00:00</updated>
  <id>http://adamcod.es/</id>
  <author>
    <name>Adam Brett</name>
    <email>adam@adambrett.co.uk</email>
  </author>

  
  <entry>
    <id>http://adamcod.es/2013/01/15/vagrant-is-easy-chef-is-hard-part2</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/01/15/vagrant-is-easy-chef-is-hard-part2.html"/>
    <title>Vagrant is easy - Chef is hard (Part 2).</title>
    <published>2013-01-15T00:00:00+00:00</published>
    <updated>2013-01-15T00:00:00+00:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;This is part 2 of a 2 part quick-start to using Vagrant&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and Chef&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; to speed up and simplify your development environment.  If you haven’t read the first part, and aren’t already familiar with Vagrant go to &lt;a href=&quot;/2013/01/15/vagrant-is-easy-chef-is-hard.html&quot;&gt;part 1 here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In part 1 we covered the key commands and config settings you need to get vagrant up and running quickly with little-to-no fuss.  But that was the easy part.  Now comes the hard part.  Chef.&lt;/p&gt;

&lt;h2 id=&quot;chef&quot;&gt; Chef&lt;/h2&gt;

&lt;p&gt;The reason Chef is so hard, and the reason it has such as steep learning curve, is that every single blog post or tutorial, and even the chef manual itself, all deal with low-level Chef.  That is not what we want.  As a developer I have a hundred things to do and no time to do them.  I don’t care about low-level stuff.  I want stuff that Just Works.  So here we go.  This is the least amount of knowledge you need to get a lamp stack up and running on Vagrant.  As a side effect of that, you’ll actually learn quite a bit of Chef along the way.&lt;/p&gt;

&lt;h3 id=&quot;key-points&quot;&gt;Key Points&lt;/h3&gt;

&lt;p&gt;Before we start, there are a couple of key definitions you’re going to need to learn to make your life simpler.  They aren’t difficult, and I’ll do my best to distil them down to a basic level.&lt;/p&gt;

&lt;h4 id=&quot;cookbooks&quot;&gt;Cookbooks&lt;/h4&gt;

&lt;p&gt;Installing things (apache, mysql, php etc) is done by something called Cookbooks.  Cookbooks are a collection of Templates and &lt;em&gt;Recipes&lt;/em&gt; (and a few other things we don’t care about right now) that  tell Chef how to install something.&lt;/p&gt;

&lt;h5 id=&quot;recipes&quot;&gt;Recipes&lt;/h5&gt;

&lt;p&gt;At a basic level, a &lt;em&gt;Recipe&lt;/em&gt; is a ruby file that calls a bunch of Chef functions to install something.&lt;/p&gt;

&lt;h5 id=&quot;templates&quot;&gt;Templates&lt;/h5&gt;

&lt;p&gt;A template is much like a PHP app template with variable replacements, loops etc, but for system config files.  Think v-hosts, httpd.conf, php.ini etc.&lt;/p&gt;

&lt;h5 id=&quot;lwrp&quot;&gt; LWRP&lt;/h5&gt;

&lt;p&gt;You will see LWRPs mentioned a lot and it’s not immediately obvious what they are.  It stands for &lt;em&gt;Light Weight Resource Providers&lt;/em&gt;.  But really they’re functions that do something Chefy (like install a Pecl Module/PEAR Library in the PHP Cookbook).  They should just call them that.  You don’t really need to use these yet, but I figured you’d want to know what they are when you see them mentioned elsewhere.&lt;/p&gt;

&lt;h4 id=&quot;chef-server-vs-chef-solo&quot;&gt;Chef Server vs Chef Solo&lt;/h4&gt;

&lt;p&gt;Chef comes in two flavours.  Chef Solo and Chef Server.  Chef is always run on the guest or machine being provisioned, not your own machine or workstation.  That means it needs to have the cookbooks copied across in order for it to know where they are.  Chef Server takes care of this for you (the copying across), as well as managing a central repository of your cookbooks.&lt;/p&gt;

&lt;p&gt;Chef Server can also do some other fancy stuff (such as provisioning new EC2 instances for you), but unless you’re using it for a live server or professional dev-ops (and we’re not), forget about it.  We can copy the cookbooks across ourselves (or in reality vagrant will).&lt;/p&gt;

&lt;p&gt;One final point of note: Opscode (the company behaind chef) will host a Chef server for you, or you can do it yourself.  It would appear Chef can provision it’s own Chef Server, but I’ve not tried.&lt;/p&gt;

&lt;h4 id=&quot;roles&quot;&gt; Roles&lt;/h4&gt;

&lt;p&gt;A role is simply a type of server.  E.g. If you have a distributed architecture with a load balancer, 2x web servers and 2x database servers, your roles would be “Load Balancer”, “Web Server”, and “Database Server”.  That’s a role.&lt;/p&gt;

&lt;p&gt;A role is not limiting, in reality it’s a name given to a collection of cookbooks you want to run.  E.g. You specify that your webserver roll should run the apache, php, and mysql cookbooks.  The cookbooks that a particular role should run is called a “Run List” in Chef, that’s because the name of the Chef function you pass the cookbooks to run to is &lt;code&gt;run_list&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;extra-credit&quot;&gt; Extra Credit&lt;/h4&gt;

&lt;p&gt;You don’t need to know about this, but I will cover it here for completeness.  Chef also has the concepts of “Nodes” and “Data-Bags”.  I haven’t used these features, but my understanding is that a “Node” is an instance of a Role.  So you have your 2x webservers, each using the “Web Server” role.  Each one of those is a Node.&lt;/p&gt;

&lt;p&gt;From my understanding, “Data-Bags” provide additional data to your Recipes, this could be a list of admins or databases to create, or something similar.  I haven’t used them, so I’m not familiar with them.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt; Getting Started&lt;/h3&gt;

&lt;p&gt;Now the real quickstart.  You need a directory to hold your Chef related stuff, for simplicity when updating cookbooks, you need that directory managed with git.  This is fairly essential as managing updates to your cookbooks by hand would be a nightmare.  From your application’s root directory run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ../
mkdir -p chef/{cookbooks,data_bags,nodes,roles,site-cookbooks}
cd chef
git init .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s our basic directory structure.  Done.  Next we need to add some cookbooks.  Thankfully, there are a ton of them available on Github&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; that we can use.  We don’t need to write our own (most tutorials focus on writing your own… I don’t know why).&lt;/p&gt;

&lt;p&gt;Now think about what you would normally do when building a new ubuntu VM.  First, you sort out apt to make sure everything is up to date.  Cookbooks live in, unsurprisingly, the cookbooks directory, so lets add the apt cookbook to take care of apt for us:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/opscode-cookbooks/apt.git cookbooks/apt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, now we want apache2 up and running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/opscode-cookbooks/apache2.git cookbooks/apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom. Done.  MySQL?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/opscode-cookbooks/mysql.git cookbooks/mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/opscode-cookbooks/php.git cookbooks/php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok.  We have our cookbooks.  Now we need to add a role so Chef knows which ones to run (you could add a whole bunch of cookbooks here, then in the roll only run a select few).&lt;/p&gt;

&lt;p&gt;So, create &lt;code&gt;roles/vagrant-test-box.rb&lt;/code&gt; and add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Name of the role should match the name of the file
name &quot;vagrant-test-box&quot;

# Run list function we mentioned earlier
run_list(
    &quot;recipe[apt]&quot;,
    &quot;recipe[apache2]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[php]&quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it.  Done.  Now lets briefly go back to the Vagrantfile we created in part1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Enable provisioning with chef solo, specifying a cookbooks path, roles
# path, and data_bags path (all relative to this Vagrantfile), and adding
# some recipes and/or roles.
config.vm.provision :chef_solo do |chef|
    chef.roles_path = &quot;../chef/roles&quot;
    chef.cookbooks_path = [&quot;../chef/site-cookbooks&quot;, &quot;../chef/cookbooks&quot;]
    chef.add_role &quot;vagrant-test-box&quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See that bit at the bottom.  That’s how vagrant knows to use Chef, and where to find your cookbooks.  If you’ve stored your cookbooks somewhere other than where I’ve suggested, update the paths here, otherwise, let’s update the role to “vagrant-test-box”, as that’s what we just created, and then go back to your application root and run &lt;code&gt;vagrant up&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Everything should run successfully, you’ll see it all whizzing past as Chef installs it, and it will drop you back to a shell prompt with the VM running and provisioned.  Awesome.  You can have a quick test by visiting 192.168.33.33 in your browser, or www.example.vm if you installed the vagrant-hostmaster plugin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/successful-chef-provision.png&quot; alt=&quot;Successful Chef Provision&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets look at what was created in a bit more detail.  Run &lt;code&gt;vagrant ssh&lt;/code&gt; to login to the VM.  Now type &lt;code&gt;mysql -u root -p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Uh oh.  Two problems.  First, we never set a password for the MySQL server, so we can’t login, second, if we run that command without a password, we get the error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySQL Server isn’t installed?? Why??  Lets take a look at the cookbook.&lt;/p&gt;

&lt;p&gt;When you add a cookbook to your run list as we did above, Chef will run the default recipe, which can be found in &lt;code&gt;recipes/default.rb&lt;/code&gt;.  So let’s take a look at &lt;code&gt;cookbooks/mysql/recipes/default.rb&lt;/code&gt; and see what’s going on.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include_recipe &quot;mysql::client&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right.  We installed the MySQL Client, but not MySQL Server.  The astute amongst you will have spotted another file in &lt;code&gt;cookbooks/mysql/recipes&lt;/code&gt; called &lt;code&gt;server.rb&lt;/code&gt;.  A cookbook can contain multiple recipes, and by default the MySQL cookbook only installs the MySQL Client, to install the server we also need to add the MySQL Server recipe to our run list.  You specify a recipe inside a cookbook other than the default using the &lt;code&gt;::&lt;/code&gt; syntax you can see above.  Lets modify our &lt;code&gt;vagrant-test-box&lt;/code&gt; role to look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Name of the role should match the name of the file
name &quot;vagrant-test-box&quot;

# Run list function we mentioned earlier
run_list(
    &quot;recipe[apt]&quot;,
    &quot;recipe[apache2]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[mysql::server]&quot;,
    &quot;recipe[php]&quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve left the default MySQL recipe in there as we’re going to need the MySQL Client to administer our server.&lt;/p&gt;

&lt;p&gt;Now run &lt;code&gt;vagrant provision&lt;/code&gt; to run Chef again, and let’s see what happens.&lt;/p&gt;

&lt;p&gt;You got an error? Good.  What you’ve just come across is the complete disaster that is Chef error messages.  Totally useless.  What it’s actually complaining about is a missing constant: &lt;code&gt;Opscode::OpenSSL&lt;/code&gt;.  This is actually a symptom of something else.  Some cookbooks and recipes have dependencies on other cookbooks and recipes.  Specifically in this instance, the &lt;code&gt;mysql::server&lt;/code&gt; recipe depends on the &lt;code&gt;openssl&lt;/code&gt; cookbook.&lt;/p&gt;

&lt;p&gt;Fortunately for us, the cookbooks in the opscode GitHub repository have fairly good README’s that list their dependencies fairly well.  Let’s take a look at the cookbooks we’ve included so far and see if they have any other dependencies we’ve missed.  Go ahead, I’ll wait.&lt;/p&gt;

&lt;p&gt;Great, It looks like only &lt;code&gt;mysql::server&lt;/code&gt; has any dependencies.  Apache2 has some dependencies if you’re using RHEL or CentOS, and PHP does if you’re going to build it from source, but we’re not so we can just add the missing openssl cookbook and get on with it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ../chef
git submodule add https://github.com/opscode-cookbooks/openssl.git cookbooks/openssl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s add it to our run list before &lt;code&gt;mysql::server&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;run_list(
    &quot;recipe[apt]&quot;,
    &quot;recipe[openssl]&quot;,
    &quot;recipe[apache2]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[mysql::server]&quot;,
    &quot;recipe[php]&quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve added it to just after apt for neatness.  You can add it anywhere you want before &lt;code&gt;mysql::server&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s try again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant provision
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh no… another cryptic error.  The key line here is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FATAL: You must set node['mysql']['server_debian_password'], node['mysql']['server_root_password'], node['mysql']['server_repl_password'] in chef-solo mode. For more information, see https://github.com/opscode-cookbooks/mysql#chef-solo-note
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We forgot to set our root password so we can login to the server, and Chef knows it, so it won’t let us proceed without it.  Now we need to learn about &lt;code&gt;override_attributes&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;override_attributes(
    &quot;mysql&quot; =&amp;gt; {
        &quot;server_root_password&quot; =&amp;gt; 'iloverandompasswordsbutthiswilldo',
        &quot;server_repl_password&quot; =&amp;gt; 'iloverandompasswordsbutthiswilldo',
        &quot;server_debian_password&quot; =&amp;gt; 'iloverandompasswordsbutthiswilldo'
    }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not massively scary.  Put this in your &lt;code&gt;vagrant-test-box.rb&lt;/code&gt; role before your run list.  This function allows you to override some defaults setup in the cookbooks on a per-role basis.  Nothing too difficult, it is again often documented in the cookbook’s README, or is fairly easy to find by searching the cookbooks’s templates or recipes for things like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node['apache']['log_dir']
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s a fairly good indication we can overwrite that attribute in our role by adding the key to our override attributes function call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;override_attributes(
    &quot;apache&quot; =&amp;gt; {
        &quot;log_dir&quot; =&amp;gt; &quot;/srv/logs&quot; # new attribute overridden
    },
    &quot;mysql&quot; =&amp;gt; {
        &quot;server_root_password&quot; =&amp;gt; 'iloverandompasswordsbutthiswilldo',
        &quot;server_repl_password&quot; =&amp;gt; 'iloverandompasswordsbutthiswilldo',
        &quot;server_debian_password&quot; =&amp;gt; 'iloverandompasswordsbutthiswilldo'
    }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, don’t add that to your role for real, as we haven’t created that directory so it will cause an error.&lt;/p&gt;

&lt;p&gt;Now your role should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Name of the role should match the name of the file
name &quot;vagrant-test-box&quot;

override_attributes(
    &quot;mysql&quot; =&amp;gt; {
        &quot;server_root_password&quot; =&amp;gt; 'iloverandompasswordsbutthiswilldo',
        &quot;server_repl_password&quot; =&amp;gt; 'iloverandompasswordsbutthiswilldo',
        &quot;server_debian_password&quot; =&amp;gt; 'iloverandompasswordsbutthiswilldo'
    }
)

# Run list function we mentioned earlier
run_list(
    &quot;recipe[apt]&quot;,
    &quot;recipe[openssl]&quot;,
    &quot;recipe[apache2]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[mysql::server]&quot;,
    &quot;recipe[php]&quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the file and run another &lt;code&gt;vagrant provision&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Are you noticing a pattern here?  Well done.  That’s how we can debug our recipes.  Change -&amp;gt; &lt;code&gt;vagrant provision&lt;/code&gt; -&amp;gt; Error -&amp;gt; Repeat until it works.  If the error isn’t obvious, Google is your friend.  Chef will also always give you a stack trace which will show you the recipe and line giving the error, a quick read of the source can usually give you a good indication of what’s really going on.  It reads close to plain English, so you stand a good chance of understanding even if you don’t know Ruby.&lt;/p&gt;

&lt;p&gt;This time it should run successfully, so log back in with &lt;code&gt;vagrant ssh&lt;/code&gt; and try to connect to MySQL with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql -u root -piloverandompasswordsbutthiswilldo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should drop you into a &lt;code&gt;mysql&amp;gt;&lt;/code&gt; prompt, where you can run &lt;code&gt;show databases;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
+--------------------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is looking good.  Type &lt;code&gt;quit&lt;/code&gt; to exit MySQL, now type &lt;code&gt;php --version&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PHP 5.3.2-1ubuntu4.18 with Suhosin-Patch (cli) (built: Sep 12 2012 19:33:42)
Copyright (c) 1997-2009 The PHP Group
Zend Engine v2.3.0, Copyright (c) 1998-2010 Zend Technologies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even better. Now let’s enable the default site and test Apache.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo a2ensite default
sudo service apache2 reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll notice we didn’t need to type a password, vagrant was good enough to add itself to the automatic sudoer’s list.  Now visit www.example.vm or 192.168.33.33 if you aren’t using the hostmaster plugin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/it-works.png&quot; alt=&quot;Apache Default Site&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re getting there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &quot;&amp;lt;?php phpinfo();&quot; | sudo tee /var/www/info.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visit www.example.vm/info.php or 192.168.33.33/info.php to see if it works.  Damn, it downloaded the file.  Ok.  A quick look through the recipes in the Apache2 cookbook shows a &lt;code&gt;mod_php5&lt;/code&gt; recipe.  We probably need to add that, so lets add it to our run list and try again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Run list function we mentioned earlier
run_list(
    &quot;recipe[apt]&quot;,
    &quot;recipe[openssl]&quot;,
    &quot;recipe[apache2]&quot;,
    &quot;recipe[apache2::mod_php5]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[mysql::server]&quot;,
    &quot;recipe[php]&quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run &lt;code&gt;vagrant provision&lt;/code&gt; and try to load the info file in our browser again when it’s finished.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/not-found.png&quot; alt=&quot;Not Found&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What’s that all about?  Well, Chef has just re-installed everything for you, so Apache’s config is all new again.  Let’s repeat the steps above.  Make a note we need to find a way to make our virtual hosts persistent.  We’ll come back to it soon.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
sudo a2ensite default
sudo service apache2 reload
echo &quot;&amp;lt;?php phpinfo();&quot; | sudo tee /var/www/info.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now try to load info.php again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/vagrant-phpinfo.png&quot; alt=&quot;Vagrant phpinfo()&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Success!  But a quick scan of the &lt;code&gt;info.php&lt;/code&gt; output shows the MySQL section is missing.  Let’s verify that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php --info | grep mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing.  Let’s check the PHP cookbook.  There’s a &lt;code&gt;module_mysql&lt;/code&gt; recipe! Excellent.  Are you spotting another pattern here?  Nothing is enabled by default with the opscode cookbooks, if it’s optional, you have to specify it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Run list function we mentioned earlier
run_list(
    &quot;recipe[apt]&quot;,
    &quot;recipe[openssl]&quot;,
    &quot;recipe[apache2]&quot;,
    &quot;recipe[apache2::mod_php5]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[mysql::server]&quot;,
    &quot;recipe[php]&quot;,
    &quot;recipe[php::module_mysql]&quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run &lt;code&gt;vagrant provision&lt;/code&gt; again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
php --info | grep mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much better.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/vagrant-mysql-info.png&quot; alt=&quot;Vagrant php mysql info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That just leaves us with one last thing.  Getting our data and virtual hosts to persist between provisions.&lt;/p&gt;

&lt;p&gt;I know I said we wouldn’t need them, but to get our virtual host to point at our code and persist between provisions, we need to use a LWRP.  Specifically the &lt;code&gt;web_app&lt;/code&gt; LWRP from the apache2 cookbook.&lt;/p&gt;

&lt;p&gt;This may or may not be the &lt;em&gt;right&lt;/em&gt; way to do this, but I know it works so it’s how I’m going to do it until I find a better way.  Create a directory in &lt;code&gt;chef/site-cookbooks&lt;/code&gt; called &lt;code&gt;apache2&lt;/code&gt;.  Inside there, create another directory called &lt;code&gt;recipes&lt;/code&gt;.  Now add a file called &lt;code&gt;vhosts.rb&lt;/code&gt; with the content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#
# Cookbook Name:: apache2
# Recipe:: vhosts
#
# Copyright 2012, Adam Brett. All Rights Reserved.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
include_recipe &quot;apache2&quot;

web_app &quot;example&quot; do
  server_name &quot;www.example.vm&quot;
  server_aliases [&quot;example.vm&quot;]
  allow_override &quot;all&quot;
  docroot &quot;/srv/site/&quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember how in our &lt;code&gt;Vagrantfile&lt;/code&gt; we told Vagrant to mount the current directory at &lt;code&gt;/srv/site&lt;/code&gt;?  That’s so our source code was available in the VM.&lt;/p&gt;

&lt;p&gt;Now we create a custom recipe (hence the site-cookbooks location), and import the apache2 default recipe.&lt;/p&gt;

&lt;p&gt;There’s something important to note here.  If you create a recipe in &lt;code&gt;site-cookbooks&lt;/code&gt; that has a recipe of the exact same name and location as one in &lt;code&gt;cookbooks&lt;/code&gt;, the one in &lt;code&gt;site-cookbooks&lt;/code&gt; will be used.  This allows you to extend or modify the opscode cookbooks without having to modify them directly.  This is why we used git to manage this directory.  We can now very easily update all of our cookbooks with git without worrying about overwriting any of our custom modifications.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;web_app&lt;/code&gt; LWRP (or function) is defined in &lt;code&gt;cookbooks/apache2/definitions/web_app.rb&lt;/code&gt;. If you open this file and take a look, you can see in here lots of calls to &lt;code&gt;params[:something]&lt;/code&gt;.  These are the params you can pass to the function call.  You can also see it’s using the template &lt;code&gt;web_app.conf.erb&lt;/code&gt;.  Open this file in the &lt;code&gt;apache2/templates/default&lt;/code&gt; directory and you can see a bunch more params you can pass to this function/LWRP.  We only need to use a couple so we’ll leave the recipe as it is.&lt;/p&gt;

&lt;p&gt;You include your own recipes in the run list exactly as you would a normal one, so lets add ours:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Run list function we mentioned earlier
run_list(
    &quot;recipe[apt]&quot;,
    &quot;recipe[openssl]&quot;,
    &quot;recipe[apache2]&quot;,
    &quot;recipe[apache2::mod_php5]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[mysql::server]&quot;,
    &quot;recipe[php]&quot;,
    &quot;recipe[php::module_mysql]&quot;,
    &quot;recipe[apache2::vhosts]&quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run &lt;code&gt;vagrant provision&lt;/code&gt; again, and visit www.example.vm in your browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/vagrant-local-website.png&quot; alt=&quot;Vagrant Local Website&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Success!  Any index.html you have in your application root should now be loaded in your browser.  If you need to load an &lt;code&gt;index.php&lt;/code&gt; or something else, add the &lt;code&gt;directory_index&lt;/code&gt; paramter to the web_app LWRP call.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;web_app &quot;example&quot; do
  server_name &quot;www.example.vm&quot;
  server_aliases [&quot;example.vm&quot;]
  directory_index [&quot;index.html&quot;, &quot;index.php&quot;]
  allow_override &quot;all&quot;
  docroot &quot;/srv/site/&quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we’re pretty close.  All that’s left now to have something &lt;em&gt;really&lt;/em&gt; useful is to import our database schema.&lt;/p&gt;

&lt;p&gt;Fortunately for us, the guys have opscode have a cookbook for that too.  It’s called database, and we’re going to need some LWRP providers from it again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ../chef
git submodule add https://github.com/opscode-cookbooks/database.git cookbooks/database
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;database&lt;/code&gt; cookbook recipe &lt;code&gt;mysql&lt;/code&gt; has a dependency on the &lt;code&gt;build-essential&lt;/code&gt; cookbook, so let’s add that too.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/opscode-cookbooks/build-essential.git cookbooks/build-essential
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add the database::mysql recipe, build-essential default recipe, and another custom one we’re about to create to your run list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Run list function we mentioned earlier
run_list(
    &quot;recipe[apt]&quot;,
    &quot;recipe[build-essential]&quot;,
    &quot;recipe[openssl]&quot;,
    &quot;recipe[apache2]&quot;,
    &quot;recipe[apache2::mod_php5]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[mysql::server]&quot;,
    &quot;recipe[php]&quot;,
    &quot;recipe[php::module_mysql]&quot;,
    &quot;recipe[apache2::vhosts]&quot;,
    &quot;recipe[database::mysql]&quot;,
    &quot;recipe[database::import]&quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s setup that custom recipe.  Bear in mind, there is probably a &lt;em&gt;correct&lt;/em&gt; way to do this.  I’m not aware of it, and this way &lt;em&gt;works&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p site-cookbooks/database/recipes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add &lt;code&gt;import.rb&lt;/code&gt; in your newly created directory with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#
# Cookbook Name:: database
# Recipe:: import
#
# Copyright 2012, Adam Brett. All Rights Reserved.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
include_recipe &quot;database::mysql&quot;

# Store this in a variable so we don't keep repeating it
mysql_connection_info = {
    :host =&amp;gt; &quot;localhost&quot;,
    :username =&amp;gt; 'root',
    # automatically get this from the override_attributes call!
    :password =&amp;gt; node['mysql']['server_root_password']
}

# my_database = database name
mysql_database 'my_database' do
  connection mysql_connection_info
  action :create
end

# import an sql dump from your app_root/data/dump.sql to the my_database database
execute &quot;import&quot; do
  command &quot;mysql -u root -p\&quot;#{node['mysql']['server_root_password']}\&quot; my_database &amp;lt; /srv/site/data/dump.sql&quot;
  action :run
end

# this isn't really necessary, as we're using root and not creating a database
# user, but I'm including it and commenting it out so you can see what it looks like
# mysql_database_user 'my_user' do
#  connection mysql_connection_info
#  database_name 'my_database'
#  action :grant
# end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, make sure the database dump exists, and run &lt;code&gt;vagrant provision&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Error!&lt;/p&gt;

&lt;p&gt;Again!&lt;/p&gt;

&lt;p&gt;It turns out that there is some weirdness with Chef and build-essential and Ruby Gems (which is what gives us the database LWRPs).  A quick scan of the build-essential README reveals we need to add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;default_attributes(
    &quot;build_essential&quot; =&amp;gt; {
        &quot;compiletime&quot; =&amp;gt; true
    }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to our role definition.  Go ahead and do that, so the whole thing should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Name of the role should match the name of the file
name &quot;vagrant-test-box&quot;

default_attributes(
    &quot;build_essential&quot; =&amp;gt; {
        &quot;compiletime&quot; =&amp;gt; true
    }
)

override_attributes(
    &quot;mysql&quot; =&amp;gt; {
        &quot;server_root_password&quot; =&amp;gt; 'iloverandompasswordsbutthiswilldo',
        &quot;server_repl_password&quot; =&amp;gt; 'iloverandompasswordsbutthiswilldo',
        &quot;server_debian_password&quot; =&amp;gt; 'iloverandompasswordsbutthiswilldo'
    }
)

# Run list function we mentioned earlier
run_list(
    &quot;recipe[apt]&quot;,
    &quot;recipe[build-essential]&quot;,
    &quot;recipe[openssl]&quot;,
    &quot;recipe[apache2]&quot;,
    &quot;recipe[apache2::mod_php5]&quot;,
    &quot;recipe[mysql]&quot;,
    &quot;recipe[mysql::server]&quot;,
    &quot;recipe[php]&quot;,
    &quot;recipe[php::module_mysql]&quot;,
    &quot;recipe[apache2::vhosts]&quot;,
    &quot;recipe[database::mysql]&quot;,
    &quot;recipe[database::import]&quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run it again &lt;code&gt;vagrant provision&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All done? Let’s verify it worked:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
mysql -u root -piloverandompasswordsbutthiswilldo


mysql&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| my_database        |
| mysql              |
+--------------------+
3 rows in set (0.00 sec)

mysql&amp;gt; use my_database;
Database changed

mysql&amp;gt; show tables;
+-----------------------+
| Tables_in_my_database |
+-----------------------+
| my_table              |
+-----------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success!  You should now be able to put your vagrant database details into your app and have it load as expected, and if not, I hope I’ve given you access to the tools and knowledge you need to start experimenting and debugging for yourself.&lt;/p&gt;

&lt;p&gt;In the months and year to come Vagrant and Chef are going to become as indispensable as syntax highlighting for any serious developer, so please give it a go and let me know on &lt;a href=&quot;http://twitter.com/sixdaysad&quot;&gt;twitter&lt;/a&gt; if there’s anything you think needs improving or clarifying in this post!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://vagrantup.com&lt;a href=&quot;#fnref:1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://www.opscode.com/chef&lt;a href=&quot;#fnref:2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;https://github.com/opscode-cookbooks/&lt;a href=&quot;#fnref:3&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/01/15/vagrant-is-easy-chef-is-hard</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/01/15/vagrant-is-easy-chef-is-hard.html"/>
    <title>Vagrant is easy - Chef is hard.</title>
    <published>2013-01-15T00:00:00+00:00</published>
    <updated>2013-01-15T00:00:00+00:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;This is part 1 of a 2 part quickstart to using Vagrant and Chef to speed up and simplify your development environment.  If you’re already familiar with Vagrant and just want to find out about Chef, go to &lt;a href=&quot;/2013/01/15/vagrant-is-easy-chef-is-hard-part2.html&quot;&gt;part 2 here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven’t started using Chef&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and Vagrant&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; yet, you should, it’s awesome and in a few short has totally changed my development environment.&lt;/p&gt;

&lt;p&gt;The only problem is that getting started with Chef is really really hard, and there is no good documentation out there for it.  Not even the manual.  Today I’m going to change that.  If you’re a developer and just want to build a consistent and reliable test environment, pay close attention.&lt;/p&gt;

&lt;p&gt;Just before Christmas we had a massive office refurbish.  The office was shut and completely inaccessible for just over a week, which meant I spent the week working from home, without access to our UAT box.  Normally this wouldn’t be a problem, I’d just have developed locally and uploaded when back in the office, except the issue I was working on was very specific to the PHP version we were running, our ops guys wouldn’t upgrade and that meant I needed an environment as close to live as possible for testing.&lt;/p&gt;

&lt;p&gt;I took this opportunity to pick-up vagrant.  I’d heard about it before, even installed it, but never really used it.&lt;/p&gt;

&lt;h2 id=&quot;vagrant&quot;&gt; Vagrant&lt;/h2&gt;

&lt;p&gt;Think of vagrant as a command line script for VirtualBox&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.  I’m going to skip over how to install both, as it’s really easy just following the instructions on their websites.&lt;/p&gt;

&lt;p&gt;There are a couple of important concepts in Vagrant&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Baseboxes&lt;/p&gt;

    &lt;p&gt;Baseboxes are virtual machine images.  This is the default start state of your VM.  Think of setting up a new VM, then saving a snapshot so that you can restore to that point any time you want.  That’s like a basebox.  Except baseboxes are scripted, so they’re way cooler.&lt;/p&gt;

    &lt;p&gt;Lots of people have created baseboxes for you already&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, so you don’t need to create your own.  The default is &lt;code&gt;lucid32&lt;/code&gt;, an ubuntu basebox.  This will probably be fine unless you know why you need another one.&lt;/p&gt;

    &lt;p&gt;Key Command (to add a new box): &lt;code&gt;vagrant box add lucid32 http://files.vagrantup.com/lucid32.box&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;lucid32&lt;/code&gt; is how you’ll reference the box locally, the url is where it can be downloaded.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;VagrantFile&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;Vagrantfile&lt;/code&gt; is the name of a textfile in the root of your project.  It provides all of the config settings, such as which directories on the host to mount in the VM (your code, etc), as well as networking config.&lt;/p&gt;

    &lt;p&gt;You’ll want to end up with a &lt;code&gt;Vagrantfile&lt;/code&gt; that looks something like this:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; Vagrant::Config.run do |config|
   # Your local name for the basebox you want to use.
   config.vm.box = &quot;lucid32&quot;

   # Assign this VM to a host-only network IP, allowing you to access it
   # via the IP. Host-only networks can talk to the host machine as well as
   # any other machines on the same network, but cannot be accessed (through this
   # network interface) by any external networks.
   config.vm.network :hostonly, &quot;192.168.33.33&quot;

   # Use the vagrant hostmaster plugin[^5] to automatically add a domain name
   config.vm.host_name = &quot;www.example.vm&quot;

   # Share an additional folder to the guest VM. The first argument is
   # an identifier, the second is the path on the guest to mount the
   # folder, and the third is the path on the host to the actual folder.
   # You can add as many of these as you like, anywhere you like
   config.vm.share_folder &quot;v-data&quot;, &quot;/srv/data&quot;, &quot;../data&quot;, :nfs =&amp;gt; true
   config.vm.share_folder &quot;v-site&quot;, &quot;/srv/site&quot;, &quot;.&quot;, :nfs =&amp;gt; true

   # Enable provisioning with chef solo, specifying a cookbooks path, roles
   # path, and data_bags path (all relative to this Vagrantfile), and adding
   # some recipes and/or roles.
   config.vm.provision :chef_solo do |chef|
     chef.roles_path = &quot;../chef/roles&quot;
     chef.cookbooks_path = [&quot;../chef/site-cookbooks&quot;, &quot;../chef/cookbooks&quot;]
     chef.add_role &quot;webserver&quot;
   end
 end
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Key Command (to add a new Vagrantfile to your current project): &lt;code&gt;vagrant init&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Baseboxes are normally empty&lt;/p&gt;

    &lt;p&gt;When you have a base ubuntu install, you can’t do much with it, that’s the same with baseboxes.  While you could build a basebox that already has everything you need installed, that’s not really using it to the best of its ability.  To get anything installed, you need a provisioner, and that’s where Chef comes in.  You can also use puppet, but don’t worry too much about that for now, provisioning is the hard part and we’ll cover it in the next post.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are 6 key commands you will need with vagrant&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code&gt;vagrant up&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;This starts the VM if it’s not already running.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code&gt;vagrant suspend&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;This saves the machine state and temporarily shuts down the VM.  Running &lt;code&gt;vagrant up&lt;/code&gt; will bring it back again exactly as it was.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code&gt;vagrant ssh&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;Login to your VM using ssh.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code&gt;vagrant provision&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;This re-runs your provisioner of choice (e.g. if you’ve updated something) without having to start from scratch.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code&gt;vagrant reload&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;This resets the VM to the basebox’s original state and re-runs your provisioner.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code&gt;vagrant destroy&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;This completely removes all trace of the VM from your system (but not the basebox or provisioner).&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This should be enough to get you started using Vagrant.  If you follow these steps, then run &lt;code&gt;vagrant up&lt;/code&gt; you should have a functioning VM, and the key commands should be enough to give you a great grounding in how to use vagrant.  Now carry on reading &lt;a href=&quot;/2013/01/15/vagrant-is-easy-chef-is-hard-part2.html&quot;&gt;part 2&lt;/a&gt; to find out how to make your VM actually do something useful.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://www.opscode.com/chef&lt;a href=&quot;#fnref:1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://vagrantup.com&lt;a href=&quot;#fnref:2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;https://www.virtualbox.org&lt;a href=&quot;#fnref:3&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;http://vagrantbox.es&lt;a href=&quot;#fnref:4&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2013/01/08/why-psr3-doesnt-make-sense</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2013/01/08/why-psr3-doesnt-make-sense.html"/>
    <title>Why PSR-3 Doesn't Make Sense and Why I'm Excited About It.</title>
    <published>2013-01-08T00:00:00+00:00</published>
    <updated>2013-01-08T00:00:00+00:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;PSR-3&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; doesn’t make sense because people aren’t writing the right kind of PHP yet.  By this I mean that people aren’t writing the kind of PHP that would benefit from having a standard logging interface across multiple frameworks and libraries.&lt;/p&gt;

&lt;p&gt;Most people are still writing Symfony PHP, or CakePHP, or CodeIgniter, or Zend or… you get the picture.  Why would it matter if they have a logger that they can use across all of the libraries and frameworks.  They only use the one.&lt;/p&gt;

&lt;p&gt;Some people use a slightly more modern approach, they use one of the more up-to-date frameworks with PSR-0 and composer support.  To them, it makes more sense.  If they’re using a library from packagist, wouldn’t it be great if you could tell (Symfony|Zend|Laravel) to use the same logger as all of your libraries when it was writing its logs, then you’d only need &lt;em&gt;one&lt;/em&gt; logger instance for all your apps, and it would write all your logs to the one place.  Great.&lt;/p&gt;

&lt;p&gt;I think this is likely where the original proposal came from, and that &lt;em&gt;is&lt;/em&gt; great, but I still think it misses the point.&lt;/p&gt;

&lt;p&gt;Imagine, if you would, the following application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── dist
│   ├── rest &amp;lt;-- SlimPHP
│   │   ├── README.md
│   │   ├── composer.json
│   │   ├── composer.lock
│   │   ├── logs
│   │   ├── public
│   │   ├── templates
│   │   └── vendor
│   └── web &amp;lt;-- CakePHP
│       ├── README.md
│       ├── app
│       ├── build.properties
│       ├── build.xml
│       ├── index.php
│       ├── lib
│       ├── plugins
│       └── vendors
├── logs
├── src &amp;lt;-- My Application Code
│   └── AdamBrett
│       └── Application
│           ├── Entities
│           ├── StorageAdapters
│           └── UseCases
├── tests
└── vendor &amp;lt;-- My 3rd Party Libraries
    └── Psr
        └── Log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this is the beginnings of a modern PHP application.  The source of the application, the bulk of the logic and entities are stored in the &lt;code&gt;src&lt;/code&gt; directory.  The REST API is delivered by the micro-framework SlimPHP, and the web application is delivered by CakePHP.&lt;/p&gt;

&lt;p&gt;They both have very little controller logic.  A controller action would basically setup a &lt;code&gt;StorageAdapter&lt;/code&gt; (imagine &lt;code&gt;CakeStorage&lt;/code&gt; and &lt;code&gt;IdiormStorage&lt;/code&gt; objects both implementing &lt;code&gt;StorageInterface&lt;/code&gt;), and pass it along to the relevant use-case - potentially with any relevant entity object - to perform the action required.  No repetition of code, a highly testable modern application.&lt;/p&gt;

&lt;p&gt;Then you look at the logging situation.  Slim is logging to &lt;code&gt;./dist/rest/logs&lt;/code&gt;, Cake is logging to &lt;code&gt;./dist/web/app/tmp/logs&lt;/code&gt;, and your use-cases use monolog&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; to log to somewhere else.  Yuk.&lt;/p&gt;

&lt;p&gt;The guys in camp 2, who kind of gets PSR-3, are now thinking: Wouldn’t it be great if we could just use monolog throughout to log to &lt;code&gt;./logs&lt;/code&gt;?  That’s what PSR-3 is for.&lt;/p&gt;

&lt;p&gt;No! &lt;em&gt;No cookies for you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I don’t want to sift through my logs and find entries from Slim, Cake, and my own code.  If one of my users has an issue with the API why would I care about Cake’s logs when Cake only handles my web requests?&lt;/p&gt;

&lt;p&gt;For that matter - why would I care about the logs my use-cases produce when called from Cake?  I don’t.  At all.  What I want, what I &lt;em&gt;really&lt;/em&gt; really want, is to say: Hey, I have a problem with the REST API, let’s check through the SlimPHP logs &lt;em&gt;and&lt;/em&gt; see the logs from any use cases it calls.  All in one place.  Together.  In date order.  As it happened.&lt;/p&gt;

&lt;p&gt;For me, &lt;em&gt;that’s&lt;/em&gt; what’s exciting about PSR-3.  I don’t want all my logs in one place.  I want to see my use-cases in Cake’s logs when I’m debugging my web app, and I want to see my use-cases in Slim’s logs when I’m debugging my REST API.&lt;/p&gt;

&lt;p&gt;Once SlimPHP and CakePHP support the PSR-3 logger standard internally, I want to pass &lt;em&gt;their&lt;/em&gt; loggers to &lt;em&gt;my&lt;/em&gt; use-cases and get the output &lt;em&gt;I&lt;/em&gt; want in the format &lt;em&gt;I&lt;/em&gt; want - in the location I expect it - with a high signal-to-noise ratio.&lt;/p&gt;

&lt;p&gt;The PSR-3 LoggerInterface has the potential to give me that.  And I think that’s pretty exciting.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md&lt;a href=&quot;#fnref:1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;https://github.com/Seldaek/monolog&lt;a href=&quot;#fnref:2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/08/10/introducing-tweetest-php-test-framework</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/08/10/introducing-tweetest-php-test-framework.html"/>
    <title>Introducing Tweetest</title>
    <published>2012-08-10T00:00:00+01:00</published>
    <updated>2012-08-10T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;A few weeks ago I stumbled upon the &lt;a href=&quot;http://twitto.org/&quot;&gt;Twitto&lt;/a&gt; ‘Web Framework in a Tweet’ by &lt;a href=&quot;http://fabien.potencier.org/&quot;&gt;Fabien Potencier&lt;/a&gt;, creator of the Symphony Framework.&lt;/p&gt;

&lt;p&gt;I was sure I had come across it before, as well as the &lt;a href=&quot;http://f055.net/article/the-140-character-webapp-challenge/&quot;&gt;140 Character Web-App Challenge&lt;/a&gt; that has inspired it, but not paid much attention to either.  What made a difference this time, however, was that earlier that day I had written a tiny test function for a disposable proof of concept that didn’t warrant a full unit testing framework.  I opened up my file from earlier that day, and after a few tweaks, &lt;a href=&quot;https://twitter.com/sixdaysad/status/223484283254349824&quot;&gt;tweeted&lt;/a&gt; the result.&lt;/p&gt;

&lt;p&gt;Since then (mostly for fun) I decided to see if I could replicate all of the assertions from PHPUnit with my tiny test function and nothing more.  It turns out, &lt;a href=&quot;http://adambrett.github.com/tweetest&quot;&gt;you can&lt;/a&gt;, so I gave tweetest a name, created a &lt;a href=&quot;http://github.com/adambrett/tweetest&quot;&gt;GitHub repo&lt;/a&gt; and even a &lt;a href=&quot;http://adambrett.github.com/tweetest&quot;&gt;website&lt;/a&gt; with some documentation to show others what could be done.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/08/03/git-cleanly-move-between-branches</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/08/03/git-cleanly-move-between-branches.html"/>
    <title>Git - A clean branch switching strategy</title>
    <published>2012-08-03T00:00:00+01:00</published>
    <updated>2012-08-03T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;You’re working on &lt;code&gt;feature/awesome-new-stuff&lt;/code&gt; and have a whole bunch of changes that you don’t want to commit yet, and you get a call about a bug that needs to be fixed asap.  You checkout develop, create a hotfix branch and make your changes.  Then you do &lt;code&gt;git status&lt;/code&gt; and see all of your experimental changes from &lt;code&gt;feature/awesome-new-stuff&lt;/code&gt; have come with you, making it harder to spot the changes relating only to the hotfix.&lt;/p&gt;

&lt;h2 id=&quot;the-quick-and-dirty&quot;&gt;The Quick and Dirty&lt;/h2&gt;

&lt;p&gt;The simplest way to avoid this is to stash any changes before you move to another branch, this looks something like this:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3075876.js?file=quick-and-dirty.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git stash
git checkout develop
git flow hotfix start &amp;lt;release&amp;gt;
...
&amp;lt;codecodecode&amp;gt;
...
git flow hotfix finish &amp;lt;release&amp;gt;
git checkout feature/awesome-new-stuff
git stash pop&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;However, if you find yourself doing this a lot, for a lot of different features and branches, this can get messy pretty quickly.  Instead, why not leverage the flexibility of git and just commit early and often, and simply amend as you go:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3075876.js?file=wip.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git add .
git commit -a -m 'WIP'
...
&amp;lt;codecodecode&amp;gt;
...
git add .
git commit --amend&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;Because you are working locally in git commits can be undone and re-done at will, it’s only when you push the commit to a central repository that you need to pay serious attention.&lt;/p&gt;

&lt;p&gt;So create a work in progress commit, and then use &lt;code&gt;git commit --amend&lt;/code&gt; to add to it often.  Then when you go to switch branches to work on another feature you don’t have to worry about stashing and popping or bringing changes with you.&lt;/p&gt;

&lt;p&gt;When you’re ready for the real commit on a branch you can run:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3075876.js?file=finish.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git reset --soft HEAD~
git reset&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;The first reset will undo your last commit (the WIP commit), with the second reset un-staging the files.  You can now re-commit all of your changes paying more serious attention to your commit message.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/25/imagine-php-image-library</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/25/imagine-php-image-library.html"/>
    <title>Make a circle thumbnail with the Imagine PHP Image Library</title>
    <published>2012-07-25T00:00:00+01:00</published>
    <updated>2012-07-25T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;h2 id=&quot;what-is-imagine&quot;&gt;What is Imagine&lt;/h2&gt;

&lt;p&gt;Image processing in PHP is &lt;em&gt;really&lt;/em&gt; unpleasant.  Imagine is a PHP 5.3 library which makes image processing suck way less.  According to the &lt;a href=&quot;http://imagine.readthedocs.org&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/avalanche123/Imagine&quot;&gt;Imagine&lt;/a&gt; is a[n] OOP library for image manipulation built in PHP 5.3 using the latest best practices and thoughtful design that should allow for decoupled and unit-testable code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Put simply, Imagine is a nicely PSR-0 namespace’d wrapper that provides a consistent interface for lower level Gd, ImageMagick and GMagick functionality.  And &lt;em&gt;consistency is good&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you haven’t heard of Imagine, or aren’t familiar with its concepts, go &lt;a href=&quot;https://speakerdeck.com/u/avalanche123/p/introduction-to-imagine&quot;&gt;here&lt;/a&gt; and read the presentation first, as the code below assumes a knowledge of its features concepts.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Whilst re-working an area of our internal CRM, we came up with the idea of cards.  These would be little snippets of information about people, companies, products and other CRM objects related to the page you’re on, neatly stacked in order of importance down the right-hand side of a page.&lt;/p&gt;

&lt;p&gt;Here’s an initial concept for a contact card:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/contact-card-square.png&quot; alt=&quot;Contact Card Square&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pretty good, but we decided we can do a bit bitter, and rounded pictures would be a bit friendlier:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/contact-card-face.png&quot; alt=&quot;Contact Card Round&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Only problem, that makes coding the thumbnails a lot harder.  Our users aren’t going to upload nice transparent rounded pictures for us, so we’re going to have to find a way to process them ourselves.&lt;/p&gt;

&lt;h2 id=&quot;enter-imagine&quot;&gt;Enter Imagine&lt;/h2&gt;

&lt;p&gt;Having read about Imagine, it had peaked my interested, and I’d wanted to use it on a project for a while.  It turns out that creating a circle thumbnail with Imagine is actually really easy.  Much like most custom things in Imagine, you want to create a filter, I called mine &lt;code&gt;CircleThumbnailFilter&lt;/code&gt; (original, I know).  It looks like this:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3060605.js?file=CircleThumbnailFilter.php&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class CircleThumbnailFilter implements Imagine\Filter\FilterInterface
{
    private $imagine;

    public function __construct(Imagine\Image\ImagineInterface $imagine,
        Imagine\Image\BoxInterface $size)
    {
        $this-&amp;gt;imagine = $imagine;
        $this-&amp;gt;size = $size;
    }

    public function apply(Imagine\Image\ImageInterface $image)
    {
        // create a thumbnail
        $thumbnail = $image-&amp;gt;thumbnail(
            $this-&amp;gt;size,
            Imagine\Image\ImageInterface::THUMBNAIL_OUTBOUND
        );

        // create a new image to hold our mask
        // make the background white
        $mask = $this-&amp;gt;imagine-&amp;gt;create($this-&amp;gt;size, new Imagine\Image\Color('fff'));

        // draw a black circle at the center of our new image
        // use $this-&amp;gt;size to make it full width and height
        $mask-&amp;gt;draw()
            -&amp;gt;ellipse(
                new Imagine\Image\Point\Center($this-&amp;gt;size),
                $this-&amp;gt;size,
                new Imagine\Image\Color('000', 0),
                true
            );

        // apply the mask to the thumbnail and return it
        return $thumbnail-&amp;gt;applyMask($mask);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;The constructor is fairly self explanatory, it takes an instance of your imagine interface, and a box instance which is used to control the size of your thumbnail.&lt;/p&gt;

&lt;p&gt;The apply function is the one that does the work, it is required to take exactly one parameter, an instance of &lt;code&gt;Imagine\Image\ImageInterface&lt;/code&gt; which is enforced by &lt;code&gt;Imagine\Filter\FilterInterface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first thing we do is resize our image, if someone uploads a 1000x1000 image, we want to scale it down.&lt;/p&gt;

&lt;p&gt;Next, we create a canvas and call it &lt;code&gt;$mask&lt;/code&gt;.  We so this by calling the &lt;code&gt;create&lt;/code&gt; method on the &lt;code&gt;ImageInterface&lt;/code&gt; we passed to our constructor.  We pass in the &lt;code&gt;BoxInterface&lt;/code&gt; we also passed to our constructor to tell it the size of the image we want to create, and a new &lt;code&gt;Imagine\Image\Color&lt;/code&gt; to tell it the background colour we want.  We then end up with a brand-new instance of &lt;code&gt;Imagine\Image\ImageInterface&lt;/code&gt; in &lt;code&gt;$mask&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we call the draw method on the image stored in $mask to load the &lt;code&gt;Drawer&lt;/code&gt; object, and then we tell it to draw us an ellipse.&lt;/p&gt;

&lt;p&gt;We first pass in the position we want the ellipse drawn at, which is the exact center of the Box we’ve been using all the way through, we tell it that we want our ellipse to be the same size as our box (i.e. to fill it), and we tell it to make it black, with no transparency, and finally we pass &lt;code&gt;true&lt;/code&gt; which tells it that it should be filled, rather than an outline.&lt;/p&gt;

&lt;p&gt;Once we have our mask created, if we were to save it, it would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/contact-card-mask.png&quot; alt=&quot;Contact Card Mask&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We don’t want to output our mask though, we just want to use it to make parts of our square thumbnail transparent.  To do that we use Imagine’s built-in applyMask filter, passing the mask we created earlier in as the only parameter.  We can then return this image so we can use it in our scripts.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To use the filter, you need to include Imagine using &lt;a href=&quot;http://imagine.readthedocs.org/en/latest/usage/introduction.html#installation&quot;&gt;one of the methods in the documentation&lt;/a&gt;, I recommend installing it via &lt;a href=&quot;http://getcomposer.org&quot;&gt;composer&lt;/a&gt;, as Imagine is available on &lt;a href=&quot;http://packagist.org/packages/imagine/Imagine&quot;&gt;packagist&lt;/a&gt;, and then using the composer autoloader to load Imagine via the PSR-0 namespace syntax.&lt;/p&gt;

&lt;p&gt;You will also need to autoload or require the CircleThumbnailFilter object somehow, you could put it in your app’s namespace or just do it the old-school way with &lt;code&gt;require_once&lt;/code&gt;.  Either way, when both are loaded, you can run the circle filter like so:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3060605.js?file=usage.php&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php

$imagine = new Imagine\Gd\Imagine();
$filter  = new CircleThumbnailFilter($imagine, new Imagine\Image\Box(100, 100));

$filter-&amp;gt;apply($imagine-&amp;gt;open('/path/to/square/image.jpg'))
    -&amp;gt;save('/path/to/circle/image.png');&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;Make sure that no-matter what your input format (which isn’t really important, Imagine should know what to do with most valid image formats), make sure you output it as something with transparency (preferably png).  Don’t do what I did and spend 40 minutes wondering why the transparency mask wasn’t applying when you were outputting as a jpg.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/17/cakephp-class-string-not-found</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/17/cakephp-class-string-not-found.html"/>
    <title>Class 'String' not found in app/Model/User.php on line xx</title>
    <published>2012-07-17T00:00:00+01:00</published>
    <updated>2012-07-17T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;This is a really easy to fix error that occurs in a very specific situation.  Namely when developing an application in CakePHP that makes use of the ACL behavior whilst also having a &lt;code&gt;beforeSave&lt;/code&gt; method on the User model.  It can be pretty frustrating at first because there’s nothing about it on the Internet, and as far as you can tell, there isn’t an error on line xx, and you’re not using the String object anywhere.&lt;/p&gt;

&lt;p&gt;It’s happening because of a missing options array on the &lt;code&gt;beforeSave&lt;/code&gt; method you added to the User model.  Simply change:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;public function beforeSave() {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function beforeSave($options = array()) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and make sure that you call &lt;code&gt;parent::beforeSave($options)&lt;/code&gt; somewhere in your method definition.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/13/unchangable-public-variables-in-php</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/13/unchangable-public-variables-in-php.html"/>
    <title>Unchangable Public Variables In PHP</title>
    <published>2012-07-13T00:00:00+01:00</published>
    <updated>2012-07-13T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;If you’ve ever had a use-case where you want to make a class property publicly readable, but not writable, (without adding a getter), this is how you do it.&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;Obviously, the easiest (and probably correct/best) way to do this is to add a getter to the class that returns the value of the private/protected property.  However this is a trick to make it appear as a normal property (in case you don’t want any getters in your API, for example).&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;p&gt;This trick involves using PHP’s magic methods and looks like this:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3104351.js?file=MagicPublicProperty.php&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class MagicPublicProperty {
    protected $_primaryKey = 'id';

    public function __set($property, $value) {
        if($property == 'primaryKey') {
            $name = get_class($this);
            throw new Exception(&amp;quot;Unable to set property `{$property}` on&amp;quot;
                . &amp;quot; objects of type `{$name}`&amp;quot;);
        }
    }

    public function __get($property) {
        if($property == 'primaryKey' &amp;amp;&amp;amp; isset($this-&amp;gt;_primaryKey)) {
            return $this-&amp;gt;_primaryKey;
        }
    }

    public function __isset($property) {
        if($property == 'primaryKey') {
            return isset($this-&amp;gt;_primaryKey);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;Here we have a protected property that is obviously only accessible to instances of this class or child classes.&lt;/p&gt;

&lt;p&gt;Below that we are using PHP’s magic methods &lt;code&gt;__get&lt;/code&gt; and &lt;code&gt;__isset&lt;/code&gt; to intercept calls to this class’ properties and we’re checking to see if the property attempting to be accessed is &lt;code&gt;primaryKey&lt;/code&gt;.  If it is, we return either the &lt;code&gt;isset&lt;/code&gt; result or the value, depending on what we want to do.  This bit is fairly straight forward.&lt;/p&gt;

&lt;p&gt;To stop anyone from attempting to set the value of this property from outside of the class, we need to add something to the &lt;code&gt;__set&lt;/code&gt; magic method, if we didn’t, it could lead to unexpected results.  We &lt;em&gt;could&lt;/em&gt; just trap it and return, doing nothing, but to make sure no-one does this accidentally in their code expecting it work, we should throw an exception with a helpful message.&lt;/p&gt;

&lt;p&gt;What if you want it to be modified from outside of the class too?&lt;/p&gt;

&lt;p&gt;Make it public (duh).&lt;/p&gt;

&lt;h3 id=&quot;tests&quot;&gt;Tests&lt;/h3&gt;

&lt;p&gt;Here are some quick tests to prove it’s working as expected:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3104351.js?file=tests.php&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php

require_once __DIR__ . '/MagicPublicProperty.php';

$test = new MagicPublicProperty;

/*
Added the following methods to MagicPublicProperty for the below tests:

    public function changePrimaryKey() {
        $this-&amp;gt;_primaryKey = array(
            'foreign_key_1',
            'foreign_key_2'
        );
    }

    public function removePrimaryKey() {
        unset($this-&amp;gt;_primaryKey);
    }

*/

test(isset($test-&amp;gt;primaryKey), 'Is set');

test($test-&amp;gt;primaryKey == 'id', 'Is accessible');

test(function() use ($test) {
    $test-&amp;gt;changePrimaryKey();
    return is_array($test-&amp;gt;primaryKey);
}, 'Is internally changeable');

test(function() use ($test) {
    try {
        $test-&amp;gt;primaryKey = 'somethingelse';
    } catch (Exception $e) {
        return true;
    }

    return false;
}, 'Exception if set');

function test($c,$m) {
    $c = (is_callable($c)) ? $c() : $c;
    if($c) {
        echo &amp;quot;$m: Passed\n&amp;quot;;
    } else {
        echo &amp;quot;$m: Failed\n&amp;quot;;
    }
}
echo &amp;quot;\n\n&amp;quot;;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;and the results:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3104351.js?file=results&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;Is set: Passed
Is accessible: Passed
Is internally changeable: Passed
Exception if set: Passed&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/10/unable-to-run-adb-andriod-ubuntu-eclipse</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/10/unable-to-run-adb-andriod-ubuntu-eclipse.html"/>
    <title>Unable to run 'adb', Andriod SDK, Ubuntu, Eclipse</title>
    <published>2012-07-10T00:00:00+01:00</published>
    <updated>2012-07-10T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;If you get the following really annoying message while trying to install the andriod SDK on ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stopping ADB server failed (code -1).
Unable to run 'adb': Cannot run program &quot;/home/user/android-sdk-linux/platform-tools/adb&quot;: java.io.IOException: error=2, No such file or directory.
Starting ADB server failed (code -1).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s because you’re running 64bit ubuntu, and phones (and therefore the SDK) are only 32bit, if you run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install ia32-libs&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will solve all of your problems and the SDK will install correctly.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/04/git-changes-wrong-branch</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/04/git-changes-wrong-branch.html"/>
    <title>Git - Help! I made my changes on the wrong branch (easy fix)</title>
    <published>2012-07-04T00:00:00+01:00</published>
    <updated>2012-07-04T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;h2 id=&quot;weve-all-done-it&quot;&gt;We’ve all done it&lt;/h2&gt;

&lt;p&gt;You get an emergency email from your boss and have to immediately drop everything you’re doing to solve his problem.  You listen to what’s wrong and make all the necessary changes, test it, and then you’re ready to commit, only you’re on &lt;code&gt;feature/awesome-new-stuff&lt;/code&gt; and forgot to checkout &lt;code&gt;develop&lt;/code&gt; before you made your changes. ****.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All is not lost&lt;/em&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Pre-git, I have no idea how I would have fixed this.  Separating your fixes with your feature changes would probably have been done by hand, and taken ages.&lt;/p&gt;

&lt;p&gt;However thanks to git we can simply checkout the correct branch, and and our untracked changes will move with us.&lt;/p&gt;

&lt;h2 id=&quot;if-youve-not-committed-yet&quot;&gt;If you’ve not committed yet&lt;/h2&gt;

&lt;p&gt;First, make sure all of your &lt;em&gt;feature&lt;/em&gt; changes are committed to the correct branch (but &lt;em&gt;not&lt;/em&gt; the fixes you want to move!), then:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3047748.js?file=checkout.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git checkout &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;Be sure to replace &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; with the name of the branch you actually want to commit to.&lt;/p&gt;

&lt;h2 id=&quot;if-youve-already-committed-the-changes&quot;&gt;If you’ve already committed the changes&lt;/h2&gt;

&lt;p&gt;If you’ve already committed your changes, you need to do a SOFT reset. A soft reset will put your changes back into the index, instead of destroying them like a HARD reset would:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3047748.js?file=soft-reset.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;A quick note here, the ^ is the number of commits to roll-back, so if you wanted to go back 2 commits, you’d use:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3047748.js?file=soft-reset-2.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^^&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;and for 3 commits&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3047748.js?file=soft-reset-3.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^^^&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;and so on… then you can run the &lt;a href=&quot;#if-youve-not-committed-yet&quot;&gt;checkout&lt;/a&gt; command above.&lt;/p&gt;

&lt;h2 id=&quot;if-there-is-a-conflict-between-the-two-branches&quot;&gt;If there is a conflict between the two branches&lt;/h2&gt;

&lt;p&gt;If the changes you want to move will conflict with something on the branch you’re moving to git will simply refuse to checkout the new branch.  In this instance you want to use the stash-checkout-pop command like so:&lt;/p&gt;

&lt;div&gt;&lt;script src=&quot;https://gist.github.com/3047748.js?file=stash-checkout-pop.sh&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;git stash &amp;amp;&amp;amp; git checkout &amp;lt;branch&amp;gt; &amp;amp;&amp;amp; git stash pop&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;

&lt;p&gt;This will stash the changes so you have nothing to move, then checkout the new branch (as with nothing to move there can be no conflicts), and finally pop the stashed changes into the new branch ready for committing.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Unless you’ve made changes in the same files as your fixes, you’ll have to find another way, sorry!&lt;a href=&quot;#fnref:1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/07/03/anatomy-of-a-good-commit-message</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/07/03/anatomy-of-a-good-commit-message.html"/>
    <title>Anatomy Of A Good Commit Message</title>
    <published>2012-07-03T00:00:00+01:00</published>
    <updated>2012-07-03T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;The developers at my new job have been using subversion for the last 8 years, and with a few exceptions, huge &lt;em&gt;code-bomb&lt;/em&gt; style commits covering numerous features and changes (and with generic one-line commit messages) seem to have been the norm.  Source control was used primarily for backup (a sin I think many teams are guilty of at one point or another), and wasn’t used to its full potential, so no-one really paid attention to commit messages or the size of commits; after they were written they were never referenced again.&lt;/p&gt;

&lt;p&gt;When I joined the team, they had already researched and seen the benefits of Git and wanted to move as soon as possible. With my advocation and re-iteration of the various benefits management were quickly convinced and the work was scheduled.  I wanted to make sure Git became a useful tool for the whole team and once everything was ready to be moved across, that meant introducing the idea of smaller atomic commits with better (more useful) commit messages.&lt;/p&gt;

&lt;p&gt;There are already a few &lt;a href=&quot;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;good&lt;/a&gt; &lt;a href=&quot;http://lbrandy.com/blog/2009/03/writing-better-commit-messages/&quot;&gt;posts&lt;/a&gt; and &lt;a href=&quot;http://programmers.stackexchange.com/questions/42110/can-you-recommend-a-good-commit-message-template-guidelines-to-enforce-in-the&quot;&gt;discussions&lt;/a&gt; about what makes a good commit message, but they all lack the rigidity that I felt we were going to need to break 8 years of bad habit.  I wanted a system I could present that wasn’t going to be overwhelming to a team of widely varying skill levels, on top of getting used to a new SCM, a new way of working (with feature branches/git flow) and smaller atomic commits.&lt;/p&gt;

&lt;p&gt;Whilst the information already out there is great, it doesn’t provide the copy, paste, and fill-in-the-blanks kind of template I wanted for the junior developers so they didn’t have to think too much about their commit messages (at least until they became more familiar with the new tools and processes), and those already familiar with good commit practices had a rock solid base to work from.&lt;/p&gt;

&lt;h2 id=&quot;template&quot;&gt;Template&lt;/h2&gt;

&lt;p&gt;With that in mind, I compiled the various posts and discussions on commit messages into the following template, the bulk of the template is from &lt;a href=&quot;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;here&lt;/a&gt; with a couple of minor modifications.  It’s &lt;a href=&quot;https://github.com/blog/926-shiny-new-commit-styles&quot;&gt;widely accepted&lt;/a&gt; as the best example of a good commit message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Action: Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical; tools like
rebase can get confused if you run the two together.

Write your commit message in the present tense: &quot;Fix bug&quot; and not &quot;Fixed
bug.&quot;  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a
  single space, with blank lines in between, but conventions vary here

- Use a hanging indent

Relation: #issue
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;rules&quot;&gt;Rules&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The body of a commit is mandatory.  You should explain to those who might be looking back over your code why you did what you did in this commit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Commits should be atomic.  That is, a single unit of functionality that can be applied or reverted in its entirety.  Commits should not include changes across functionality.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The first word of the summary should be one of:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Add&lt;/li&gt;
      &lt;li&gt;Modify&lt;/li&gt;
      &lt;li&gt;Re-factor&lt;/li&gt;
      &lt;li&gt;Fix&lt;/li&gt;
      &lt;li&gt;Remove&lt;/li&gt;
      &lt;li&gt;Tidy&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;And should accurately describe what you’re doing with this commit.  If you’re doing more than one of these actions in a commit, you should probably consider breaking them into smaller commits.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last line of the description should be one of the following statuses, followed by a hash (#) and the issue number from the tracker, if relevant:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Fixes&lt;/li&gt;
      &lt;li&gt;Closes&lt;/li&gt;
      &lt;li&gt;References&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Your keywords may vary, but in our issue tracker &lt;em&gt;fixes&lt;/em&gt; and &lt;em&gt;closes&lt;/em&gt; are keywords that will assign statuses to an issue, &lt;em&gt;references&lt;/em&gt; doesn’t do anything, but including the issue number with a # will link the commit to that issue, so it’s nice to know that you’re just putting it in there to reference the issue.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These rules haven’t been in use very long, and aren’t set in stone.  As time goes on we might find ourselves relaxing them, adding to them, or changing them all together.  As a base to work from they pretty solid right now and should stand us in good stead for the foreseeable future.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://adamcod.es/2012/06/29/welcome-to-the-first-post</id>
    <link type="text/html" rel="alternate" href="http://adamcod.es/2012/06/29/welcome-to-the-first-post.html"/>
    <title>The lorem ipsum</title>
    <published>2012-06-29T00:00:00+01:00</published>
    <updated>2012-06-29T00:00:00+01:00</updated>
    <author>
      <name>Adam Brett</name>
      <uri>http://adamcod.es/</uri>
    </author>
    <content type="html">&lt;p&gt;Hello, this is a test.&lt;/p&gt;

&lt;p&gt;Ever since I got my first low spec VPS I’ve been interested in finding more efficient ways of using those resources.  I’ve looked at all sorts of caching and server tweaks aimed as consuming less resources and had some successes, and quite a lot of failures, so when I first came across the jekyll blogging engine a few years ago &lt;em&gt;it just made sense&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ever since then I’ve wanted to try using it, but for one reason or another never got around to it.  Now that’s going to change, this is my first foray into blogging with jekyll, and I’m going to see how it goes.  Stay tuned.&lt;/p&gt;
</content>
  </entry>
  
 
</feed>
